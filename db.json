{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/langselect.js","path":"js/langselect.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/mouseclick.js","path":"js/mouseclick.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","path":"js/comment/gitalk_.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":0,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":0,"renderable":1},{"_id":"source/LICENSE","path":"LICENSE","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/img/avatar/fatpeople.jpg","path":"img/avatar/fatpeople.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/favicon.png","path":"img/avatar/favicon.png","modified":0,"renderable":0},{"_id":"source/img/avatar/favicon1.png","path":"img/avatar/favicon1.png","modified":0,"renderable":0},{"_id":"source/img/avatar/roguerabbit.jpg","path":"img/avatar/roguerabbit.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/404_bg.jpg","path":"img/header_img/404_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg.jpg","path":"img/header_img/archive_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg2.jpg","path":"img/header_img/archive_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive_bg3.jpg","path":"img/header_img/archive_bg3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/categories_bg.jpg","path":"img/header_img/categories_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg.jpg","path":"img/header_img/lml_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/lml_bg8.jpg","path":"img/header_img/lml_bg8.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/newhome_bg.jpg","path":"img/header_img/newhome_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag_bg.jpg","path":"img/header_img/tag_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg.jpg","path":"img/scenery/about_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg2.jpg","path":"img/scenery/about_bg2.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/about_bg4.jpg","path":"img/scenery/about_bg4.jpg","modified":0,"renderable":0},{"_id":"source/img/scenery/treat_me_to_coffee.png","path":"img/scenery/treat_me_to_coffee.png","modified":0,"renderable":0},{"_id":"source/img/signature/vincent-white.png","path":"img/signature/vincent-white.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"ec2d37d705a85fa3eaf6f32af4c8962f5c7ef230","modified":1666661120939},{"_id":"source/robots.txt","hash":"66078f56462509b9624be31d3e78ae2b62a33b60","modified":1666600538009},{"_id":"source/CNAME","hash":"8929eb36e7c7960e964c2fea3cd9b4253ed169df","modified":1666661120939},{"_id":"source/_data/musics.json","hash":"478a883885cf6d3979863dd879be185cb4a91d0a","modified":1666600538006},{"_id":"source/archive/index.md","hash":"4ce216f06a1b4da989506010c1d7ab96ffa05ff5","modified":1666661121015},{"_id":"source/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1666661120940},{"_id":"source/about/index.md","hash":"3c89a65f21216cd3000b96c706d4b50a7b67bbd3","modified":1666661121015},{"_id":"source/_data/friends.json","hash":"8295e488fc365418ff1aac6f7f06898a0281e452","modified":1666600538006},{"_id":"source/_posts/对象模式设计-各种对象模式详解与差异.md","hash":"c65e85ba698e66b734e2068e7686bbae3571a09e","modified":1667790358242},{"_id":"source/archives/index.md","hash":"44f160ecdfe402aa2f95a4ef60a148455546510f","modified":1666600538008},{"_id":"source/categories/index.md","hash":"3d5db5dcead0a4f2f8605d1cd2db6df3e8e7e4db","modified":1666661121016},{"_id":"source/friends/index.md","hash":"dd7a9569e1b1b5f783e0d360a775121556d50818","modified":1666600538009},{"_id":"source/tags/index.md","hash":"52e3cad1bc1fb97f9429d4b5053ab97dc6cf22e8","modified":1666661121364},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife.md","hash":"31f4878a8005d5c929d9cdb74689c986daec2bf0","modified":1666676431414},{"_id":"source/_posts/1.md","hash":"df6d5687286bc19418b11c2f71c6bfd8e2620607","modified":1666600538006},{"_id":"source/img/avatar/fatpeople.jpg","hash":"04cc046c50473ab78aee784df62f05448be8b884","modified":1666661121017},{"_id":"source/_posts/VMware-安装-CentOS-8-1-完整教程.md","hash":"7bc91488fe0772118f7a57d8cc4e61542ffb9202","modified":1666600538007},{"_id":"source/img/avatar/favicon.png","hash":"6b34cde4449bf3a5e1dd51ffc04b103a31888b22","modified":1666677071190},{"_id":"source/contact/index.md","hash":"c209f6a38f421c9dab14dbcc0bb730503faead40","modified":1666600538009},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife.md","hash":"b79b5269bbf445b7f985042781beda56a42e4c0c","modified":1666662311002},{"_id":"themes/livemylife/_config.yml","hash":"1227ec65460a11a379ae82ebba41274662d6453e","modified":1666754858835},{"_id":"themes/livemylife/languages/cn.yml","hash":"5bf3e178962cfd50f295753d64135278231bddb9","modified":1666661121365},{"_id":"themes/livemylife/languages/tw.yml","hash":"684153b0299e9cb68c13ddc545d36c140dcde107","modified":1666661121366},{"_id":"themes/livemylife/languages/default.yml","hash":"b43dba8933b68c4464f94ab94b4065e9955ce06b","modified":1666661121365},{"_id":"themes/livemylife/languages/en.yml","hash":"b43dba8933b68c4464f94ab94b4065e9955ce06b","modified":1666661121365},{"_id":"themes/livemylife/layout/404.ejs","hash":"053e99dad0f9810337b0a8f5037db2405683a83b","modified":1666661121366},{"_id":"themes/livemylife/layout/about.ejs","hash":"96eb2c91f8135302e1b0e2371a577ca5bdb5595b","modified":1666661121371},{"_id":"themes/livemylife/layout/categories.ejs","hash":"03b5d89380ecb4bc3f374cc00e4c2c894c5bc5d5","modified":1667801297721},{"_id":"themes/livemylife/layout/archive.ejs","hash":"ca9f4f9e29e074ec0440b7dc02ebbc81dba9b2dd","modified":1666661121371},{"_id":"themes/livemylife/layout/index.ejs","hash":"3955abc1c16a14ad578957d9984c3798cdbcb64e","modified":1666661121371},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"318a9826afd72fa68989cb79ba8cc96d0061afb0","modified":1666661121371},{"_id":"themes/livemylife/layout/layout.ejs","hash":"5708ac135ff3d184eb37cb50c98184b715193021","modified":1666661121372},{"_id":"themes/livemylife/layout/page.ejs","hash":"087d26e37b2bae12d7384be2fc5b94f924986306","modified":1666661121372},{"_id":"themes/livemylife/layout/post.ejs","hash":"3b31e4e200be31929ed09132d05a5a97e524f87c","modified":1666765868424},{"_id":"themes/livemylife/layout/tags.ejs","hash":"30e45acd1338c845f9ed87920cedd2203281d27c","modified":1666661121372},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"073df9003dc40e09af1c27438860c22d0bc8fe60","modified":1667355990200},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"228c38946eaf70a42d4c25bd9bfdc28c1e4d8fcd","modified":1666755557504},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"4598b83976fe15071b4a76d26dc499fe2a56dac0","modified":1666661121367},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"232fa7130a1111be81a54225d608657484611bfe","modified":1666676774259},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"34c97132f17f3c31aabe6dfbc908f0650213e847","modified":1666661121367},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"a4ddbaf01edc3af4c10587b0c33cb07d43728628","modified":1666661121367},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"194a25ef321ea65578cf751db0b7677e0ee4ba42","modified":1666661121368},{"_id":"themes/livemylife/layout/_partial/langselect.ejs","hash":"e1e195de53d4b2a46dd9bdc163ba9174e06a3ad8","modified":1666661121368},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"d015b8ae6f5aebcd145a3b1bfa96744de66c86c1","modified":1666661121368},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"7a8256a4b43fb3726264bd5897fb861d02ef2418","modified":1667267613710},{"_id":"themes/livemylife/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1666661121364},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"b1e8ee7b9e5ae7c839edd3a41611bc743bc2092a","modified":1666661121368},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"1b50bdbc89731a0f04732aff9286ae945ecbe8b7","modified":1666661121369},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"a827b1d5ffb695b80205bd1378234b9904c8308e","modified":1666661121368},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"a9838d401a7fdaa69f55ce40bdfef945cc953a58","modified":1666661121369},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"0550c303a8e635408db9ae7175b63e940bd7055e","modified":1666661121369},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"ea9e5e50d32a80b25ba4323998e969a32b66b1d2","modified":1666661121369},{"_id":"themes/livemylife/layout/_partial/tip.ejs","hash":"62fc8b17f4661a2baa9357a311b4dd4bb792a138","modified":1666661121369},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"24671d81b25bce97245d8367c7e0c6b2d85955b6","modified":1666661121370},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"7b83d0287e467c11c8c9e434e9e4ce5c864b0980","modified":1666661121370},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"1d5b8d88616594664b2530261d6db87df6b1895d","modified":1666661121369},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"a587f6a911ccd9e38335cb856a86bcc354e47b35","modified":1666661121370},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"c04644e6830f90ff3ff723f42b0a1192ddf289ec","modified":1667801676362},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"3a624aecb0c8893d8680d7bba81f9a9aa677ce4f","modified":1666661121370},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"bbe236d6a05d4c266c92109f93d4d0c441b25b73","modified":1666756239532},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"646a634ac252896d9e9f4d322d782e69c66d65ae","modified":1666661121375},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"78345a0fd0ee4bd4d0eb37f436b74003de0558a0","modified":1666768411610},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"2eecb08c533fa2d5a27292f4983db9c22c57c328","modified":1666676903930},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ef16ea9eeb589e9334a0f071afb5f0cdaa34d69c","modified":1666661121376},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"678420a06065424080c22c2a9d2a7f501dac5ef2","modified":1666661121376},{"_id":"themes/livemylife/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1666661121376},{"_id":"themes/livemylife/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1666661121372},{"_id":"themes/livemylife/source/css/beantech.css","hash":"ada2a647cbcbe7ae43dcb01c3d96c0592855e65b","modified":1667800642600},{"_id":"themes/livemylife/source/css/top.css","hash":"7fe7d9d4434fe2bb7178e0f43977b3869b5c0fdf","modified":1666661121377},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"bb52e4168e5b740d04bcabe3833f42e98f8037da","modified":1666661121377},{"_id":"themes/livemylife/source/css/search.css","hash":"b8d680e4d9801774bf73784b31f372162d57e4e0","modified":1666661121376},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"a7ea471907a8d30f88e1c0b7986695e46e5128b2","modified":1667801401095},{"_id":"themes/livemylife/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1666661121378},{"_id":"themes/livemylife/source/css/wave.css","hash":"fb939f76dc9a48d3a7e7384f64943dac710ad452","modified":1666661121377},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1666661121375},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1666661121379},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1666661121382},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1666661121381},{"_id":"themes/livemylife/source/js/catalog.js","hash":"4e34f47053ece8c1a4ab4a8441760a3d33ea9fb8","modified":1666661121383},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1666661121380},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1666661121390},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1666661121381},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1666661121390},{"_id":"themes/livemylife/source/js/langselect.js","hash":"6438d00cd2d9770ec48ab453aba12fa5ace986ed","modified":1666661121393},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1666661121393},{"_id":"themes/livemylife/source/js/ribbonDynamic.js","hash":"75449860641e0ca475b1e7b5595851cc6e640722","modified":1666661121394},{"_id":"themes/livemylife/source/js/scroll.js","hash":"182250b3bee27de24099863f0973bb7971405464","modified":1666661121394},{"_id":"themes/livemylife/source/js/mouseclick.js","hash":"8353161e1cb3446f4647908441b8e2fc1e49aaac","modified":1666661121394},{"_id":"themes/livemylife/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1666661121395},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"f61a11e60be24cf0c64019ca4dc4dc49c325ed71","modified":1666661121396},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1666661121376},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1666661121376},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1666661121393},{"_id":"themes/livemylife/source/js/line.js","hash":"ffccb7e8713746af8d1f10b1b194c69090429e21","modified":1666661121394},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"3955cbca226b562f8dec96dc459ce22363affdde","modified":1666661121395},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"b09fff2aa41305e8975b9ef80514eb937ffa6866","modified":1666661121396},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1666661121376},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1666661121376},{"_id":"source/img/scenery/about_bg.jpg","hash":"462c14b9b00ab2153e579f14cb1e44aa56704ce8","modified":1666661121358},{"_id":"source/img/scenery/about_bg4.jpg","hash":"272f0d4233aea38f32311439f8528d2b3bebd546","modified":1666661121360},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1666661120947},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","hash":"3c6f335347d04e093fccc77e916c4a9d0c6c4a75","modified":1666661120986},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1667802071749},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1666661121380},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1666661121382},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1666661121393},{"_id":"source/img/avatar/favicon1.png","hash":"db659b2da84fefec5a715c91706ab71712c4d5a5","modified":1666590956613},{"_id":"source/img/scenery/treat_me_to_coffee.png","hash":"f5691b4f654701eaa19830a76062d86c0b58f999","modified":1666661121361},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"b9a3dae845780916a38a137bcbfb004f9041b71c","modified":1667802148459},{"_id":"source/img/scenery/about_bg2.jpg","hash":"bdffbe6a94f9c5be1b9353fc2b4f28a74677939f","modified":1666661121359},{"_id":"themes/livemylife/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1666661121392},{"_id":"source/img/avatar/roguerabbit.jpg","hash":"3c71801016fc2b587c128d42f45438f523bb1a1a","modified":1666661121018},{"_id":"source/img/signature/vincent-white.png","hash":"77edaf6be1d71052f6ce0f927a8a80e8606516f9","modified":1666661121363},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1666661120943},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/bglinecanvas.png","hash":"af3a93bd15e31ccf42600ad07309eb40ef22c455","modified":1666661120982},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1666661120946},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1666661120962},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/dark.png","hash":"0eefd914a47c1958e23f5fd9cb854e785763f03c","modified":1666661120985},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1666661120972},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/light.png","hash":"8a03996cff1eb0cbda41655e64d5c8fa5e0e9592","modified":1666661120999},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/ribbon.png","hash":"4616c287d0ed2d1fa70f6ddc300f048b53885b19","modified":1666661121009},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1666661121012},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1666661121015},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","hash":"1736202a7b463e778c0032bb0a07866eff4a996d","modified":1666661120976},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","hash":"c933776e89f9f821ee6dfc1622401ec9ce5c9e35","modified":1666661120979},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1666661120965},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1666661120969},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/livemylife-desktop.png","hash":"45fc4bfd838997c93db72ab389c1c52b18a2d506","modified":1666661121003},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/mouseclick.png","hash":"b61ec23b376c825f9cc5846424cea16fc4b686c0","modified":1666661121006},{"_id":"themes/livemylife/source/js/comment/gitalk_.js","hash":"9e326313656b821751f486e31be8418e1578668a","modified":1666661121389},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"4ae45a4e2ee0769a337b65f8bd1d859bd9d3294b","modified":1666661121386},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1666661120953},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1666661120959},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/langen.png","hash":"1cb3817cd4886acf49c476871f004b17f13d5126","modified":1666661120996},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/langcn.png","hash":"f7816d868d1d5a5711718bb04fe7e6fe68c6cced","modified":1666661120991},{"_id":"source/img/header_img/newhome_bg.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1666661121325},{"_id":"source/img/header_img/categories_bg.jpg","hash":"2acefcb91238d3d17bea6c53881fb8c025ebe370","modified":1666661121204},{"_id":"source/img/header_img/lml_bg.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1666661121247},{"_id":"source/img/header_img/archive_bg3.jpg","hash":"761cc75f3871af0da9b378eb7911fd229e51f692","modified":1666661121181},{"_id":"source/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1666661121048},{"_id":"source/img/header_img/lml_bg8.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1666661121307},{"_id":"source/img/header_img/archive_bg.jpg","hash":"e2b6831e4cdbb323c5d680ef053e414926119bec","modified":1666661121110},{"_id":"source/img/header_img/tag_bg.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1666661121356},{"_id":"source/img/header_img/archive_bg2.jpg","hash":"ecc208724bde2e07787a9b83191f6e1c755c1422","modified":1666661121154},{"_id":"source/_posts/各种继承详解与差异.md","hash":"001a1f4118ef69f78271226b293691030cf5dc5a","modified":1667356226303},{"_id":"source/_posts/对象模式设计-各种继承详解与差异.md","hash":"07234d03d61e9bae222d98746189fdc7d7807ed0","modified":1667790341658},{"_id":"source/_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect.md","hash":"6b6c87695f84cc78c003041add7f0c64da848219","modified":1667800917595},{"_id":"source/_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect/image2.png","hash":"95dd964019cc2fd89775cf2cda8f9185f1d42e15","modified":1667800199832},{"_id":"source/_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect/image.png","hash":"c0cc5d218ffd85b548bd1d3e53face90b8c2ac44","modified":1667800167682}],"Category":[{"name":"Linux","_id":"cl9p2f06z0003a8uuhfjfbzq0"},{"name":"javascript","_id":"cl9p2f075000ha8uu18lvddn6"},{"name":"Blog","_id":"cl9p2f075000ja8uu9dsxbt1v"},{"name":"Hexo-Theme-LiveMyLife","_id":"cl9p2f079000va8uu95ara78c"},{"name":"对象","parent":"cl9p2f075000ha8uu18lvddn6","_id":"cla678n9l0002yguufkuk1lu7"},{"name":"js对象","parent":"cl9p2f075000ha8uu18lvddn6","_id":"cla678n9r000cyguu1t1o4r79"}],"Data":[{"_id":"friends","data":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}]},{"_id":"musics","data":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}],"Page":[{"layout":"404","description":"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"I'm sorry there is nothing that you want , but you can enjoy the scenery here ...\"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2022-10-25T01:25:20.939Z","updated":"2022-10-25T01:25:20.939Z","path":"404.html","title":"","comments":1,"_id":"cl9p2f06v0000a8uua8h98be9","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"那些年吹过的牛逼，还有很多没有实现 ......","header-img":"img/scenery/about_bg.jpg","_content":"\n## Talk To Me\n\n> I always say to myself :\n>\n> if my life is peaceful and plain sailing all the time ,\n>\n> it means to die in the electrocardiogram …\n\n\n\n## Just Me\n\n<img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img>\n\n> 有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；\n>\n> 有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；\n>\n> 有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；\n>\n> 有一种态度 叫纹身 其实我们只是想与众不同；\n>\n> 有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；\n>\n> 有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；\n>\n> 有一种悠闲 叫 \" 老板给我杯Cappuccino \" 香香甜甜 浓郁中带着苦涩 醇和而隽永 …\n\n\n\n## The Longest Way ...\n\n<img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img>\n\n>  活在当下 然后忘记 继续往前走 ...\n>\n>  即便是一个人 ...\n>\n>  On the way to meet myself …\n\n\n## Follow With Interest Blogs\n\n> Neo Peng：https://zhile.io\n>\n> 李卫民：https://www.funtl.com/zh/guide\n>\n> duanxz：https://www.cnblogs.com/duanxz/tag\n>\n> Java1234_小锋：http://blog.java1234.com/index.html\n>\n> Deserts：https://deserts.io\n>\n> Super Snail：https://www.dusign.net\n>\n> KIERAN'S BLOG：https://go.kieran.top\n>\n> Mr.Seven：https://itimetraveler.github.io\n\n## Contact me\n\n> Email：601521821@qq.com\n\n## Treat me to coffee\n>  If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee...\n\n<img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img>\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"那些年吹过的牛逼，还有很多没有实现 ......\"\nheader-img: \"img/scenery/about_bg.jpg\"\n---\n\n## Talk To Me\n\n> I always say to myself :\n>\n> if my life is peaceful and plain sailing all the time ,\n>\n> it means to die in the electrocardiogram …\n\n\n\n## Just Me\n\n<img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img>\n\n> 有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；\n>\n> 有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；\n>\n> 有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；\n>\n> 有一种态度 叫纹身 其实我们只是想与众不同；\n>\n> 有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；\n>\n> 有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；\n>\n> 有一种悠闲 叫 \" 老板给我杯Cappuccino \" 香香甜甜 浓郁中带着苦涩 醇和而隽永 …\n\n\n\n## The Longest Way ...\n\n<img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img>\n\n>  活在当下 然后忘记 继续往前走 ...\n>\n>  即便是一个人 ...\n>\n>  On the way to meet myself …\n\n\n## Follow With Interest Blogs\n\n> Neo Peng：https://zhile.io\n>\n> 李卫民：https://www.funtl.com/zh/guide\n>\n> duanxz：https://www.cnblogs.com/duanxz/tag\n>\n> Java1234_小锋：http://blog.java1234.com/index.html\n>\n> Deserts：https://deserts.io\n>\n> Super Snail：https://www.dusign.net\n>\n> KIERAN'S BLOG：https://go.kieran.top\n>\n> Mr.Seven：https://itimetraveler.github.io\n\n## Contact me\n\n> Email：601521821@qq.com\n\n## Treat me to coffee\n>  If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee...\n\n<img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img>\n","updated":"2016-04-20T20:48:33.000Z","path":"about/index.html","comments":1,"_id":"cl9p2f06y0002a8uu17ftfaxu","content":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<blockquote>\n<p>I always say to myself :</p>\n<p>if my life is peaceful and plain sailing all the time ,</p>\n<p>it means to die in the electrocardiogram …</p>\n</blockquote>\n<h2 id=\"Just-Me\">Just Me</h2>\n<p><img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img></p>\n<blockquote>\n<p>有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；</p>\n<p>有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；</p>\n<p>有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；</p>\n<p>有一种态度 叫纹身 其实我们只是想与众不同；</p>\n<p>有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；</p>\n<p>有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；</p>\n<p>有一种悠闲 叫 &quot; 老板给我杯Cappuccino &quot; 香香甜甜 浓郁中带着苦涩 醇和而隽永 …</p>\n</blockquote>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<p><img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img></p>\n<blockquote>\n<p>活在当下 然后忘记 继续往前走 …</p>\n<p>即便是一个人 …</p>\n<p>On the way to meet myself …</p>\n</blockquote>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<blockquote>\n<p>Neo Peng：<a href=\"https://zhile.io\">https://zhile.io</a></p>\n<p>李卫民：<a href=\"https://www.funtl.com/zh/guide\">https://www.funtl.com/zh/guide</a></p>\n<p>duanxz：<a href=\"https://www.cnblogs.com/duanxz/tag\">https://www.cnblogs.com/duanxz/tag</a></p>\n<p>Java1234_小锋：<a href=\"http://blog.java1234.com/index.html\">http://blog.java1234.com/index.html</a></p>\n<p>Deserts：<a href=\"https://deserts.io\">https://deserts.io</a></p>\n<p>Super Snail：<a href=\"https://www.dusign.net\">https://www.dusign.net</a></p>\n<p>KIERAN’S BLOG：<a href=\"https://go.kieran.top\">https://go.kieran.top</a></p>\n<p>Mr.Seven：<a href=\"https://itimetraveler.github.io\">https://itimetraveler.github.io</a></p>\n</blockquote>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：601521821@qq.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n<blockquote>\n<p>If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee…</p>\n</blockquote>\n<p><img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img></p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h2 id=\"Talk-To-Me\">Talk To Me</h2>\n<blockquote>\n<p>I always say to myself :</p>\n<p>if my life is peaceful and plain sailing all the time ,</p>\n<p>it means to die in the electrocardiogram …</p>\n</blockquote>\n<h2 id=\"Just-Me\">Just Me</h2>\n<p><img src=\"/img/scenery/about_bg2.jpg\" width=\"350\" alt=\"about_bg2\"></img></p>\n<blockquote>\n<p>有一种状态 叫一个人 它总是挑战语言的贫乏 只能在某首歌中找寻灵感；</p>\n<p>有一种氨基酸 叫多巴胺 你不知道它何时会在你体内产生；</p>\n<p>有一种上瘾 叫抽烟 其实你抽的只是心情 又或是寂寞；</p>\n<p>有一种态度 叫纹身 其实我们只是想与众不同；</p>\n<p>有一种经历 叫旅行 年轻只有一次 不出去走走 或许以为眼前的就是世界；</p>\n<p>有一种人生 叫心电图 如果你总是一帆风顺 那么你就挂了；</p>\n<p>有一种悠闲 叫 &quot; 老板给我杯Cappuccino &quot; 香香甜甜 浓郁中带着苦涩 醇和而隽永 …</p>\n</blockquote>\n<h2 id=\"The-Longest-Way-…\">The Longest Way …</h2>\n<p><img src=\"/img/scenery/about_bg4.jpg\" width=\"350\" alt=\"about_bg4\"></img></p>\n<blockquote>\n<p>活在当下 然后忘记 继续往前走 …</p>\n<p>即便是一个人 …</p>\n<p>On the way to meet myself …</p>\n</blockquote>\n<h2 id=\"Follow-With-Interest-Blogs\">Follow With Interest Blogs</h2>\n<blockquote>\n<p>Neo Peng：<a href=\"https://zhile.io\">https://zhile.io</a></p>\n<p>李卫民：<a href=\"https://www.funtl.com/zh/guide\">https://www.funtl.com/zh/guide</a></p>\n<p>duanxz：<a href=\"https://www.cnblogs.com/duanxz/tag\">https://www.cnblogs.com/duanxz/tag</a></p>\n<p>Java1234_小锋：<a href=\"http://blog.java1234.com/index.html\">http://blog.java1234.com/index.html</a></p>\n<p>Deserts：<a href=\"https://deserts.io\">https://deserts.io</a></p>\n<p>Super Snail：<a href=\"https://www.dusign.net\">https://www.dusign.net</a></p>\n<p>KIERAN’S BLOG：<a href=\"https://go.kieran.top\">https://go.kieran.top</a></p>\n<p>Mr.Seven：<a href=\"https://itimetraveler.github.io\">https://itimetraveler.github.io</a></p>\n</blockquote>\n<h2 id=\"Contact-me\">Contact me</h2>\n<blockquote>\n<p>Email：601521821@qq.com</p>\n</blockquote>\n<h2 id=\"Treat-me-to-coffee\">Treat me to coffee</h2>\n<blockquote>\n<p>If you feel that what I have written is of some value to you, I am glad that you are willing to invite me to drink coffee…</p>\n</blockquote>\n<p><img src=\"/img/scenery/treat_me_to_coffee.png\" width=\"350\" alt=\"treat_me_to_coffee.png\"></img></p>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive_bg.jpg","date":"2017-03-20T12:49:56.000Z","description":"Don't rush and never settle...... If it's meant to be, it will be......","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive_bg.jpg\"\ndate: 2017-03-20 20:49:56\ndescription: \"Don't rush and never settle...... If it's meant to be, it will be......\"\n---\n","updated":"2017-03-20T12:49:56.000Z","path":"archive/index.html","comments":1,"_id":"cl9p2f0700005a8uud0hx5i9t","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"layout":"categories","title":"Categories","description":"Hi , here is Categories ....","header-img":"img/header_img/categories_bg.jpg","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\ndescription: \"Hi , here is Categories ....\"\nheader-img: \"img/header_img/categories_bg.jpg\"\n---\n","date":"2022-10-25T01:25:21.016Z","updated":"2022-10-25T01:25:21.016Z","path":"categories/index.html","comments":1,"_id":"cl9p2f0710009a8uuejkmh2sp","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"I don’t know where I am going, but I am on my way......","header-img":"img/header_img/tag_bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"I don’t know where I am going, but I am on my way......\"\nheader-img: \"img/header_img/tag_bg.jpg\"\n---\n","date":"2022-10-25T01:25:21.364Z","updated":"2022-10-25T01:25:21.364Z","path":"tags/index.html","comments":1,"_id":"cl9p2f072000ca8uug5c978ju","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"VMware 安装 CentOS 8.1 完整教程 ","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-03-05T10:29:16.000Z","password":null,"summary":"这篇文章详细的记录我安装CentOS 8.1的过程，其他CentOS 8系列的发行版本安装可作参考。","_content":"\n我使用的<font color=red size=3>VMware</font>版本：<font color=red size=3>VMware 15 Pro</font>\n\n镜像：<font color=red size=3>CentOS 8.1</font>\n\n**电脑配置需求：**\n\n- <font color=red size=3>2 GB</font> 及以上的<font color=red size=3>RAM</font>（官方推荐至少<font color=red size=3>4G</font>）\n- <font color=red size=3>2 GHz </font>或以上的 <font color=red size=3>CPU</font>\n- <font color=red size=3>64 </font>位 <font color=red size=3>x86</font> 架构\n- <font color=red size=3>20 GB </font>及以上硬盘空间\n\n**关于CentOS 8.1**\n\n- 基于Linux 4.18\n- 提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4\n- 使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本\n通过 BaseOS 和应用流(AppStream)仓库发布.\n- AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本\n- YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成\n- RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.\n\n> 内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.\n\n<font color=red size=3>CentOS 8</font>系列增加了许多新特性，<font color=red size=3>CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：\n\n[CentOS 官网文档手册](https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-)\n\n[Centos8与Centos7区别参照redhat）](https://www.cnblogs.com/RXDXB/p/11660287.html)\n# 一、准备过程 #\n\n目前比较流行的两款虚拟机软件 <font color=red size=3>VMware</font> 、<font color=red size=3>VirtualBox</font>，<font color=red size=3>VirtualBox</font>安装<font color=red size=3>CentOS 8</font>系列目前还有很多<font color=red size=3>Bug</font>，推荐使用<font color=red size=3>VMware</font>。\n\n1.安装<font color=red size=3>VMware</font>\n\n如果你还没有安装虚拟机，进入[VMware官网](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html \"VMware\")下载相应版本安装即可：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png)\n\n官网下载过程可能有点慢，这里安装过程我就不赘述了。\n\n2.下载<font color=red size=3>CentOS 8.1</font>镜像资源\n\n进入[CentOS官网](http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso \"CentOS\")下载<font color=red size=3>CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。\n\n\n# 二、创建虚拟机 #\n\n1.打开<font color=red size=3>VMware</font>，点击创建新的虚拟机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png)\n\n2.点击自定义（高级）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png)\n\n3.这一步直接默认就可以：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png)\n\n4.选择稍后安装操作系统：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png)\n\n5.选择<font color=red size=3>Linux</font>，版本选择<font color=red size=3>Linux 4 ×64位</font>，因为<font color=red size=3>CentOS 8</font>系列基于<font color=red size=3> Linux</font> 内核<font color=red size=3> 4.18</font>：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png)\n\n6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color=red size=3>D</font>盘：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png)\n\n7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png)\n\n8.内存大小根据自己电脑适当配置，我的电脑内存<font color=red size=3>16G</font>，所以我给它分配<font color=red size=3>4G</font>，要安装图形界面的话可以填大一点：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png)\n\n9.设置虚拟机网络连接模式（<font color=red size=3>NAT</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png)\n\n**关于网络连接模式说明：**\n\n- 桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。\n\n- NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。\n\n- 仅主机：虚拟机与宿主机直接连起来\n\n10.选择<font color=red size=3>I/O</font>控制器类型，然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png)\n\n11.选择磁盘类型：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png)\n\n12.选择创建新虚拟磁盘，然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png)\n\n13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png)\n\n14.根据自己需要指定磁盘文件存储位置，我放在D盘：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png)\n\n15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png)\n\n# 三、安装CentOS 8.1 #\n1.点击编辑虚拟机设置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png)\n\n2.选择<font color=red size=3>CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png)\n\n3.开启此虚拟机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png)\n\n4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color=red size=3>CentOS 8</font>，回车，系统开始自动安装\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png)\n\n5.安装完成后选择语言，根据自己情况选择，然后点击继续：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png)\n\n6.首先打开网络和主机名，给虚拟机连上网络：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png)\n\n**如果网络连接不上，多半是<font color=red size=3>DHCP</font>问题，解决办法：**\n\n[解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题](https://blog.csdn.net/suoyudong/article/details/83037670) (By 索渝东)\n\n7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png)\n\n8.选择安装目的地：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png)\n\n9.选择自定义配置，点击完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png)\n\n10.添加磁盘分区\n\n<font color=red size=3>Linux</font>的分区，并不像<font color=red size=3>Windows</font>一样，分成<font color=red size=3>C、D、E</font>等盘，介绍几个重要的分区：\n\n- 交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。\n- 启动分区（boot）：200MB足够了。\n- 根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。\n\n按照下图顺序依次进行设置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png)\n\n11.点击完成后会弹出更改摘要页面，点击接受更改：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png)\n\n12.点击开始安装：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png)\n\n13.设置<font color=red size=3>ROOT</font>密码：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png)\n\n14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png)\n\n15.安装完成后点击重启电脑：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png)\n\n16.重启完成后点击<font color=red size=3>LICENS INFORMATION</font>,勾选同意许可，然后点击完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png)\n\n17.点击结束配置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png)\n\n18.来到登录界面，点击未列出，以<font color=red size=3>root</font>登录，方便后面配置操作：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png)\n\n19.选择语言：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png)\n\n选择键盘布局：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png)\n\n是否打开位置服务：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png)\n\n然后按照需要添加账号，然后就可以进入啦：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png)\n\n20.关闭系统使用帮助后，来到我们的<font color=red size=3>centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png)\n\n21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png)\n\n22.右上角有关机按钮，点击就可以关机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png)\n\n到这里，我们的<font color=red size=3>CentOS 8 Linux</font> 就算安装完成了，其他<font color=red size=3>CentOS 8 </font>系列发行版本安装过程类似，可作参考。\n\n","source":"_posts/VMware-安装-CentOS-8-1-完整教程.md","raw":"---\ntitle: 'VMware 安装 CentOS 8.1 完整教程 '\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-05 18:29:16\npassword:\nsummary: 这篇文章详细的记录我安装CentOS 8.1的过程，其他CentOS 8系列的发行版本安装可作参考。\ntags:\n- VMware\n- CentOS\ncategories:\n- Linux\n---\n\n我使用的<font color=red size=3>VMware</font>版本：<font color=red size=3>VMware 15 Pro</font>\n\n镜像：<font color=red size=3>CentOS 8.1</font>\n\n**电脑配置需求：**\n\n- <font color=red size=3>2 GB</font> 及以上的<font color=red size=3>RAM</font>（官方推荐至少<font color=red size=3>4G</font>）\n- <font color=red size=3>2 GHz </font>或以上的 <font color=red size=3>CPU</font>\n- <font color=red size=3>64 </font>位 <font color=red size=3>x86</font> 架构\n- <font color=red size=3>20 GB </font>及以上硬盘空间\n\n**关于CentOS 8.1**\n\n- 基于Linux 4.18\n- 提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4\n- 使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本\n通过 BaseOS 和应用流(AppStream)仓库发布.\n- AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本\n- YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成\n- RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.\n\n> 内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.\n\n<font color=red size=3>CentOS 8</font>系列增加了许多新特性，<font color=red size=3>CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：\n\n[CentOS 官网文档手册](https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-)\n\n[Centos8与Centos7区别参照redhat）](https://www.cnblogs.com/RXDXB/p/11660287.html)\n# 一、准备过程 #\n\n目前比较流行的两款虚拟机软件 <font color=red size=3>VMware</font> 、<font color=red size=3>VirtualBox</font>，<font color=red size=3>VirtualBox</font>安装<font color=red size=3>CentOS 8</font>系列目前还有很多<font color=red size=3>Bug</font>，推荐使用<font color=red size=3>VMware</font>。\n\n1.安装<font color=red size=3>VMware</font>\n\n如果你还没有安装虚拟机，进入[VMware官网](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html \"VMware\")下载相应版本安装即可：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png)\n\n官网下载过程可能有点慢，这里安装过程我就不赘述了。\n\n2.下载<font color=red size=3>CentOS 8.1</font>镜像资源\n\n进入[CentOS官网](http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso \"CentOS\")下载<font color=red size=3>CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。\n\n\n# 二、创建虚拟机 #\n\n1.打开<font color=red size=3>VMware</font>，点击创建新的虚拟机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png)\n\n2.点击自定义（高级）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png)\n\n3.这一步直接默认就可以：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png)\n\n4.选择稍后安装操作系统：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png)\n\n5.选择<font color=red size=3>Linux</font>，版本选择<font color=red size=3>Linux 4 ×64位</font>，因为<font color=red size=3>CentOS 8</font>系列基于<font color=red size=3> Linux</font> 内核<font color=red size=3> 4.18</font>：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png)\n\n6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color=red size=3>D</font>盘：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png)\n\n7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png)\n\n8.内存大小根据自己电脑适当配置，我的电脑内存<font color=red size=3>16G</font>，所以我给它分配<font color=red size=3>4G</font>，要安装图形界面的话可以填大一点：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png)\n\n9.设置虚拟机网络连接模式（<font color=red size=3>NAT</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png)\n\n**关于网络连接模式说明：**\n\n- 桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。\n\n- NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。\n\n- 仅主机：虚拟机与宿主机直接连起来\n\n10.选择<font color=red size=3>I/O</font>控制器类型，然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png)\n\n11.选择磁盘类型：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png)\n\n12.选择创建新虚拟磁盘，然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png)\n\n13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png)\n\n14.根据自己需要指定磁盘文件存储位置，我放在D盘：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png)\n\n15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png)\n\n# 三、安装CentOS 8.1 #\n1.点击编辑虚拟机设置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png)\n\n2.选择<font color=red size=3>CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png)\n\n3.开启此虚拟机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png)\n\n4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color=red size=3>CentOS 8</font>，回车，系统开始自动安装\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png)\n\n5.安装完成后选择语言，根据自己情况选择，然后点击继续：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png)\n\n6.首先打开网络和主机名，给虚拟机连上网络：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png)\n\n**如果网络连接不上，多半是<font color=red size=3>DHCP</font>问题，解决办法：**\n\n[解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题](https://blog.csdn.net/suoyudong/article/details/83037670) (By 索渝东)\n\n7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png)\n\n8.选择安装目的地：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png)\n\n9.选择自定义配置，点击完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png)\n\n10.添加磁盘分区\n\n<font color=red size=3>Linux</font>的分区，并不像<font color=red size=3>Windows</font>一样，分成<font color=red size=3>C、D、E</font>等盘，介绍几个重要的分区：\n\n- 交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。\n- 启动分区（boot）：200MB足够了。\n- 根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。\n\n按照下图顺序依次进行设置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png)\n\n11.点击完成后会弹出更改摘要页面，点击接受更改：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png)\n\n12.点击开始安装：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png)\n\n13.设置<font color=red size=3>ROOT</font>密码：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png)\n\n14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png)\n\n15.安装完成后点击重启电脑：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png)\n\n16.重启完成后点击<font color=red size=3>LICENS INFORMATION</font>,勾选同意许可，然后点击完成：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png)\n\n17.点击结束配置：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png)\n\n18.来到登录界面，点击未列出，以<font color=red size=3>root</font>登录，方便后面配置操作：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png)\n\n19.选择语言：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png)\n\n选择键盘布局：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png)\n\n是否打开位置服务：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png)\n\n然后按照需要添加账号，然后就可以进入啦：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png)\n\n20.关闭系统使用帮助后，来到我们的<font color=red size=3>centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png)\n\n21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png)\n\n22.右上角有关机按钮，点击就可以关机：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png)\n\n到这里，我们的<font color=red size=3>CentOS 8 Linux</font> 就算安装完成了，其他<font color=red size=3>CentOS 8 </font>系列发行版本安装过程类似，可作参考。\n\n","slug":"VMware-安装-CentOS-8-1-完整教程","published":1,"updated":"2020-03-05T10:29:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9p2f06w0001a8uudrh2hn83","content":"<p>我使用的<font color=red size=3>VMware</font>版本：<font color=red size=3>VMware 15 Pro</font></p>\n<p>镜像：<font color=red size=3>CentOS 8.1</font></p>\n<p><strong>电脑配置需求：</strong></p>\n<ul>\n<li><font color=red size=3>2 GB</font> 及以上的<font color=red size=3>RAM</font>（官方推荐至少<font color=red size=3>4G</font>）</li>\n<li><font color=red size=3>2 GHz </font>或以上的 <font color=red size=3>CPU</font></li>\n<li><font color=red size=3>64 </font>位 <font color=red size=3>x86</font> 架构</li>\n<li><font color=red size=3>20 GB </font>及以上硬盘空间</li>\n</ul>\n<p><strong>关于CentOS 8.1</strong></p>\n<ul>\n<li>基于Linux 4.18</li>\n<li>提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4</li>\n<li>使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本<br>\n通过 BaseOS 和应用流(AppStream)仓库发布.</li>\n<li>AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本</li>\n<li>YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成</li>\n<li>RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.</li>\n</ul>\n<blockquote>\n<p>内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.</p>\n</blockquote>\n<p><font color=red size=3>CentOS 8</font>系列增加了许多新特性，<font color=red size=3>CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：</p>\n<p><a href=\"https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-\">CentOS 官网文档手册</a></p>\n<p><a href=\"https://www.cnblogs.com/RXDXB/p/11660287.html\">Centos8与Centos7区别参照redhat）</a></p>\n<h1>一、准备过程</h1>\n<p>目前比较流行的两款虚拟机软件 <font color=red size=3>VMware</font> 、<font color=red size=3>VirtualBox</font>，<font color=red size=3>VirtualBox</font>安装<font color=red size=3>CentOS 8</font>系列目前还有很多<font color=red size=3>Bug</font>，推荐使用<font color=red size=3>VMware</font>。</p>\n<p>1.安装<font color=red size=3>VMware</font></p>\n<p>如果你还没有安装虚拟机，进入<a href=\"https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html\" title=\"VMware\">VMware官网</a>下载相应版本安装即可：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png\" alt=\"\"></p>\n<p>官网下载过程可能有点慢，这里安装过程我就不赘述了。</p>\n<p>2.下载<font color=red size=3>CentOS 8.1</font>镜像资源</p>\n<p>进入<a href=\"http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso\" title=\"CentOS\">CentOS官网</a>下载<font color=red size=3>CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。</p>\n<h1>二、创建虚拟机</h1>\n<p>1.打开<font color=red size=3>VMware</font>，点击创建新的虚拟机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png\" alt=\"\"></p>\n<p>2.点击自定义（高级）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png\" alt=\"\"></p>\n<p>3.这一步直接默认就可以：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png\" alt=\"\"></p>\n<p>4.选择稍后安装操作系统：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png\" alt=\"\"></p>\n<p>5.选择<font color=red size=3>Linux</font>，版本选择<font color=red size=3>Linux 4 ×64位</font>，因为<font color=red size=3>CentOS 8</font>系列基于<font color=red size=3> Linux</font> 内核<font color=red size=3> 4.18</font>：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png\" alt=\"\"></p>\n<p>6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color=red size=3>D</font>盘：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png\" alt=\"\"></p>\n<p>7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png\" alt=\"\"></p>\n<p>8.内存大小根据自己电脑适当配置，我的电脑内存<font color=red size=3>16G</font>，所以我给它分配<font color=red size=3>4G</font>，要安装图形界面的话可以填大一点：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png\" alt=\"\"></p>\n<p>9.设置虚拟机网络连接模式（<font color=red size=3>NAT</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png\" alt=\"\"></p>\n<p><strong>关于网络连接模式说明：</strong></p>\n<ul>\n<li>\n<p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p>\n</li>\n<li>\n<p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p>\n</li>\n<li>\n<p>仅主机：虚拟机与宿主机直接连起来</p>\n</li>\n</ul>\n<p>10.选择<font color=red size=3>I/O</font>控制器类型，然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png\" alt=\"\"></p>\n<p>11.选择磁盘类型：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png\" alt=\"\"></p>\n<p>12.选择创建新虚拟磁盘，然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png\" alt=\"\"></p>\n<p>13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png\" alt=\"\"></p>\n<p>14.根据自己需要指定磁盘文件存储位置，我放在D盘：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png\" alt=\"\"></p>\n<p>15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png\" alt=\"\"></p>\n<h1>三、安装CentOS 8.1</h1>\n<p>1.点击编辑虚拟机设置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png\" alt=\"\"></p>\n<p>2.选择<font color=red size=3>CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png\" alt=\"\"></p>\n<p>3.开启此虚拟机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png\" alt=\"\"></p>\n<p>4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color=red size=3>CentOS 8</font>，回车，系统开始自动安装</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png\" alt=\"\"></p>\n<p>5.安装完成后选择语言，根据自己情况选择，然后点击继续：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png\" alt=\"\"></p>\n<p>6.首先打开网络和主机名，给虚拟机连上网络：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png\" alt=\"\"></p>\n<p><strong>如果网络连接不上，多半是<font color=red size=3>DHCP</font>问题，解决办法：</strong></p>\n<p><a href=\"https://blog.csdn.net/suoyudong/article/details/83037670\">解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题</a> (By 索渝东)</p>\n<p>7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png\" alt=\"\"></p>\n<p>8.选择安装目的地：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png\" alt=\"\"></p>\n<p>9.选择自定义配置，点击完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png\" alt=\"\"></p>\n<p>10.添加磁盘分区</p>\n<p><font color=red size=3>Linux</font>的分区，并不像<font color=red size=3>Windows</font>一样，分成<font color=red size=3>C、D、E</font>等盘，介绍几个重要的分区：</p>\n<ul>\n<li>交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。</li>\n<li>启动分区（boot）：200MB足够了。</li>\n<li>根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。</li>\n</ul>\n<p>按照下图顺序依次进行设置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png\" alt=\"\"></p>\n<p>11.点击完成后会弹出更改摘要页面，点击接受更改：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png\" alt=\"\"></p>\n<p>12.点击开始安装：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png\" alt=\"\"></p>\n<p>13.设置<font color=red size=3>ROOT</font>密码：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png\" alt=\"\"></p>\n<p>14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png\" alt=\"\"></p>\n<p>15.安装完成后点击重启电脑：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png\" alt=\"\"></p>\n<p>16.重启完成后点击<font color=red size=3>LICENS INFORMATION</font>,勾选同意许可，然后点击完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png\" alt=\"\"></p>\n<p>17.点击结束配置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png\" alt=\"\"></p>\n<p>18.来到登录界面，点击未列出，以<font color=red size=3>root</font>登录，方便后面配置操作：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png\" alt=\"\"></p>\n<p>19.选择语言：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png\" alt=\"\"></p>\n<p>选择键盘布局：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png\" alt=\"\"></p>\n<p>是否打开位置服务：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png\" alt=\"\"></p>\n<p>然后按照需要添加账号，然后就可以进入啦：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png\" alt=\"\"></p>\n<p>20.关闭系统使用帮助后，来到我们的<font color=red size=3>centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png\" alt=\"\"></p>\n<p>21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png\" alt=\"\"></p>\n<p>22.右上角有关机按钮，点击就可以关机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png\" alt=\"\"></p>\n<p>到这里，我们的<font color=red size=3>CentOS 8 Linux</font> 就算安装完成了，其他<font color=red size=3>CentOS 8 </font>系列发行版本安装过程类似，可作参考。</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p>我使用的<font color=red size=3>VMware</font>版本：<font color=red size=3>VMware 15 Pro</font></p>\n<p>镜像：<font color=red size=3>CentOS 8.1</font></p>\n<p><strong>电脑配置需求：</strong></p>\n<ul>\n<li><font color=red size=3>2 GB</font> 及以上的<font color=red size=3>RAM</font>（官方推荐至少<font color=red size=3>4G</font>）</li>\n<li><font color=red size=3>2 GHz </font>或以上的 <font color=red size=3>CPU</font></li>\n<li><font color=red size=3>64 </font>位 <font color=red size=3>x86</font> 架构</li>\n<li><font color=red size=3>20 GB </font>及以上硬盘空间</li>\n</ul>\n<p><strong>关于CentOS 8.1</strong></p>\n<ul>\n<li>基于Linux 4.18</li>\n<li>提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4</li>\n<li>使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本<br>\n通过 BaseOS 和应用流(AppStream)仓库发布.</li>\n<li>AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本</li>\n<li>YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成</li>\n<li>RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.</li>\n</ul>\n<blockquote>\n<p>内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.</p>\n</blockquote>\n<p><font color=red size=3>CentOS 8</font>系列增加了许多新特性，<font color=red size=3>CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：</p>\n<p><a href=\"https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-\">CentOS 官网文档手册</a></p>\n<p><a href=\"https://www.cnblogs.com/RXDXB/p/11660287.html\">Centos8与Centos7区别参照redhat）</a></p>\n<h1>一、准备过程</h1>\n<p>目前比较流行的两款虚拟机软件 <font color=red size=3>VMware</font> 、<font color=red size=3>VirtualBox</font>，<font color=red size=3>VirtualBox</font>安装<font color=red size=3>CentOS 8</font>系列目前还有很多<font color=red size=3>Bug</font>，推荐使用<font color=red size=3>VMware</font>。</p>\n<p>1.安装<font color=red size=3>VMware</font></p>\n<p>如果你还没有安装虚拟机，进入<a href=\"https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html\" title=\"VMware\">VMware官网</a>下载相应版本安装即可：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png\" alt=\"\"></p>\n<p>官网下载过程可能有点慢，这里安装过程我就不赘述了。</p>\n<p>2.下载<font color=red size=3>CentOS 8.1</font>镜像资源</p>\n<p>进入<a href=\"http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso\" title=\"CentOS\">CentOS官网</a>下载<font color=red size=3>CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。</p>\n<h1>二、创建虚拟机</h1>\n<p>1.打开<font color=red size=3>VMware</font>，点击创建新的虚拟机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png\" alt=\"\"></p>\n<p>2.点击自定义（高级）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png\" alt=\"\"></p>\n<p>3.这一步直接默认就可以：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png\" alt=\"\"></p>\n<p>4.选择稍后安装操作系统：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png\" alt=\"\"></p>\n<p>5.选择<font color=red size=3>Linux</font>，版本选择<font color=red size=3>Linux 4 ×64位</font>，因为<font color=red size=3>CentOS 8</font>系列基于<font color=red size=3> Linux</font> 内核<font color=red size=3> 4.18</font>：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png\" alt=\"\"></p>\n<p>6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color=red size=3>D</font>盘：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png\" alt=\"\"></p>\n<p>7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png\" alt=\"\"></p>\n<p>8.内存大小根据自己电脑适当配置，我的电脑内存<font color=red size=3>16G</font>，所以我给它分配<font color=red size=3>4G</font>，要安装图形界面的话可以填大一点：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png\" alt=\"\"></p>\n<p>9.设置虚拟机网络连接模式（<font color=red size=3>NAT</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png\" alt=\"\"></p>\n<p><strong>关于网络连接模式说明：</strong></p>\n<ul>\n<li>\n<p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p>\n</li>\n<li>\n<p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p>\n</li>\n<li>\n<p>仅主机：虚拟机与宿主机直接连起来</p>\n</li>\n</ul>\n<p>10.选择<font color=red size=3>I/O</font>控制器类型，然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png\" alt=\"\"></p>\n<p>11.选择磁盘类型：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png\" alt=\"\"></p>\n<p>12.选择创建新虚拟磁盘，然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png\" alt=\"\"></p>\n<p>13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png\" alt=\"\"></p>\n<p>14.根据自己需要指定磁盘文件存储位置，我放在D盘：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png\" alt=\"\"></p>\n<p>15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png\" alt=\"\"></p>\n<h1>三、安装CentOS 8.1</h1>\n<p>1.点击编辑虚拟机设置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png\" alt=\"\"></p>\n<p>2.选择<font color=red size=3>CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png\" alt=\"\"></p>\n<p>3.开启此虚拟机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png\" alt=\"\"></p>\n<p>4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color=red size=3>CentOS 8</font>，回车，系统开始自动安装</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png\" alt=\"\"></p>\n<p>5.安装完成后选择语言，根据自己情况选择，然后点击继续：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png\" alt=\"\"></p>\n<p>6.首先打开网络和主机名，给虚拟机连上网络：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png\" alt=\"\"></p>\n<p><strong>如果网络连接不上，多半是<font color=red size=3>DHCP</font>问题，解决办法：</strong></p>\n<p><a href=\"https://blog.csdn.net/suoyudong/article/details/83037670\">解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题</a> (By 索渝东)</p>\n<p>7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png\" alt=\"\"></p>\n<p>8.选择安装目的地：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png\" alt=\"\"></p>\n<p>9.选择自定义配置，点击完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png\" alt=\"\"></p>\n<p>10.添加磁盘分区</p>\n<p><font color=red size=3>Linux</font>的分区，并不像<font color=red size=3>Windows</font>一样，分成<font color=red size=3>C、D、E</font>等盘，介绍几个重要的分区：</p>\n<ul>\n<li>交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。</li>\n<li>启动分区（boot）：200MB足够了。</li>\n<li>根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。</li>\n</ul>\n<p>按照下图顺序依次进行设置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png\" alt=\"\"></p>\n<p>11.点击完成后会弹出更改摘要页面，点击接受更改：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png\" alt=\"\"></p>\n<p>12.点击开始安装：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png\" alt=\"\"></p>\n<p>13.设置<font color=red size=3>ROOT</font>密码：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png\" alt=\"\"></p>\n<p>14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png\" alt=\"\"></p>\n<p>15.安装完成后点击重启电脑：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png\" alt=\"\"></p>\n<p>16.重启完成后点击<font color=red size=3>LICENS INFORMATION</font>,勾选同意许可，然后点击完成：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png\" alt=\"\"></p>\n<p>17.点击结束配置：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png\" alt=\"\"></p>\n<p>18.来到登录界面，点击未列出，以<font color=red size=3>root</font>登录，方便后面配置操作：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png\" alt=\"\"></p>\n<p>19.选择语言：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png\" alt=\"\"></p>\n<p>选择键盘布局：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png\" alt=\"\"></p>\n<p>是否打开位置服务：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png\" alt=\"\"></p>\n<p>然后按照需要添加账号，然后就可以进入啦：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png\" alt=\"\"></p>\n<p>20.关闭系统使用帮助后，来到我们的<font color=red size=3>centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png\" alt=\"\"></p>\n<p>21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png\" alt=\"\"></p>\n<p>22.右上角有关机按钮，点击就可以关机：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png\" alt=\"\"></p>\n<p>到这里，我们的<font color=red size=3>CentOS 8 Linux</font> 就算安装完成了，其他<font color=red size=3>CentOS 8 </font>系列发行版本安装过程类似，可作参考。</p>\n"},{"title":"对象模式设计-各种对象模式详解与差异","catalog":true,"date":"2020-10-25T10:00:00.000Z","subtitle":"javascript权威指南第六章对象篇","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"\n\n# 各种对象模式详解与差异\n  **设计对象模式的意义**\n  所需要的实例对象通过构造函数获得私有属性、通过原型链获得共享的属性。\n\n  \n  *什么是好的方式？*\n  私有属性通过构造函数的方式获得（不考虑实例中自定义私有属性）且不需要重写，共\n  享属性通过原型链找到且不需要重复创建。\n\n> 资料：  [创建对象、对象继承的实用方式及理解](https://segmentfault.com/a/1190000004559437)\n\n #### 工厂模式\n```javascript\n // 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象\n   function createPerson(name, age) {\n        let Person = new Object();\n        Person.name = name;\n        Person.age = age;\n         return Person;\n      }\n      let person1 = createPerson(\"Lily\", 29);\n      let person2 = createPerson(\"Ming\", 28);\n      console.log(person1.name + person1.age);\n      console.log(person2.name + person2.age);\n```\n工厂模式解决了创建多个相似对象的问题。\n缺点：没有解决对象识别的问题（无法知道对象的类型）\n```javascript\n    console.log(person1 instanceof Object); //true\n    console.log(person1 instanceof createPerson); //false\n```\n<br/>\n\n #### 构造函数\n优点:可以将构造函数的实例表示为一种特定类型\n```javascript\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.sayName = function () {\n          console.log(this.name);\n        };\n      }\n      let person1 = new Person(\"Lily\", 29);\n      person1.sayName();\n```\n优点:可以将构造函数的实例表示为一种特定类型\n```javascript\n   console.log(person1 instanceof Object); //true\n   console.log(person1 instanceof Person); //true\n\n```\n\n构造函数的用法：\n构造函数与其他函数的区别**只是调用的方式不同**。\n   1.当做构造函数使用\n   \\***所有函数，只要调用的时候通过new操作符来调用，就可以作为构造函数。否则就是普通函数。**\n```javascript\n    let person1 = new Person(\"Lily\", 29);\n    person1.sayName();\n```\n\n   2.当做普通函数调用\n   \\***当在全局作用域中调用一个函数，this对象指向window。window对象下就会拥有调用的那个函数的所有属性与方法。**所以在这里window对象就会有sayName方法\n```javascript\n    Person(\"lulu\", 30);  \n    window.sayName(); //\"lulu\"   \n```\n\n   3.在另一个对象的作用域中调用\n```javascript\n     let o = new Object();  \n     Person.call(o, \"bobo\", 30);   \n     o.sayName();   \n\n```\nnew一个构造函数，如果构造函数没有返回值，会隐式的把this作为返回值\n<br/>\n##### **new一个构造函数的本质**\n\n**如果构造函数没有返回值，会先创建一个指向构造函数原型对象的空对象，this会作为一个默认的返回值，在js底层进行隐式转换的时候，空对象会作为执行环境,this将会作为传参**\n\n    **let person=new Person()        ==        new Person().apply(person,this)**\n    *有点类似于上面这种，个人理解不一定对*\n\n**从而生成一个拥有构造函数属性同时\\_\\_proto\\_\\_又指向了构造函数.prototype的新对象**\n```javascript\n function Person(name, age) {\n          this.name = name;\n          this.age = age;\n          this.sayName = function () {\n            console.log(this.name);\n          };\n        }\n        //第一步 先创建了一个指向Person.prototype的空对象\n        //第二步 构造函数没有Person，所以默认返回值为this\n        //第三部 js底层通过call或者是apply改变this的运行环境作用域（为新对象person）\n       //从而生成一个拥有构造函数属性又同时指向构造函数原型对象的新对象\n        let person = new Person(\"Lily\", 29);\n```\n\n**如果构造函数有返回值，返回的是对象（不包括null）和函数，则返回值为对象，否则返回的还是默认的this对象**\n\n```javascript\n    function F() {\n        this.a = 37;\n      }\n      let o = new F();\n      console.log(o.a); //37\n//********************************************\n      function F() {\n        this.a = 37;\n     //返回对象，则构造函数F的返回值为这个对象\n        return {\n          a: 38,\n        };\n      }\n      let o = new F();\n      console.log(o.a); //38\n//************************************************\n     function foo() {\n        this.b = 100;\n        return this.a;\n      }\n      //foo通过bind传入对象后,在执行对象下变量a有了值\n      let func = foo.bind({ a: 100 });\n      console.log(func()); //100\n      //构造函数foo有return值，所以return值是返回值 this.a等于undefined\n      //return undefined 等于foo还是返回了this作为返回值\n      console.log(new foo()); //foo {b:100}\n//************************************************\n//其他例子：\n   function fn() {\n        this.user = \"追梦子\";\n        return {};\n      }\n      var a = new fn();\n      console.log(a.user); //undefined\n//*********************************************\n    function fn() {\n        this.user = \"追梦子\";\n        return 1;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n//*********************************************\n   function fn() {\n        this.user = \"追梦子\";\n        return function () {};\n      }\n      var a = new fn();\n      console.log(a.user); //undefined\n\n//*********************************************\n   function fn() {\n        this.user = \"追梦子\";\n        return undefined;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n//*********************************************\n  function fn() {\n        this.user = \"追梦子\";\n        return null;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n\n```\n**构造函数缺点**：\n在构造函数中创建的每个方法都要在每个实例上重新创建一遍。不同实例上的同名函数是不相等的。\n```javascript\n     function Person(name) {\n        this.name = name;\n        this.sayName = function () {\n          console.log(this.name);\n        };\n      }\n      let person1 = new Person(\"BIBI\");\n      person1.sayName();\n      let person2 = new Person(\"CICI\");\n      person2.sayName();\n      person1.sayName== person2.sayName   //false\n    \n************************************\n      this.sayName = function () {\n          console.log(this.name);\n        };\n  //等价于\n  this.sayName = new Function(console.log(this.name));\n\n```\n 解决多次创造函数实例的办法：把函数定义转移到构造函数外部。\n```javascript\n      function Person(name) {\n        this.name = name;\n        this.sayName = sayName;\n      }\n      function sayName() {\n        console.log(this.name);\n      }\n\n      let person1 = new Person(\"BIBI\");\n      let person2 = new Person(\"CICI\");\n      console.log(person1.sayName == person2.sayName) //true\n```\n  但是一样有对象如果有多个方法就需要定义多个全局函数的弊端，没有封装性可言。\n<br/>\n#### **构造函数与工厂模式的区别**\n构造函数：\n1.没有显示的创建对象\n\n2.直接将属性和方法赋给了this对象\n\n3.没有return语句\n\n4.实例可以标识为一种特定的类型\n\n例如 let person1=new Person(); person1 instanceof Person //true\n<br/>\n#### **原型模式**\n\n每个函数都有一个prototype属性，（**Function与Object都是js自带函数，所有他们都有prototype**）prototype属性是一个指针，指向了函数的原型对象。**实例对象没有原型对象,Object是因为是js自带的函数所以才有原型对象。**\n\n可以对原型对象设定属性和方法，可以让对象实例进行共享。\n\n优势：对比构造函数来说不必在构造函数中定义对象的实例信息。既不会每次实例化对象都创建一个实例函数也不会为了避免创建多个实例函数而放在全局，从而失去了封装性。\n\n原型模式执行过程：\n```javascript\n     function Person(name) {\n        this.name = name;\n      }\n      Person.prototype.sayName = function () {\n        console.log(this.name);\n      };\n      let person1 = new Person(\"bibi\");\n      person1.sayName();\n    //解析器会解析两次,先搜索实例person1有没有sayName方法，\n    //没有的话就会去搜索原型对象上是不是有sayName方法。从而读取到原型对象上的方法\n\n```\n \n\n###### **1.理解原型对象**\n\n+ 每个函数拥有一个原型对象,函数通过prototype找到原型对象。\n\n+ 函数的实例对象通过隐式属性\\_\\_proto\\_\\_找到这个原型对象。\n\n+ 原型对象有一个默认属性constructor，指向函数\n```javascript\n     function Person() {}\n      let person1 = new Person();\n      //实例对象的__proto__指向原型对象\n      console.log(person1.__proto__ == Person.prototype);//true\n      //原型对象的默认属性constructor指向函数\n      console.log((Person.prototype.constructor == Person));//true\n      //原型对象通过__proto__指向Object的原型对象\n      console.log(Person.prototype.__proto__ == Object.prototype);//true\n      //但是函数不能指向Function的原型对象，因为Person的原型对象和Function的\n      //原型对象平行，同时指向Object的原型对象\n      console.log(Person.prototype.__proto__ == Function.prototype);//false\n      console.log(Function.prototype.__proto__ == Object.prototype);//true\n\n```\n \n\n###### **2.原型模式的搜寻方式**\n\n+ 解析器在寻找属性和方法的时候会优先寻找实例上的属性和方法，如果能找到则不会再去搜寻原型对象。\n```javascript\n     function Person() {}\n      Person.prototype.name = \"bibi\";\n\n      let person1 = new Person();\n      person1.name = \"Lily\";\n      console.log(person1.name);//实例person1上拥有属性name，则不再寻找原型对象\n\n      let person2 = new Person();\n      console.log(person2.name);//实例上无属性name，继续搜索原型对象\n```\n\n \n\n###### **3.判断一个属性存在于实例上还是存在于原型对象上**\n\n\"属性\" in Object ：用来判断 这个属性是否存在于对象上，无论是实例还是原型对象都为true\n\nObject hasOwnProperty(\"属性\"):用来判断属性是否在实例上，在实例上则为true\n\n结合两者:\n!object.hasOwnProperty(name) && name in object：判断是否在原型上\n```javascript\n      function Person(name) {\n        this.name = name;\n      }\n      Person.prototype.age = \"27\";\n\n      let person1 = new Person(\"bibi\");\n      function hasPrototypeProperty(object, name) {\n        return !object.hasOwnProperty(name) && name in object;\n      }\n      console.log(hasPrototypeProperty(person1, \"age\")); //true\n      console.log(hasPrototypeProperty(person1, \"name\")); //false\n\n```\n\n \n\n###### **4.获取原型对象上属性的方法**\n```javascript\n     function Person(name, sex) {\n        this.name = name;\n        this.sex = sex;\n      }\n      Person.prototype.age = \"27\";\n      Person.prototype.address = \"xx路xx街\";\n      let person1 = new Person(\"bibi\", \"female\");\n\n      //传入原型拿到所有原型上可枚举的属性\n      console.log(Object.keys(Person.prototype));//['age', 'address']\n\n      //getOwnPropertyNames可以拿到所有不可枚举加可枚举的属性\n      console.log(Object.getOwnPropertyNames(Person.prototype));\n      //['constructor', 'age', 'address']\n\n      //传入实例拿到所有实例上可枚举的属性\n      console.log(Object.keys(person1));//['name', 'sex']\n\n```\n\n \n\n###### **5.使用字面量方法定义原型对象**\n\n    使用字面量相当于创建了一个新的原型对象，会与原有的原型对象共存，但是要注意创建实例的位置与原型对象的关系。\n```javascript\n     function Person() {}\n      let person1 = new Person();\n      //现在有两个原型对象 原先的原型对象，只要一个默认属性constructor\n      console.log(Person.prototype); //constructor\n\n      //使用字面量相当于新建了一个原型对象\n      Person.prototype = {\n        //指定了新原型对象的构造函数指向，不指定就不会再指向构造函数Person了\n        constructor: Person,\n        name: \"cici\",\n        sayName() {\n          console.log(this.name);\n        },\n      };\n      let person2 = new Person();\n\n      //新创建的原型对象，三个默认属性:constructor、name、sayName\n      console.log(Person.prototype);\n      // 新创建的原型对象指定了constructor指向\n      console.log(Person.prototype.constructor == Person); //true\n\n      // person1的实例在新原型对象之前创建，所以person1.__proto__指向了原先的原型对象\n      person1.sayName(); //error\n      // person2的实例在新原型对象之后创建，所以person2.__proto__指向了新的原型对象\n      person2.sayName(); //cici\n\n```\n\n \n\n###### **6.原型模式的缺点**\n\n原型中的属性都是被共享的，所以实例中修改引用类型的值，同时也会修改掉原型对象中引用类型的值。\n```javascript\n      function ColorList() {}\n      ColorList.prototype.arr = [\"red\", \"yellow\"];\n      let searchColor1 = new ColorList();\n      searchColor1.arr.push(\"green\");\n      console.log(searchColor1.arr);//['red', 'yellow', 'green']\n\n      let searchColor2 = new ColorList();\n      console.log(searchColor2.arr);//['red', 'yellow', 'green']\n\n```\n\n <br/>\n\n##### **组合模式（构造函数模式+原型模式）**\n\n 构造模式用于定义实例属性\n\n 原型模式用于定义方法和共享属性（不能是引用类型的属性）\n\n 结果，每个实例都有一份实例属性的副本同时又共享着方法，最大限度的节省内存。另外这种混合模式还支持向构造函数传递参数\n```javascript\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.friends = [];\n      }\n      Person.prototype = {\n        constructor: Person,\n        sayPersonInfo() {\n          console.log(this.name + this.age + this.friends.join(\",     \"));\n     },\n    };\n      let person1 = new Person(\"Lily\", 29);\n      person1.friends.push(\"Tom\", \"Jerry\");\n      person1.sayPersonInfo(); //Lily29Tom,Jerry\n\n      let person2 = new Person(\"Mike\", 28);\n      person2.friends.push(\"Alice\", \"Marry\");\n      person2.sayPersonInfo(); //Mike28Alice,Marry\n\n```\n\n<br/>\n \n\n###### **动态原型**\n\n 1.把所有信息封装在了构造函数中。\n\n 2.通过在构造函数中初始化原型，保持了构造函数和原型的优点。\n\n 换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型\n\n注意：这段代码只会在初次调用构造函数中执行\n```javascript\n     function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        if (typeof this.sayName != \"function\") {\n          Person.prototype.sayName = function () {\n            console.log(this.name);\n          };\n        }\n      }\n      let person1 = new Person(\"Lily\", 29);\n      person1.sayName();\n\n```\n<br/>\n \n\n##### **寄生构造函数模式**\n\n    寄生模式使用new操作符去实例化对象，其余跟工厂模式一致。\n\n    寄生模式也不能识别对象类型，这点也与工厂模式一致。\n```javascript\n      function SpecialArray() {\n        let values = new Array();\n        values.push.apply(values, arguments);\n        values.toPiepdString = function () {\n          return this.join(\"|\");\n        };\n        return values;\n      }\n      let colors = SpecialArray(\"red\", \"blue\", \"green\");\n      console.log(colors.toPiepdString());//red|blue|green\n      console.log(colors instanceof SpecialArray); //false\n\n```\n\n \n\n 使用寄生构造函数的目的是希望扩展原生Array的一个方法toPipeMessage,为了不污染原生构造函数。相当于作者希望通过new去区分，**用寄生构造去定义扩展原生函数，用工厂模式去定义自定义函数。**\n\n\n> 资料  [js中寄生构造函数模式和工厂模式的区别](https://segmentfault.com/q/1010000004596650)\n\n<br/>\n\n##### **稳妥构造函数模式**\n    遵循类似寄生构造函数的模式。稳妥构造函数模式也不能识别对象类型。\n\n    稳妥对象适合在一些安全的环境中（这些环境禁止使用this或者new），或者在防止数据被其他应用程序改动时使用。\n```javascript\n      function Person(name, age) {\n        let o = new Object();\n        o.name = name;\n        o.age = age;\n        o.sayName = function () {\n       //第一点不同：创建对象的实例方法不引用this\n          console.log(name);\n        };\n        return o;\n      }\n      //第二点不同：不适用new操作符调用构造函数\n      let person1 = Person(\"Lily\", 29); \n      //person1是个稳妥的对象，除了方法其sayName方法外，\n      //没有别的办法可以访问person1里面的其他数据成员\n      person1.sayName();\n\n```\n\n ","source":"_posts/对象模式设计-各种对象模式详解与差异.md","raw":"---\ntitle: 对象模式设计-各种对象模式详解与差异\ncatalog: true\ndate: 2020-10-25 18:00\nsubtitle: javascript权威指南第六章对象篇\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n - js对象\ncategories:\n - javascript\n---\n\n\n# 各种对象模式详解与差异\n  **设计对象模式的意义**\n  所需要的实例对象通过构造函数获得私有属性、通过原型链获得共享的属性。\n\n  \n  *什么是好的方式？*\n  私有属性通过构造函数的方式获得（不考虑实例中自定义私有属性）且不需要重写，共\n  享属性通过原型链找到且不需要重复创建。\n\n> 资料：  [创建对象、对象继承的实用方式及理解](https://segmentfault.com/a/1190000004559437)\n\n #### 工厂模式\n```javascript\n // 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象\n   function createPerson(name, age) {\n        let Person = new Object();\n        Person.name = name;\n        Person.age = age;\n         return Person;\n      }\n      let person1 = createPerson(\"Lily\", 29);\n      let person2 = createPerson(\"Ming\", 28);\n      console.log(person1.name + person1.age);\n      console.log(person2.name + person2.age);\n```\n工厂模式解决了创建多个相似对象的问题。\n缺点：没有解决对象识别的问题（无法知道对象的类型）\n```javascript\n    console.log(person1 instanceof Object); //true\n    console.log(person1 instanceof createPerson); //false\n```\n<br/>\n\n #### 构造函数\n优点:可以将构造函数的实例表示为一种特定类型\n```javascript\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.sayName = function () {\n          console.log(this.name);\n        };\n      }\n      let person1 = new Person(\"Lily\", 29);\n      person1.sayName();\n```\n优点:可以将构造函数的实例表示为一种特定类型\n```javascript\n   console.log(person1 instanceof Object); //true\n   console.log(person1 instanceof Person); //true\n\n```\n\n构造函数的用法：\n构造函数与其他函数的区别**只是调用的方式不同**。\n   1.当做构造函数使用\n   \\***所有函数，只要调用的时候通过new操作符来调用，就可以作为构造函数。否则就是普通函数。**\n```javascript\n    let person1 = new Person(\"Lily\", 29);\n    person1.sayName();\n```\n\n   2.当做普通函数调用\n   \\***当在全局作用域中调用一个函数，this对象指向window。window对象下就会拥有调用的那个函数的所有属性与方法。**所以在这里window对象就会有sayName方法\n```javascript\n    Person(\"lulu\", 30);  \n    window.sayName(); //\"lulu\"   \n```\n\n   3.在另一个对象的作用域中调用\n```javascript\n     let o = new Object();  \n     Person.call(o, \"bobo\", 30);   \n     o.sayName();   \n\n```\nnew一个构造函数，如果构造函数没有返回值，会隐式的把this作为返回值\n<br/>\n##### **new一个构造函数的本质**\n\n**如果构造函数没有返回值，会先创建一个指向构造函数原型对象的空对象，this会作为一个默认的返回值，在js底层进行隐式转换的时候，空对象会作为执行环境,this将会作为传参**\n\n    **let person=new Person()        ==        new Person().apply(person,this)**\n    *有点类似于上面这种，个人理解不一定对*\n\n**从而生成一个拥有构造函数属性同时\\_\\_proto\\_\\_又指向了构造函数.prototype的新对象**\n```javascript\n function Person(name, age) {\n          this.name = name;\n          this.age = age;\n          this.sayName = function () {\n            console.log(this.name);\n          };\n        }\n        //第一步 先创建了一个指向Person.prototype的空对象\n        //第二步 构造函数没有Person，所以默认返回值为this\n        //第三部 js底层通过call或者是apply改变this的运行环境作用域（为新对象person）\n       //从而生成一个拥有构造函数属性又同时指向构造函数原型对象的新对象\n        let person = new Person(\"Lily\", 29);\n```\n\n**如果构造函数有返回值，返回的是对象（不包括null）和函数，则返回值为对象，否则返回的还是默认的this对象**\n\n```javascript\n    function F() {\n        this.a = 37;\n      }\n      let o = new F();\n      console.log(o.a); //37\n//********************************************\n      function F() {\n        this.a = 37;\n     //返回对象，则构造函数F的返回值为这个对象\n        return {\n          a: 38,\n        };\n      }\n      let o = new F();\n      console.log(o.a); //38\n//************************************************\n     function foo() {\n        this.b = 100;\n        return this.a;\n      }\n      //foo通过bind传入对象后,在执行对象下变量a有了值\n      let func = foo.bind({ a: 100 });\n      console.log(func()); //100\n      //构造函数foo有return值，所以return值是返回值 this.a等于undefined\n      //return undefined 等于foo还是返回了this作为返回值\n      console.log(new foo()); //foo {b:100}\n//************************************************\n//其他例子：\n   function fn() {\n        this.user = \"追梦子\";\n        return {};\n      }\n      var a = new fn();\n      console.log(a.user); //undefined\n//*********************************************\n    function fn() {\n        this.user = \"追梦子\";\n        return 1;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n//*********************************************\n   function fn() {\n        this.user = \"追梦子\";\n        return function () {};\n      }\n      var a = new fn();\n      console.log(a.user); //undefined\n\n//*********************************************\n   function fn() {\n        this.user = \"追梦子\";\n        return undefined;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n//*********************************************\n  function fn() {\n        this.user = \"追梦子\";\n        return null;\n      }\n      var a = new fn();\n      console.log(a.user); //追梦子\n\n```\n**构造函数缺点**：\n在构造函数中创建的每个方法都要在每个实例上重新创建一遍。不同实例上的同名函数是不相等的。\n```javascript\n     function Person(name) {\n        this.name = name;\n        this.sayName = function () {\n          console.log(this.name);\n        };\n      }\n      let person1 = new Person(\"BIBI\");\n      person1.sayName();\n      let person2 = new Person(\"CICI\");\n      person2.sayName();\n      person1.sayName== person2.sayName   //false\n    \n************************************\n      this.sayName = function () {\n          console.log(this.name);\n        };\n  //等价于\n  this.sayName = new Function(console.log(this.name));\n\n```\n 解决多次创造函数实例的办法：把函数定义转移到构造函数外部。\n```javascript\n      function Person(name) {\n        this.name = name;\n        this.sayName = sayName;\n      }\n      function sayName() {\n        console.log(this.name);\n      }\n\n      let person1 = new Person(\"BIBI\");\n      let person2 = new Person(\"CICI\");\n      console.log(person1.sayName == person2.sayName) //true\n```\n  但是一样有对象如果有多个方法就需要定义多个全局函数的弊端，没有封装性可言。\n<br/>\n#### **构造函数与工厂模式的区别**\n构造函数：\n1.没有显示的创建对象\n\n2.直接将属性和方法赋给了this对象\n\n3.没有return语句\n\n4.实例可以标识为一种特定的类型\n\n例如 let person1=new Person(); person1 instanceof Person //true\n<br/>\n#### **原型模式**\n\n每个函数都有一个prototype属性，（**Function与Object都是js自带函数，所有他们都有prototype**）prototype属性是一个指针，指向了函数的原型对象。**实例对象没有原型对象,Object是因为是js自带的函数所以才有原型对象。**\n\n可以对原型对象设定属性和方法，可以让对象实例进行共享。\n\n优势：对比构造函数来说不必在构造函数中定义对象的实例信息。既不会每次实例化对象都创建一个实例函数也不会为了避免创建多个实例函数而放在全局，从而失去了封装性。\n\n原型模式执行过程：\n```javascript\n     function Person(name) {\n        this.name = name;\n      }\n      Person.prototype.sayName = function () {\n        console.log(this.name);\n      };\n      let person1 = new Person(\"bibi\");\n      person1.sayName();\n    //解析器会解析两次,先搜索实例person1有没有sayName方法，\n    //没有的话就会去搜索原型对象上是不是有sayName方法。从而读取到原型对象上的方法\n\n```\n \n\n###### **1.理解原型对象**\n\n+ 每个函数拥有一个原型对象,函数通过prototype找到原型对象。\n\n+ 函数的实例对象通过隐式属性\\_\\_proto\\_\\_找到这个原型对象。\n\n+ 原型对象有一个默认属性constructor，指向函数\n```javascript\n     function Person() {}\n      let person1 = new Person();\n      //实例对象的__proto__指向原型对象\n      console.log(person1.__proto__ == Person.prototype);//true\n      //原型对象的默认属性constructor指向函数\n      console.log((Person.prototype.constructor == Person));//true\n      //原型对象通过__proto__指向Object的原型对象\n      console.log(Person.prototype.__proto__ == Object.prototype);//true\n      //但是函数不能指向Function的原型对象，因为Person的原型对象和Function的\n      //原型对象平行，同时指向Object的原型对象\n      console.log(Person.prototype.__proto__ == Function.prototype);//false\n      console.log(Function.prototype.__proto__ == Object.prototype);//true\n\n```\n \n\n###### **2.原型模式的搜寻方式**\n\n+ 解析器在寻找属性和方法的时候会优先寻找实例上的属性和方法，如果能找到则不会再去搜寻原型对象。\n```javascript\n     function Person() {}\n      Person.prototype.name = \"bibi\";\n\n      let person1 = new Person();\n      person1.name = \"Lily\";\n      console.log(person1.name);//实例person1上拥有属性name，则不再寻找原型对象\n\n      let person2 = new Person();\n      console.log(person2.name);//实例上无属性name，继续搜索原型对象\n```\n\n \n\n###### **3.判断一个属性存在于实例上还是存在于原型对象上**\n\n\"属性\" in Object ：用来判断 这个属性是否存在于对象上，无论是实例还是原型对象都为true\n\nObject hasOwnProperty(\"属性\"):用来判断属性是否在实例上，在实例上则为true\n\n结合两者:\n!object.hasOwnProperty(name) && name in object：判断是否在原型上\n```javascript\n      function Person(name) {\n        this.name = name;\n      }\n      Person.prototype.age = \"27\";\n\n      let person1 = new Person(\"bibi\");\n      function hasPrototypeProperty(object, name) {\n        return !object.hasOwnProperty(name) && name in object;\n      }\n      console.log(hasPrototypeProperty(person1, \"age\")); //true\n      console.log(hasPrototypeProperty(person1, \"name\")); //false\n\n```\n\n \n\n###### **4.获取原型对象上属性的方法**\n```javascript\n     function Person(name, sex) {\n        this.name = name;\n        this.sex = sex;\n      }\n      Person.prototype.age = \"27\";\n      Person.prototype.address = \"xx路xx街\";\n      let person1 = new Person(\"bibi\", \"female\");\n\n      //传入原型拿到所有原型上可枚举的属性\n      console.log(Object.keys(Person.prototype));//['age', 'address']\n\n      //getOwnPropertyNames可以拿到所有不可枚举加可枚举的属性\n      console.log(Object.getOwnPropertyNames(Person.prototype));\n      //['constructor', 'age', 'address']\n\n      //传入实例拿到所有实例上可枚举的属性\n      console.log(Object.keys(person1));//['name', 'sex']\n\n```\n\n \n\n###### **5.使用字面量方法定义原型对象**\n\n    使用字面量相当于创建了一个新的原型对象，会与原有的原型对象共存，但是要注意创建实例的位置与原型对象的关系。\n```javascript\n     function Person() {}\n      let person1 = new Person();\n      //现在有两个原型对象 原先的原型对象，只要一个默认属性constructor\n      console.log(Person.prototype); //constructor\n\n      //使用字面量相当于新建了一个原型对象\n      Person.prototype = {\n        //指定了新原型对象的构造函数指向，不指定就不会再指向构造函数Person了\n        constructor: Person,\n        name: \"cici\",\n        sayName() {\n          console.log(this.name);\n        },\n      };\n      let person2 = new Person();\n\n      //新创建的原型对象，三个默认属性:constructor、name、sayName\n      console.log(Person.prototype);\n      // 新创建的原型对象指定了constructor指向\n      console.log(Person.prototype.constructor == Person); //true\n\n      // person1的实例在新原型对象之前创建，所以person1.__proto__指向了原先的原型对象\n      person1.sayName(); //error\n      // person2的实例在新原型对象之后创建，所以person2.__proto__指向了新的原型对象\n      person2.sayName(); //cici\n\n```\n\n \n\n###### **6.原型模式的缺点**\n\n原型中的属性都是被共享的，所以实例中修改引用类型的值，同时也会修改掉原型对象中引用类型的值。\n```javascript\n      function ColorList() {}\n      ColorList.prototype.arr = [\"red\", \"yellow\"];\n      let searchColor1 = new ColorList();\n      searchColor1.arr.push(\"green\");\n      console.log(searchColor1.arr);//['red', 'yellow', 'green']\n\n      let searchColor2 = new ColorList();\n      console.log(searchColor2.arr);//['red', 'yellow', 'green']\n\n```\n\n <br/>\n\n##### **组合模式（构造函数模式+原型模式）**\n\n 构造模式用于定义实例属性\n\n 原型模式用于定义方法和共享属性（不能是引用类型的属性）\n\n 结果，每个实例都有一份实例属性的副本同时又共享着方法，最大限度的节省内存。另外这种混合模式还支持向构造函数传递参数\n```javascript\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        this.friends = [];\n      }\n      Person.prototype = {\n        constructor: Person,\n        sayPersonInfo() {\n          console.log(this.name + this.age + this.friends.join(\",     \"));\n     },\n    };\n      let person1 = new Person(\"Lily\", 29);\n      person1.friends.push(\"Tom\", \"Jerry\");\n      person1.sayPersonInfo(); //Lily29Tom,Jerry\n\n      let person2 = new Person(\"Mike\", 28);\n      person2.friends.push(\"Alice\", \"Marry\");\n      person2.sayPersonInfo(); //Mike28Alice,Marry\n\n```\n\n<br/>\n \n\n###### **动态原型**\n\n 1.把所有信息封装在了构造函数中。\n\n 2.通过在构造函数中初始化原型，保持了构造函数和原型的优点。\n\n 换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型\n\n注意：这段代码只会在初次调用构造函数中执行\n```javascript\n     function Person(name, age) {\n        this.name = name;\n        this.age = age;\n        if (typeof this.sayName != \"function\") {\n          Person.prototype.sayName = function () {\n            console.log(this.name);\n          };\n        }\n      }\n      let person1 = new Person(\"Lily\", 29);\n      person1.sayName();\n\n```\n<br/>\n \n\n##### **寄生构造函数模式**\n\n    寄生模式使用new操作符去实例化对象，其余跟工厂模式一致。\n\n    寄生模式也不能识别对象类型，这点也与工厂模式一致。\n```javascript\n      function SpecialArray() {\n        let values = new Array();\n        values.push.apply(values, arguments);\n        values.toPiepdString = function () {\n          return this.join(\"|\");\n        };\n        return values;\n      }\n      let colors = SpecialArray(\"red\", \"blue\", \"green\");\n      console.log(colors.toPiepdString());//red|blue|green\n      console.log(colors instanceof SpecialArray); //false\n\n```\n\n \n\n 使用寄生构造函数的目的是希望扩展原生Array的一个方法toPipeMessage,为了不污染原生构造函数。相当于作者希望通过new去区分，**用寄生构造去定义扩展原生函数，用工厂模式去定义自定义函数。**\n\n\n> 资料  [js中寄生构造函数模式和工厂模式的区别](https://segmentfault.com/q/1010000004596650)\n\n<br/>\n\n##### **稳妥构造函数模式**\n    遵循类似寄生构造函数的模式。稳妥构造函数模式也不能识别对象类型。\n\n    稳妥对象适合在一些安全的环境中（这些环境禁止使用this或者new），或者在防止数据被其他应用程序改动时使用。\n```javascript\n      function Person(name, age) {\n        let o = new Object();\n        o.name = name;\n        o.age = age;\n        o.sayName = function () {\n       //第一点不同：创建对象的实例方法不引用this\n          console.log(name);\n        };\n        return o;\n      }\n      //第二点不同：不适用new操作符调用构造函数\n      let person1 = Person(\"Lily\", 29); \n      //person1是个稳妥的对象，除了方法其sayName方法外，\n      //没有别的办法可以访问person1里面的其他数据成员\n      person1.sayName();\n\n```\n\n ","slug":"对象模式设计-各种对象模式详解与差异","published":1,"updated":"2020-10-25T10:00:00.000Z","_id":"cl9p2f074000fa8uu12tbdqt3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>各种对象模式详解与差异</h1>\n<p><strong>设计对象模式的意义</strong><br>\n所需要的实例对象通过构造函数获得私有属性、通过原型链获得共享的属性。</p>\n<p><em>什么是好的方式？</em><br>\n私有属性通过构造函数的方式获得（不考虑实例中自定义私有属性）且不需要重写，共<br>\n享属性通过原型链找到且不需要重复创建。</p>\n<blockquote>\n<p>资料：  <a href=\"https://segmentfault.com/a/1190000004559437\">创建对象、对象继承的实用方式及理解</a></p>\n</blockquote>\n<h4 id=\"工厂模式\">工厂模式</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        Person.name = name;</span><br><span class=\"line\">        Person.age = age;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = createPerson(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = createPerson(<span class=\"string\">&quot;Ming&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.name + person1.age);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person2.name + person2.age);</span><br></pre></td></tr></table></figure>\n<p>工厂模式解决了创建多个相似对象的问题。<br>\n缺点：没有解决对象识别的问题（无法知道对象的类型）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> createPerson); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"构造函数\">构造函数</h4>\n<p>优点:可以将构造函数的实例表示为一种特定类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.sayName();</span><br></pre></td></tr></table></figure>\n<p>优点:可以将构造函数的实例表示为一种特定类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>构造函数的用法：<br>\n构造函数与其他函数的区别<strong>只是调用的方式不同</strong>。<br>\n   1.当做构造函数使用<br>\n   *<strong>所有函数，只要调用的时候通过new操作符来调用，就可以作为构造函数。否则就是普通函数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">    person1.sayName();</span><br></pre></td></tr></table></figure>\n<p>2.当做普通函数调用<br>\n   ***当在全局作用域中调用一个函数，this对象指向window。window对象下就会拥有调用的那个函数的所有属性与方法。**所以在这里window对象就会有sayName方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Person(<span class=\"string\">&quot;lulu&quot;</span>, <span class=\"number\">30</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.sayName(); <span class=\"comment\">//&quot;lulu&quot;   </span></span><br></pre></td></tr></table></figure>\n<p>3.在另一个对象的作用域中调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">     Person.call(o, <span class=\"string\">&quot;bobo&quot;</span>, <span class=\"number\">30</span>);   </span><br><span class=\"line\">     o.sayName();   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>new一个构造函数，如果构造函数没有返回值，会隐式的把this作为返回值<br>\n<br/></p>\n<h5 id=\"new一个构造函数的本质\"><strong>new一个构造函数的本质</strong></h5>\n<p><strong>如果构造函数没有返回值，会先创建一个指向构造函数原型对象的空对象，this会作为一个默认的返回值，在js底层进行隐式转换的时候，空对象会作为执行环境,this将会作为传参</strong></p>\n<p><strong>let person=new Person()        ==        new Person().apply(person,this)</strong><br>\n    <em>有点类似于上面这种，个人理解不一定对</em></p>\n<p><strong>从而生成一个拥有构造函数属性同时__proto__又指向了构造函数.prototype的新对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第一步 先创建了一个指向Person.prototype的空对象</span></span><br><span class=\"line\">        <span class=\"comment\">//第二步 构造函数没有Person，所以默认返回值为this</span></span><br><span class=\"line\">        <span class=\"comment\">//第三部 js底层通过call或者是apply改变this的运行环境作用域（为新对象person）</span></span><br><span class=\"line\">       <span class=\"comment\">//从而生成一个拥有构造函数属性又同时指向构造函数原型对象的新对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>如果构造函数有返回值，返回的是对象（不包括null）和函数，则返回值为对象，否则返回的还是默认的this对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"number\">37</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//37</span></span><br><span class=\"line\"><span class=\"comment\">//********************************************</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"number\">37</span>;</span><br><span class=\"line\">     <span class=\"comment\">//返回对象，则构造函数F的返回值为这个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          a: <span class=\"number\">38</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//38</span></span><br><span class=\"line\"><span class=\"comment\">//************************************************</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//foo通过bind传入对象后,在执行对象下变量a有了值</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> func = foo.bind(&#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">//100</span></span><br><span class=\"line\">      <span class=\"comment\">//构造函数foo有return值，所以return值是返回值 this.a等于undefined</span></span><br><span class=\"line\">      <span class=\"comment\">//return undefined 等于foo还是返回了this作为返回值</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> foo()); <span class=\"comment\">//foo &#123;b:100&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//************************************************</span></span><br><span class=\"line\"><span class=\"comment\">//其他例子：</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>构造函数缺点</strong>：<br>\n在构造函数中创建的每个方法都要在每个实例上重新创建一遍。不同实例上的同名函数是不相等的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;BIBI&quot;</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;CICI&quot;</span>);</span><br><span class=\"line\">      person2.sayName();</span><br><span class=\"line\">      person1.sayName== person2.sayName   <span class=\"comment\">//false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">************************************</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//等价于</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解决多次创造函数实例的办法：把函数定义转移到构造函数外部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = sayName;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;BIBI&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;CICI&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.sayName == person2.sayName) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>但是一样有对象如果有多个方法就需要定义多个全局函数的弊端，没有封装性可言。<br>\n<br/></p>\n<h4 id=\"构造函数与工厂模式的区别\"><strong>构造函数与工厂模式的区别</strong></h4>\n<p>构造函数：<br>\n1.没有显示的创建对象</p>\n<p>2.直接将属性和方法赋给了this对象</p>\n<p>3.没有return语句</p>\n<p>4.实例可以标识为一种特定的类型</p>\n<p>例如 let person1=new Person(); person1 instanceof Person //true<br>\n<br/></p>\n<h4 id=\"原型模式\"><strong>原型模式</strong></h4>\n<p>每个函数都有一个prototype属性，（<strong>Function与Object都是js自带函数，所有他们都有prototype</strong>）prototype属性是一个指针，指向了函数的原型对象。<strong>实例对象没有原型对象,Object是因为是js自带的函数所以才有原型对象。</strong></p>\n<p>可以对原型对象设定属性和方法，可以让对象实例进行共享。</p>\n<p>优势：对比构造函数来说不必在构造函数中定义对象的实例信息。既不会每次实例化对象都创建一个实例函数也不会为了避免创建多个实例函数而放在全局，从而失去了封装性。</p>\n<p>原型模式执行过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">    <span class=\"comment\">//解析器会解析两次,先搜索实例person1有没有sayName方法，</span></span><br><span class=\"line\">    <span class=\"comment\">//没有的话就会去搜索原型对象上是不是有sayName方法。从而读取到原型对象上的方法</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"1-理解原型对象\"><strong>1.理解原型对象</strong></h6>\n<ul>\n<li>\n<p>每个函数拥有一个原型对象,函数通过prototype找到原型对象。</p>\n</li>\n<li>\n<p>函数的实例对象通过隐式属性__proto__找到这个原型对象。</p>\n</li>\n<li>\n<p>原型对象有一个默认属性constructor，指向函数</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"comment\">//实例对象的__proto__指向原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.__proto__ == Person.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象的默认属性constructor指向函数</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log((Person.prototype.constructor == Person));<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象通过__proto__指向Object的原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//但是函数不能指向Function的原型对象，因为Person的原型对象和Function的</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象平行，同时指向Object的原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.__proto__ == <span class=\"built_in\">Function</span>.prototype);<span class=\"comment\">//false</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"2-原型模式的搜寻方式\"><strong>2.原型模式的搜寻方式</strong></h6>\n<ul>\n<li>解析器在寻找属性和方法的时候会优先寻找实例上的属性和方法，如果能找到则不会再去搜寻原型对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      Person.prototype.name = <span class=\"string\">&quot;bibi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      person1.name = <span class=\"string\">&quot;Lily&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.name);<span class=\"comment\">//实例person1上拥有属性name，则不再寻找原型对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person2.name);<span class=\"comment\">//实例上无属性name，继续搜索原型对象</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"3-判断一个属性存在于实例上还是存在于原型对象上\"><strong>3.判断一个属性存在于实例上还是存在于原型对象上</strong></h6>\n<p>“属性” in Object ：用来判断 这个属性是否存在于对象上，无论是实例还是原型对象都为true</p>\n<p>Object hasOwnProperty(“属性”):用来判断属性是否在实例上，在实例上则为true</p>\n<p>结合两者:<br>\n!object.hasOwnProperty(name) &amp;&amp; name in object：判断是否在原型上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.age = <span class=\"string\">&quot;27&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>);</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPrototypeProperty</span>(<span class=\"params\">object, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !object.hasOwnProperty(name) &amp;&amp; name <span class=\"keyword\">in</span> object;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(hasPrototypeProperty(person1, <span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(hasPrototypeProperty(person1, <span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"4-获取原型对象上属性的方法\"><strong>4.获取原型对象上属性的方法</strong></h6>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, sex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.age = <span class=\"string\">&quot;27&quot;</span>;</span><br><span class=\"line\">      Person.prototype.address = <span class=\"string\">&quot;xx路xx街&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>, <span class=\"string\">&quot;female&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//传入原型拿到所有原型上可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(Person.prototype));<span class=\"comment\">//[&#x27;age&#x27;, &#x27;address&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//getOwnPropertyNames可以拿到所有不可枚举加可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Person.prototype));</span><br><span class=\"line\">      <span class=\"comment\">//[&#x27;constructor&#x27;, &#x27;age&#x27;, &#x27;address&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//传入实例拿到所有实例上可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(person1));<span class=\"comment\">//[&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"5-使用字面量方法定义原型对象\"><strong>5.使用字面量方法定义原型对象</strong></h6>\n<p>使用字面量相当于创建了一个新的原型对象，会与原有的原型对象共存，但是要注意创建实例的位置与原型对象的关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"comment\">//现在有两个原型对象 原先的原型对象，只要一个默认属性constructor</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">//constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//使用字面量相当于新建了一个原型对象</span></span><br><span class=\"line\">      Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定了新原型对象的构造函数指向，不指定就不会再指向构造函数Person了</span></span><br><span class=\"line\">        <span class=\"title\">constructor</span>: <span class=\"title\">Person</span>,</span><br><span class=\"line\">        <span class=\"title\">name</span>: &quot;<span class=\"title\">cici</span>&quot;,</span><br><span class=\"line\">        <span class=\"title\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//新创建的原型对象，三个默认属性:constructor、name、sayName</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype);</span><br><span class=\"line\">      <span class=\"comment\">// 新创建的原型对象指定了constructor指向</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.constructor == Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// person1的实例在新原型对象之前创建，所以person1.__proto__指向了原先的原型对象</span></span><br><span class=\"line\">      person1.sayName(); <span class=\"comment\">//error</span></span><br><span class=\"line\">      <span class=\"comment\">// person2的实例在新原型对象之后创建，所以person2.__proto__指向了新的原型对象</span></span><br><span class=\"line\">      person2.sayName(); <span class=\"comment\">//cici</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"6-原型模式的缺点\"><strong>6.原型模式的缺点</strong></h6>\n<p>原型中的属性都是被共享的，所以实例中修改引用类型的值，同时也会修改掉原型对象中引用类型的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ColorList</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      ColorList.prototype.arr = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> searchColor1 = <span class=\"keyword\">new</span> ColorList();</span><br><span class=\"line\">      searchColor1.arr.push(<span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(searchColor1.arr);<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> searchColor2 = <span class=\"keyword\">new</span> ColorList();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(searchColor2.arr);<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n <br/>\n<h5 id=\"组合模式（构造函数模式-原型模式）\"><strong>组合模式（构造函数模式+原型模式）</strong></h5>\n<p>构造模式用于定义实例属性</p>\n<p>原型模式用于定义方法和共享属性（不能是引用类型的属性）</p>\n<p>结果，每个实例都有一份实例属性的副本同时又共享着方法，最大限度的节省内存。另外这种混合模式还支持向构造函数传递参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.friends = [];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"title\">constructor</span>: <span class=\"title\">Person</span>,</span><br><span class=\"line\">        <span class=\"title\">sayPersonInfo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"built_in\">this</span>.age + <span class=\"built_in\">this</span>.friends.join(<span class=\"string\">&quot;,     &quot;</span>));</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.friends.push(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">      person1.sayPersonInfo(); <span class=\"comment\">//Lily29Tom,Jerry</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Mike&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      person2.friends.push(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Marry&quot;</span>);</span><br><span class=\"line\">      person2.sayPersonInfo(); <span class=\"comment\">//Mike28Alice,Marry</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h6 id=\"动态原型\"><strong>动态原型</strong></h6>\n<p>1.把所有信息封装在了构造函数中。</p>\n<p>2.通过在构造函数中初始化原型，保持了构造函数和原型的优点。</p>\n<p>换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型</p>\n<p>注意：这段代码只会在初次调用构造函数中执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.sayName != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h5 id=\"寄生构造函数模式\"><strong>寄生构造函数模式</strong></h5>\n<p>寄生模式使用new操作符去实例化对象，其余跟工厂模式一致。</p>\n<p>寄生模式也不能识别对象类型，这点也与工厂模式一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialArray</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        values.push.apply(values, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        values.toPiepdString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> colors = SpecialArray(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(colors.toPiepdString());<span class=\"comment\">//red|blue|green</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(colors <span class=\"keyword\">instanceof</span> SpecialArray); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用寄生构造函数的目的是希望扩展原生Array的一个方法toPipeMessage,为了不污染原生构造函数。相当于作者希望通过new去区分，<strong>用寄生构造去定义扩展原生函数，用工厂模式去定义自定义函数。</strong></p>\n<blockquote>\n<p>资料  <a href=\"https://segmentfault.com/q/1010000004596650\">js中寄生构造函数模式和工厂模式的区别</a></p>\n</blockquote>\n<br/>\n<h5 id=\"稳妥构造函数模式\"><strong>稳妥构造函数模式</strong></h5>\n<p>遵循类似寄生构造函数的模式。稳妥构造函数模式也不能识别对象类型。</p>\n<p>稳妥对象适合在一些安全的环境中（这些环境禁止使用this或者new），或者在防止数据被其他应用程序改动时使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        o.name = name;</span><br><span class=\"line\">        o.age = age;</span><br><span class=\"line\">        o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//第一点不同：创建对象的实例方法不引用this</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//第二点不同：不适用new操作符调用构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>); </span><br><span class=\"line\">      <span class=\"comment\">//person1是个稳妥的对象，除了方法其sayName方法外，</span></span><br><span class=\"line\">      <span class=\"comment\">//没有别的办法可以访问person1里面的其他数据成员</span></span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1>各种对象模式详解与差异</h1>\n<p><strong>设计对象模式的意义</strong><br>\n所需要的实例对象通过构造函数获得私有属性、通过原型链获得共享的属性。</p>\n<p><em>什么是好的方式？</em><br>\n私有属性通过构造函数的方式获得（不考虑实例中自定义私有属性）且不需要重写，共<br>\n享属性通过原型链找到且不需要重复创建。</p>\n<blockquote>\n<p>资料：  <a href=\"https://segmentfault.com/a/1190000004559437\">创建对象、对象继承的实用方式及理解</a></p>\n</blockquote>\n<h4 id=\"工厂模式\">工厂模式</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        Person.name = name;</span><br><span class=\"line\">        Person.age = age;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = createPerson(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = createPerson(<span class=\"string\">&quot;Ming&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.name + person1.age);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person2.name + person2.age);</span><br></pre></td></tr></table></figure>\n<p>工厂模式解决了创建多个相似对象的问题。<br>\n缺点：没有解决对象识别的问题（无法知道对象的类型）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> createPerson); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"构造函数\">构造函数</h4>\n<p>优点:可以将构造函数的实例表示为一种特定类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.sayName();</span><br></pre></td></tr></table></figure>\n<p>优点:可以将构造函数的实例表示为一种特定类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>构造函数的用法：<br>\n构造函数与其他函数的区别<strong>只是调用的方式不同</strong>。<br>\n   1.当做构造函数使用<br>\n   *<strong>所有函数，只要调用的时候通过new操作符来调用，就可以作为构造函数。否则就是普通函数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">    person1.sayName();</span><br></pre></td></tr></table></figure>\n<p>2.当做普通函数调用<br>\n   ***当在全局作用域中调用一个函数，this对象指向window。window对象下就会拥有调用的那个函数的所有属性与方法。**所以在这里window对象就会有sayName方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Person(<span class=\"string\">&quot;lulu&quot;</span>, <span class=\"number\">30</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.sayName(); <span class=\"comment\">//&quot;lulu&quot;   </span></span><br></pre></td></tr></table></figure>\n<p>3.在另一个对象的作用域中调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();  </span><br><span class=\"line\">     Person.call(o, <span class=\"string\">&quot;bobo&quot;</span>, <span class=\"number\">30</span>);   </span><br><span class=\"line\">     o.sayName();   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>new一个构造函数，如果构造函数没有返回值，会隐式的把this作为返回值<br>\n<br/></p>\n<h5 id=\"new一个构造函数的本质\"><strong>new一个构造函数的本质</strong></h5>\n<p><strong>如果构造函数没有返回值，会先创建一个指向构造函数原型对象的空对象，this会作为一个默认的返回值，在js底层进行隐式转换的时候，空对象会作为执行环境,this将会作为传参</strong></p>\n<p><strong>let person=new Person()        ==        new Person().apply(person,this)</strong><br>\n    <em>有点类似于上面这种，个人理解不一定对</em></p>\n<p><strong>从而生成一个拥有构造函数属性同时__proto__又指向了构造函数.prototype的新对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第一步 先创建了一个指向Person.prototype的空对象</span></span><br><span class=\"line\">        <span class=\"comment\">//第二步 构造函数没有Person，所以默认返回值为this</span></span><br><span class=\"line\">        <span class=\"comment\">//第三部 js底层通过call或者是apply改变this的运行环境作用域（为新对象person）</span></span><br><span class=\"line\">       <span class=\"comment\">//从而生成一个拥有构造函数属性又同时指向构造函数原型对象的新对象</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>如果构造函数有返回值，返回的是对象（不包括null）和函数，则返回值为对象，否则返回的还是默认的this对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"number\">37</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//37</span></span><br><span class=\"line\"><span class=\"comment\">//********************************************</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"number\">37</span>;</span><br><span class=\"line\">     <span class=\"comment\">//返回对象，则构造函数F的返回值为这个对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          a: <span class=\"number\">38</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">//38</span></span><br><span class=\"line\"><span class=\"comment\">//************************************************</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//foo通过bind传入对象后,在执行对象下变量a有了值</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> func = foo.bind(&#123; <span class=\"attr\">a</span>: <span class=\"number\">100</span> &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">//100</span></span><br><span class=\"line\">      <span class=\"comment\">//构造函数foo有return值，所以return值是返回值 this.a等于undefined</span></span><br><span class=\"line\">      <span class=\"comment\">//return undefined 等于foo还是返回了this作为返回值</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> foo()); <span class=\"comment\">//foo &#123;b:100&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//************************************************</span></span><br><span class=\"line\"><span class=\"comment\">//其他例子：</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"><span class=\"comment\">//*********************************************</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = <span class=\"string\">&quot;追梦子&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(a.user); <span class=\"comment\">//追梦子</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>构造函数缺点</strong>：<br>\n在构造函数中创建的每个方法都要在每个实例上重新创建一遍。不同实例上的同名函数是不相等的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;BIBI&quot;</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;CICI&quot;</span>);</span><br><span class=\"line\">      person2.sayName();</span><br><span class=\"line\">      person1.sayName== person2.sayName   <span class=\"comment\">//false</span></span><br><span class=\"line\">    </span><br><span class=\"line\">************************************</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//等价于</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sayName = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解决多次创造函数实例的办法：把函数定义转移到构造函数外部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sayName = sayName;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;BIBI&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;CICI&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.sayName == person2.sayName) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>但是一样有对象如果有多个方法就需要定义多个全局函数的弊端，没有封装性可言。<br>\n<br/></p>\n<h4 id=\"构造函数与工厂模式的区别\"><strong>构造函数与工厂模式的区别</strong></h4>\n<p>构造函数：<br>\n1.没有显示的创建对象</p>\n<p>2.直接将属性和方法赋给了this对象</p>\n<p>3.没有return语句</p>\n<p>4.实例可以标识为一种特定的类型</p>\n<p>例如 let person1=new Person(); person1 instanceof Person //true<br>\n<br/></p>\n<h4 id=\"原型模式\"><strong>原型模式</strong></h4>\n<p>每个函数都有一个prototype属性，（<strong>Function与Object都是js自带函数，所有他们都有prototype</strong>）prototype属性是一个指针，指向了函数的原型对象。<strong>实例对象没有原型对象,Object是因为是js自带的函数所以才有原型对象。</strong></p>\n<p>可以对原型对象设定属性和方法，可以让对象实例进行共享。</p>\n<p>优势：对比构造函数来说不必在构造函数中定义对象的实例信息。既不会每次实例化对象都创建一个实例函数也不会为了避免创建多个实例函数而放在全局，从而失去了封装性。</p>\n<p>原型模式执行过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">    <span class=\"comment\">//解析器会解析两次,先搜索实例person1有没有sayName方法，</span></span><br><span class=\"line\">    <span class=\"comment\">//没有的话就会去搜索原型对象上是不是有sayName方法。从而读取到原型对象上的方法</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"1-理解原型对象\"><strong>1.理解原型对象</strong></h6>\n<ul>\n<li>\n<p>每个函数拥有一个原型对象,函数通过prototype找到原型对象。</p>\n</li>\n<li>\n<p>函数的实例对象通过隐式属性__proto__找到这个原型对象。</p>\n</li>\n<li>\n<p>原型对象有一个默认属性constructor，指向函数</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"comment\">//实例对象的__proto__指向原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.__proto__ == Person.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象的默认属性constructor指向函数</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log((Person.prototype.constructor == Person));<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象通过__proto__指向Object的原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"comment\">//但是函数不能指向Function的原型对象，因为Person的原型对象和Function的</span></span><br><span class=\"line\">      <span class=\"comment\">//原型对象平行，同时指向Object的原型对象</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.__proto__ == <span class=\"built_in\">Function</span>.prototype);<span class=\"comment\">//false</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"2-原型模式的搜寻方式\"><strong>2.原型模式的搜寻方式</strong></h6>\n<ul>\n<li>解析器在寻找属性和方法的时候会优先寻找实例上的属性和方法，如果能找到则不会再去搜寻原型对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      Person.prototype.name = <span class=\"string\">&quot;bibi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      person1.name = <span class=\"string\">&quot;Lily&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person1.name);<span class=\"comment\">//实例person1上拥有属性name，则不再寻找原型对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(person2.name);<span class=\"comment\">//实例上无属性name，继续搜索原型对象</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"3-判断一个属性存在于实例上还是存在于原型对象上\"><strong>3.判断一个属性存在于实例上还是存在于原型对象上</strong></h6>\n<p>“属性” in Object ：用来判断 这个属性是否存在于对象上，无论是实例还是原型对象都为true</p>\n<p>Object hasOwnProperty(“属性”):用来判断属性是否在实例上，在实例上则为true</p>\n<p>结合两者:<br>\n!object.hasOwnProperty(name) &amp;&amp; name in object：判断是否在原型上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.age = <span class=\"string\">&quot;27&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>);</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPrototypeProperty</span>(<span class=\"params\">object, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !object.hasOwnProperty(name) &amp;&amp; name <span class=\"keyword\">in</span> object;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(hasPrototypeProperty(person1, <span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(hasPrototypeProperty(person1, <span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"4-获取原型对象上属性的方法\"><strong>4.获取原型对象上属性的方法</strong></h6>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, sex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype.age = <span class=\"string\">&quot;27&quot;</span>;</span><br><span class=\"line\">      Person.prototype.address = <span class=\"string\">&quot;xx路xx街&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;bibi&quot;</span>, <span class=\"string\">&quot;female&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//传入原型拿到所有原型上可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(Person.prototype));<span class=\"comment\">//[&#x27;age&#x27;, &#x27;address&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//getOwnPropertyNames可以拿到所有不可枚举加可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(Person.prototype));</span><br><span class=\"line\">      <span class=\"comment\">//[&#x27;constructor&#x27;, &#x27;age&#x27;, &#x27;address&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//传入实例拿到所有实例上可枚举的属性</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(person1));<span class=\"comment\">//[&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"5-使用字面量方法定义原型对象\"><strong>5.使用字面量方法定义原型对象</strong></h6>\n<p>使用字面量相当于创建了一个新的原型对象，会与原有的原型对象共存，但是要注意创建实例的位置与原型对象的关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">      <span class=\"comment\">//现在有两个原型对象 原先的原型对象，只要一个默认属性constructor</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">//constructor</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//使用字面量相当于新建了一个原型对象</span></span><br><span class=\"line\">      Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定了新原型对象的构造函数指向，不指定就不会再指向构造函数Person了</span></span><br><span class=\"line\">        <span class=\"title\">constructor</span>: <span class=\"title\">Person</span>,</span><br><span class=\"line\">        <span class=\"title\">name</span>: &quot;<span class=\"title\">cici</span>&quot;,</span><br><span class=\"line\">        <span class=\"title\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//新创建的原型对象，三个默认属性:constructor、name、sayName</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype);</span><br><span class=\"line\">      <span class=\"comment\">// 新创建的原型对象指定了constructor指向</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype.constructor == Person); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// person1的实例在新原型对象之前创建，所以person1.__proto__指向了原先的原型对象</span></span><br><span class=\"line\">      person1.sayName(); <span class=\"comment\">//error</span></span><br><span class=\"line\">      <span class=\"comment\">// person2的实例在新原型对象之后创建，所以person2.__proto__指向了新的原型对象</span></span><br><span class=\"line\">      person2.sayName(); <span class=\"comment\">//cici</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"6-原型模式的缺点\"><strong>6.原型模式的缺点</strong></h6>\n<p>原型中的属性都是被共享的，所以实例中修改引用类型的值，同时也会修改掉原型对象中引用类型的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ColorList</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      ColorList.prototype.arr = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> searchColor1 = <span class=\"keyword\">new</span> ColorList();</span><br><span class=\"line\">      searchColor1.arr.push(<span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(searchColor1.arr);<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> searchColor2 = <span class=\"keyword\">new</span> ColorList();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(searchColor2.arr);<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n <br/>\n<h5 id=\"组合模式（构造函数模式-原型模式）\"><strong>组合模式（构造函数模式+原型模式）</strong></h5>\n<p>构造模式用于定义实例属性</p>\n<p>原型模式用于定义方法和共享属性（不能是引用类型的属性）</p>\n<p>结果，每个实例都有一份实例属性的副本同时又共享着方法，最大限度的节省内存。另外这种混合模式还支持向构造函数传递参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.friends = [];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Person.prototype = &#123;</span><br><span class=\"line\">        <span class=\"title\">constructor</span>: <span class=\"title\">Person</span>,</span><br><span class=\"line\">        <span class=\"title\">sayPersonInfo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"built_in\">this</span>.age + <span class=\"built_in\">this</span>.friends.join(<span class=\"string\">&quot;,     &quot;</span>));</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.friends.push(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">      person1.sayPersonInfo(); <span class=\"comment\">//Lily29Tom,Jerry</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Mike&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      person2.friends.push(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Marry&quot;</span>);</span><br><span class=\"line\">      person2.sayPersonInfo(); <span class=\"comment\">//Mike28Alice,Marry</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h6 id=\"动态原型\"><strong>动态原型</strong></h6>\n<p>1.把所有信息封装在了构造函数中。</p>\n<p>2.通过在构造函数中初始化原型，保持了构造函数和原型的优点。</p>\n<p>换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型</p>\n<p>注意：这段代码只会在初次调用构造函数中执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.sayName != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h5 id=\"寄生构造函数模式\"><strong>寄生构造函数模式</strong></h5>\n<p>寄生模式使用new操作符去实例化对象，其余跟工厂模式一致。</p>\n<p>寄生模式也不能识别对象类型，这点也与工厂模式一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialArray</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">        values.push.apply(values, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        values.toPiepdString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> colors = SpecialArray(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(colors.toPiepdString());<span class=\"comment\">//red|blue|green</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(colors <span class=\"keyword\">instanceof</span> SpecialArray); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用寄生构造函数的目的是希望扩展原生Array的一个方法toPipeMessage,为了不污染原生构造函数。相当于作者希望通过new去区分，<strong>用寄生构造去定义扩展原生函数，用工厂模式去定义自定义函数。</strong></p>\n<blockquote>\n<p>资料  <a href=\"https://segmentfault.com/q/1010000004596650\">js中寄生构造函数模式和工厂模式的区别</a></p>\n</blockquote>\n<br/>\n<h5 id=\"稳妥构造函数模式\"><strong>稳妥构造函数模式</strong></h5>\n<p>遵循类似寄生构造函数的模式。稳妥构造函数模式也不能识别对象类型。</p>\n<p>稳妥对象适合在一些安全的环境中（这些环境禁止使用this或者new），或者在防止数据被其他应用程序改动时使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        o.name = name;</span><br><span class=\"line\">        o.age = age;</span><br><span class=\"line\">        o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//第一点不同：创建对象的实例方法不引用this</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//第二点不同：不适用new操作符调用构造函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = Person(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>); </span><br><span class=\"line\">      <span class=\"comment\">//person1是个稳妥的对象，除了方法其sayName方法外，</span></span><br><span class=\"line\">      <span class=\"comment\">//没有别的办法可以访问person1里面的其他数据成员</span></span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Github + Hexo 搭建个人博客超详细教程","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-18T13:17:35.000Z","password":null,"summary":"搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习。","_content":"![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png)\n\n<font color=magenta size=4>**在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~**</font>\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png)\n\n# 前言 #\n- 作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！\n\n- 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。\n- **为什么要搭建自己的博客？可以看看这三篇文章：**\n\n[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/ \"为什么你应该（从现在开始就）写博客\")   (By 刘未鹏 | Mind Hacks)\n\n[《为什么要自建博客？》](https://www.zhihu.com/question/19916345 \"为什么要自建博客？\")   (By 知乎)\n\n[《我为什么写博客》](https://www.cnblogs.com/jhzhu/p/3893297.html \"我为什么写博客\") （By 知明所以）\n\n\n我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。\n\n## 本文目录 ##\n- **快速搭建**\n- 安装<font color=red size=3>Node.js</font>\n- 添加国内镜像\n- 安装<font color=red size=3>Git </font>\n- 注册<font color=red size=3>Github</font>账号\n- 创建<font color=red size=3>Git</font>仓库\n- 安装<font color=red size=3>Hexo</font> \n- 配置本地<font color=red size=3>Hexo</font>\n- 连接<font color=red size=3>Github</font>与本地 \n- 写文章、发布文章 \n- <font color=red size=3>MarkDown</font>文章编辑器说明\n- 配置个性化域名\n- 更换自己喜欢的<font color=red size=3>Hexo</font>主题\n- 我的博客源代码\n- 结语\n\n----\n\n# 快速搭建 #\n有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。\n\n在这里以我的博客为例。\n\n## 一、下载博客源代码 ##\n\n大家可以直接素质二连，<font color=red size=3>Star&Fork</font>我的博客源代码：<https://github.com/MUYIio/hexo-themes-matery>，这里我给出两种下载方法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png)\n\n**第一种**：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（**不推荐**）\n\n**第二种**：如果你已经安装了[Git](https://git-scm.com/download/win \"Git\")，就可以右键单击<font color=red size=3>Come Bash Here</font>运行\n\n\n\n```bash\ngit clone git@github.com:MUYIio/hexo-themes-matery.git\n```\n\n\n\n将所有文件下载到本地，这个复杂一点。\n\n## 二、修改博客文档配置 ##\n\n首先将我们下载的博客源代码解压，然后修改主要配置：\n\n- 根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。\n- 根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。\n- 根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。\n- 主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。\n\n我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。\n\n最后一步，**本地的运行环境还是需要搭建好的**，跟着下文操作到连接Github与本地，环境就算是搭建完成。\n\n**本地环境搭建好之后会生成的文件：**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png)\n\n然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png)\n\n然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：\n\n    hexo clean\n    hexo g\n    hexo d\n\n# 安装Node.js #\n了解一下什么是<font color=red size=3>Node.js</font>：\n\n> <font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。\n\n需要用到的命令：\n        \n    $ git --version\n    $ node -v\n    $ npm -v\n\n[点击此处](https://nodejs.org/en/download/ \"Node.js\")进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png)\n\n检验是否安装成功：\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png)\n\n# 添加国内镜像 #\n这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：\n\n    npm config set registry https://registry.npm.taobao.org\n\n# 安装Git #\n> <font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。\n\n[点击此处](https://git-scm.com/download/win \"Git\")进入Git官网下载相应版本，默认安装即可。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png)\n\n参考资料：[《如何在windows下安装GIT》](https://www.cnblogs.com/jytx/p/5602927.html \"如何在windows下安装GIT\") (By 俊雨廷休)\n\n检验是否安装成功：\n\n安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功\n\n    git --version\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png)\n\n# 注册Github账号 #\n\n<font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，[点击此处](https://github.com/ \"Github\")进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。\n\n# 创建git仓库 #\n登录<font color=red size=3>Github</font>创建一个仓库\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png)\n\n如下图所示，**输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png)\n\n选择一个自己喜欢的主题：\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png)\n\n# 安装Hexo #\n> <font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。\n\n选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装\n\n    $ npm install hexo-cli -g\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png)\n\n输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。\n\n# 配置本地hexo #\n还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。\n\n    hexo init\n    npm install\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png)\n\n初始化成功生成的文件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png)\n\n接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<http://localhost:4000/>，就可以预览我们的博客啦，如图：\n\n显示以下信息说明操作正确：\n\n```INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.```\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png)\n\n按<font color=red size=3>ctrl+c</font>关闭本地服务器。\n\n**我们以后常用到的<font color=red size=3>Hexo</font>命令：**\n\n- <font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。\n\n- <font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将\"<font color=red size=3>/blog/source/</font>\" 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在\"<font color=red size=3>/blog/public/ </font>\" 路径下)\n\n- <font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)\n- <font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹\n\n# 连接Github与本地 #\n## 一、生成密钥 ##\n\n右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：\n\n    git config --global user.name \"Name\"\n    git config --global user.email \"Email\"\n\n**<font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。**\n\n然后生成密钥：\n\n    ssh-keygen -t rsa -C \"Email\"\n\n\n**<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱**\n\n然后会出现：\n\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n    //到这里可以直接回车将密钥按默认文件进行存储\n\n回车之后：\n\n    Enter passphrase (empty for no passphrase):\n    //这里是要你输入密码，其实不需要输什么密码，直接回车就行\n    Enter same passphrase again:\n\n接下来会有：\n\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    这里是各种字母数字组成的字符串，结尾是你的邮箱\n    The key's randomart image is:\n    这里也是各种字母数字符号组成的字符串\n\n现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：\n\n     clip < ~/.ssh/id_rsa.pub\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png)\n\n## 二、连接Github ##\n在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png)\n\n然后将刚才复制的密钥添加就可以了，像这样：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png)\n\n**本地连接Github**\n\n右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了\n\n    ssh -T git@github.com\n    //注意不要做任何修改\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png)\n\n用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png)\n\n修改最后一行的配置：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type:\n改为：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type: git\n      repository: git@github.com:panakot/panakot.github.io.git\n      branch: master\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png)\n\n切记：\n\n- **<font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址**。\n- **每一个冒号后面都有一个空格。**\n\n# 写文章、发布文章 #\n首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.\n\n    npm i hexo-deployer-git\n\n然后输入下面的命令，新建一篇文章。\n\n    hexo new post \"article title\"\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png)\n\n然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source\\_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png)\n\n编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。\n\n你的博客地址：<font color=red size=3>https://你的用户名.github.io</font>，比如我的是：<https://muyiio.github.io>，现在每个人都可以通过此链接访问你的博客\n\n# MarkDown文章编辑器说明 #\n> 前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source\\_posts </font>文件夹下即可。\n\n <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。\n\n**[点击此处](http://markdownpad.com/download.html \"MarkDown\")下载<font color=red size=3>MarkDown</font>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：**\n\n[《献给写作者的 Markdown 新手指南》](https://www.jianshu.com/p/q81RER/ \"献给写作者的 Markdown 新手指南\") （By 简书）\n\n[《Markdown语法图文全面详解(10分钟学会)》](https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app \"Markdown语法图文全面详解\")（By 黑暗星球）\n\n[《Markdown 语法手册 （完整整理版）》](https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app \"Markdown 语法手册 （完整整理版）\") （By witnessai1）\n\n[《认识与入门 Markdown》](https://sspai.com/post/25137 \"认识与入门 Markdown\")（By Te_Lee）\n\n写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。\n# 配置个性化域名 #\n一顿操作下来，打开我们的博客还是：<font color=red size=3>www.xxx.github.io</font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3>www.xxx.com </font>。\n\n[阿里云](https://www.aliyun.com/ \"阿里云\")和[腾讯云](https://cloud.tencent.com/ \"腾讯云\")都可以，我的是腾讯云，购买域名后首先需要添加解析：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png)\n\n**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png)\n\n**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！\n\n参考资料：\n\n[《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》](https://blog.csdn.net/it_man/article/details/9017307 \"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\")\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png)\n\n**不管在哪个平台购买域名，操作都大同小异，这里说明两点**：\n\n> 如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> https://www.muyiio.com </font>还是<font color=red size=3> https://muyiio.com</font> ，都会自动跳转到<font color=red size=3> https://muyiio.com</font>。\n\n\n> 如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3>www.muyiio.com </font>，那么无论是访问 <font color=red size=3>https://www.muyiio.com</font> 还是 <font color=red size=3>https://muyiio.com </font>，都会自动跳转到 <font color=red size=3>http://www.imuyiio.com</font>。\n\n然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png)\n\n现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png)\n\n现在就可以通过我们的个性化域名：<font color=red size=3>www.xxx.com、xxx.com</font>访问自己的博客了。\n\n# 更换自己喜欢的Hexo主题 #\n点击进入[Hexo主题专栏](https://hexo.io/themes/ \"Hexo主题专栏\")可以看到很多<font color=red size=3>Hexo</font>主题：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png)\n\n推荐：\n\n[几个好用的hexo主题](https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app \"几个好用的hexo主题\") (By fail_perfectly)\n\n这里我们以[Bean Tech](http://huangxuan.me/ \"Bean Tech\")主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png)\n\n点击进入主题的<font color=red size=3>GitHub</font>地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png)\n\n复制该项目地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png)\n\n然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    $ git clone 此处填写你刚才复制的主题地址\n\n以我们刚才复制的为例：\n\n    $ git clone https://github.com/Huxpro/huxpro.github.io\n\n下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），**再次注意冒号后面有一个空格！**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png)\n\n现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    hexo clean\n    hexo g\n    hexo d\n\n现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery\\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。\n\n\n# 我的博客源代码 #\n**我的博客源代码地址：<https://github.com/MUYIio/hexo-themes-matery>，有心的话可以给个<font color=red size=3>Star&Fork</font>。**\n\n下载源代码：git clone git@github.com:MUYIio/hexo-themes-matery.git\n\n\n\n在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。\n\n使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。\n\n\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n# 结语 #\n初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。\n\n文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！\n","source":"_posts/1.md","raw":"---\ntitle: Github + Hexo 搭建个人博客超详细教程\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-18 21:17:35\npassword:\nsummary: 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习。\ntags:\n- Github\n- Hexo\n- 博客搭建\ncategories:\n- Blog\n---\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png)\n\n<font color=magenta size=4>**在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~**</font>\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png)\n\n# 前言 #\n- 作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！\n\n- 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。\n- **为什么要搭建自己的博客？可以看看这三篇文章：**\n\n[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/ \"为什么你应该（从现在开始就）写博客\")   (By 刘未鹏 | Mind Hacks)\n\n[《为什么要自建博客？》](https://www.zhihu.com/question/19916345 \"为什么要自建博客？\")   (By 知乎)\n\n[《我为什么写博客》](https://www.cnblogs.com/jhzhu/p/3893297.html \"我为什么写博客\") （By 知明所以）\n\n\n我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。\n\n## 本文目录 ##\n- **快速搭建**\n- 安装<font color=red size=3>Node.js</font>\n- 添加国内镜像\n- 安装<font color=red size=3>Git </font>\n- 注册<font color=red size=3>Github</font>账号\n- 创建<font color=red size=3>Git</font>仓库\n- 安装<font color=red size=3>Hexo</font> \n- 配置本地<font color=red size=3>Hexo</font>\n- 连接<font color=red size=3>Github</font>与本地 \n- 写文章、发布文章 \n- <font color=red size=3>MarkDown</font>文章编辑器说明\n- 配置个性化域名\n- 更换自己喜欢的<font color=red size=3>Hexo</font>主题\n- 我的博客源代码\n- 结语\n\n----\n\n# 快速搭建 #\n有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。\n\n在这里以我的博客为例。\n\n## 一、下载博客源代码 ##\n\n大家可以直接素质二连，<font color=red size=3>Star&Fork</font>我的博客源代码：<https://github.com/MUYIio/hexo-themes-matery>，这里我给出两种下载方法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png)\n\n**第一种**：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（**不推荐**）\n\n**第二种**：如果你已经安装了[Git](https://git-scm.com/download/win \"Git\")，就可以右键单击<font color=red size=3>Come Bash Here</font>运行\n\n\n\n```bash\ngit clone git@github.com:MUYIio/hexo-themes-matery.git\n```\n\n\n\n将所有文件下载到本地，这个复杂一点。\n\n## 二、修改博客文档配置 ##\n\n首先将我们下载的博客源代码解压，然后修改主要配置：\n\n- 根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。\n- 根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。\n- 根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。\n- 主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。\n\n我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。\n\n最后一步，**本地的运行环境还是需要搭建好的**，跟着下文操作到连接Github与本地，环境就算是搭建完成。\n\n**本地环境搭建好之后会生成的文件：**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png)\n\n然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png)\n\n然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：\n\n    hexo clean\n    hexo g\n    hexo d\n\n# 安装Node.js #\n了解一下什么是<font color=red size=3>Node.js</font>：\n\n> <font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。\n\n需要用到的命令：\n        \n    $ git --version\n    $ node -v\n    $ npm -v\n\n[点击此处](https://nodejs.org/en/download/ \"Node.js\")进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png)\n\n检验是否安装成功：\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png)\n\n# 添加国内镜像 #\n这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：\n\n    npm config set registry https://registry.npm.taobao.org\n\n# 安装Git #\n> <font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。\n\n[点击此处](https://git-scm.com/download/win \"Git\")进入Git官网下载相应版本，默认安装即可。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png)\n\n参考资料：[《如何在windows下安装GIT》](https://www.cnblogs.com/jytx/p/5602927.html \"如何在windows下安装GIT\") (By 俊雨廷休)\n\n检验是否安装成功：\n\n安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功\n\n    git --version\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png)\n\n# 注册Github账号 #\n\n<font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，[点击此处](https://github.com/ \"Github\")进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。\n\n# 创建git仓库 #\n登录<font color=red size=3>Github</font>创建一个仓库\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png)\n\n如下图所示，**输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png)\n\n选择一个自己喜欢的主题：\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png)\n\n# 安装Hexo #\n> <font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。\n\n选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装\n\n    $ npm install hexo-cli -g\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png)\n\n输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。\n\n# 配置本地hexo #\n还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。\n\n    hexo init\n    npm install\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png)\n\n初始化成功生成的文件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png)\n\n接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<http://localhost:4000/>，就可以预览我们的博客啦，如图：\n\n显示以下信息说明操作正确：\n\n```INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.```\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png)\n\n按<font color=red size=3>ctrl+c</font>关闭本地服务器。\n\n**我们以后常用到的<font color=red size=3>Hexo</font>命令：**\n\n- <font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。\n\n- <font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将\"<font color=red size=3>/blog/source/</font>\" 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在\"<font color=red size=3>/blog/public/ </font>\" 路径下)\n\n- <font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)\n- <font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹\n\n# 连接Github与本地 #\n## 一、生成密钥 ##\n\n右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：\n\n    git config --global user.name \"Name\"\n    git config --global user.email \"Email\"\n\n**<font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。**\n\n然后生成密钥：\n\n    ssh-keygen -t rsa -C \"Email\"\n\n\n**<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱**\n\n然后会出现：\n\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n    //到这里可以直接回车将密钥按默认文件进行存储\n\n回车之后：\n\n    Enter passphrase (empty for no passphrase):\n    //这里是要你输入密码，其实不需要输什么密码，直接回车就行\n    Enter same passphrase again:\n\n接下来会有：\n\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    这里是各种字母数字组成的字符串，结尾是你的邮箱\n    The key's randomart image is:\n    这里也是各种字母数字符号组成的字符串\n\n现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：\n\n     clip < ~/.ssh/id_rsa.pub\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png)\n\n## 二、连接Github ##\n在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png)\n\n然后将刚才复制的密钥添加就可以了，像这样：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png)\n\n**本地连接Github**\n\n右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了\n\n    ssh -T git@github.com\n    //注意不要做任何修改\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png)\n\n用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png)\n\n修改最后一行的配置：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type:\n改为：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type: git\n      repository: git@github.com:panakot/panakot.github.io.git\n      branch: master\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png)\n\n切记：\n\n- **<font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址**。\n- **每一个冒号后面都有一个空格。**\n\n# 写文章、发布文章 #\n首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.\n\n    npm i hexo-deployer-git\n\n然后输入下面的命令，新建一篇文章。\n\n    hexo new post \"article title\"\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png)\n\n然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source\\_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png)\n\n编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。\n\n你的博客地址：<font color=red size=3>https://你的用户名.github.io</font>，比如我的是：<https://muyiio.github.io>，现在每个人都可以通过此链接访问你的博客\n\n# MarkDown文章编辑器说明 #\n> 前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source\\_posts </font>文件夹下即可。\n\n <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。\n\n**[点击此处](http://markdownpad.com/download.html \"MarkDown\")下载<font color=red size=3>MarkDown</font>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：**\n\n[《献给写作者的 Markdown 新手指南》](https://www.jianshu.com/p/q81RER/ \"献给写作者的 Markdown 新手指南\") （By 简书）\n\n[《Markdown语法图文全面详解(10分钟学会)》](https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app \"Markdown语法图文全面详解\")（By 黑暗星球）\n\n[《Markdown 语法手册 （完整整理版）》](https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app \"Markdown 语法手册 （完整整理版）\") （By witnessai1）\n\n[《认识与入门 Markdown》](https://sspai.com/post/25137 \"认识与入门 Markdown\")（By Te_Lee）\n\n写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。\n# 配置个性化域名 #\n一顿操作下来，打开我们的博客还是：<font color=red size=3>www.xxx.github.io</font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3>www.xxx.com </font>。\n\n[阿里云](https://www.aliyun.com/ \"阿里云\")和[腾讯云](https://cloud.tencent.com/ \"腾讯云\")都可以，我的是腾讯云，购买域名后首先需要添加解析：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png)\n\n**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png)\n\n**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！\n\n参考资料：\n\n[《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》](https://blog.csdn.net/it_man/article/details/9017307 \"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\")\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png)\n\n**不管在哪个平台购买域名，操作都大同小异，这里说明两点**：\n\n> 如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> https://www.muyiio.com </font>还是<font color=red size=3> https://muyiio.com</font> ，都会自动跳转到<font color=red size=3> https://muyiio.com</font>。\n\n\n> 如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3>www.muyiio.com </font>，那么无论是访问 <font color=red size=3>https://www.muyiio.com</font> 还是 <font color=red size=3>https://muyiio.com </font>，都会自动跳转到 <font color=red size=3>http://www.imuyiio.com</font>。\n\n然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png)\n\n现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png)\n\n现在就可以通过我们的个性化域名：<font color=red size=3>www.xxx.com、xxx.com</font>访问自己的博客了。\n\n# 更换自己喜欢的Hexo主题 #\n点击进入[Hexo主题专栏](https://hexo.io/themes/ \"Hexo主题专栏\")可以看到很多<font color=red size=3>Hexo</font>主题：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png)\n\n推荐：\n\n[几个好用的hexo主题](https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app \"几个好用的hexo主题\") (By fail_perfectly)\n\n这里我们以[Bean Tech](http://huangxuan.me/ \"Bean Tech\")主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png)\n\n点击进入主题的<font color=red size=3>GitHub</font>地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png)\n\n复制该项目地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png)\n\n然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    $ git clone 此处填写你刚才复制的主题地址\n\n以我们刚才复制的为例：\n\n    $ git clone https://github.com/Huxpro/huxpro.github.io\n\n下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），**再次注意冒号后面有一个空格！**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png)\n\n现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    hexo clean\n    hexo g\n    hexo d\n\n现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery\\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。\n\n\n# 我的博客源代码 #\n**我的博客源代码地址：<https://github.com/MUYIio/hexo-themes-matery>，有心的话可以给个<font color=red size=3>Star&Fork</font>。**\n\n下载源代码：git clone git@github.com:MUYIio/hexo-themes-matery.git\n\n\n\n在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。\n\n使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。\n\n\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n# 结语 #\n初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。\n\n文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！\n","slug":"1","published":1,"updated":"2020-02-18T13:17:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9p2f074000ga8uu7lsybth4","content":"<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png\" alt=\"\"></p>\n<p><font color=magenta size=4><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png\" alt=\"\"></p>\n<h1>前言</h1>\n<ul>\n<li>\n<p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p>\n</li>\n<li>\n<p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p>\n</li>\n<li>\n<p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p>\n</li>\n</ul>\n<p><a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" title=\"为什么你应该（从现在开始就）写博客\">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p>\n<p><a href=\"https://www.zhihu.com/question/19916345\" title=\"为什么要自建博客？\">《为什么要自建博客？》</a>   (By 知乎)</p>\n<p><a href=\"https://www.cnblogs.com/jhzhu/p/3893297.html\" title=\"我为什么写博客\">《我为什么写博客》</a> （By 知明所以）</p>\n<p>我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p>\n<h2 id=\"本文目录\">本文目录</h2>\n<ul>\n<li><strong>快速搭建</strong></li>\n<li>安装<font color=red size=3>Node.js</font></li>\n<li>添加国内镜像</li>\n<li>安装<font color=red size=3>Git </font></li>\n<li>注册<font color=red size=3>Github</font>账号</li>\n<li>创建<font color=red size=3>Git</font>仓库</li>\n<li>安装<font color=red size=3>Hexo</font></li>\n<li>配置本地<font color=red size=3>Hexo</font></li>\n<li>连接<font color=red size=3>Github</font>与本地</li>\n<li>写文章、发布文章</li>\n<li><font color=red size=3>MarkDown</font>文章编辑器说明</li>\n<li>配置个性化域名</li>\n<li>更换自己喜欢的<font color=red size=3>Hexo</font>主题</li>\n<li>我的博客源代码</li>\n<li>结语</li>\n</ul>\n<hr>\n<h1>快速搭建</h1>\n<p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p>\n<p>在这里以我的博客为例。</p>\n<h2 id=\"一、下载博客源代码\">一、下载博客源代码</h2>\n<p>大家可以直接素质二连，<font color=red size=3>Star&amp;Fork</font>我的博客源代码：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png\" alt=\"\"></p>\n<p><strong>第一种</strong>：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p>\n<p><strong>第二种</strong>：如果你已经安装了<a href=\"https://git-scm.com/download/win\" title=\"Git\">Git</a>，就可以右键单击<font color=red size=3>Come Bash Here</font>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:MUYIio/hexo-themes-matery.git</span><br></pre></td></tr></table></figure>\n<p>将所有文件下载到本地，这个复杂一点。</p>\n<h2 id=\"二、修改博客文档配置\">二、修改博客文档配置</h2>\n<p>首先将我们下载的博客源代码解压，然后修改主要配置：</p>\n<ul>\n<li>根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。</li>\n<li>根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。</li>\n<li>根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。</li>\n<li>主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。</li>\n</ul>\n<p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p>\n<p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p>\n<p><strong>本地环境搭建好之后会生成的文件：</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png\" alt=\"\"></p>\n<p>然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png\" alt=\"\"></p>\n<p>然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<h1>安装Node.js</h1>\n<p>了解一下什么是<font color=red size=3>Node.js</font>：</p>\n<blockquote>\n<p><font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p>\n</blockquote>\n<p>需要用到的命令：</p>\n<pre><code>$ git --version\n$ node -v\n$ npm -v\n</code></pre>\n<p><a href=\"https://nodejs.org/en/download/\" title=\"Node.js\">点击此处</a>进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png\" alt=\"\"></p>\n<p>检验是否安装成功：<br>\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png\" alt=\"\"></p>\n<h1>添加国内镜像</h1>\n<p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h1>安装Git</h1>\n<blockquote>\n<p><font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/download/win\" title=\"Git\">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png\" alt=\"\"></p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/jytx/p/5602927.html\" title=\"如何在windows下安装GIT\">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p>\n<p>检验是否安装成功：</p>\n<p>安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功</p>\n<pre><code>git --version\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png\" alt=\"\"></p>\n<h1>注册Github账号</h1>\n<p><font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href=\"https://github.com/\" title=\"Github\">点击此处</a>进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。</p>\n<h1>创建git仓库</h1>\n<p>登录<font color=red size=3>Github</font>创建一个仓库</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png\" alt=\"\"></p>\n<p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png\" alt=\"\"></p>\n<p>选择一个自己喜欢的主题：<br>\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png\" alt=\"\"></p>\n<h1>安装Hexo</h1>\n<blockquote>\n<p><font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。</p>\n</blockquote>\n<p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装</p>\n<pre><code>$ npm install hexo-cli -g\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png\" alt=\"\"></p>\n<p>输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p>\n<h1>配置本地hexo</h1>\n<p>还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。</p>\n<pre><code>hexo init\nnpm install\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png\" alt=\"\"></p>\n<p>初始化成功生成的文件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png\" alt=\"\"></p>\n<p>接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p>\n<p>显示以下信息说明操作正确：</p>\n<p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png\" alt=\"\"></p>\n<p>按<font color=red size=3>ctrl+c</font>关闭本地服务器。</p>\n<p><strong>我们以后常用到的<font color=red size=3>Hexo</font>命令：</strong></p>\n<ul>\n<li>\n<p><font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p>\n</li>\n<li>\n<p><font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将&quot;<font color=red size=3>/blog/source/</font>&quot; 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在&quot;<font color=red size=3>/blog/public/ </font>&quot; 路径下)</p>\n</li>\n<li>\n<p><font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)</p>\n</li>\n<li>\n<p><font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹</p>\n</li>\n</ul>\n<h1>连接Github与本地</h1>\n<h2 id=\"一、生成密钥\">一、生成密钥</h2>\n<p>右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：</p>\n<pre><code>git config --global user.name &quot;Name&quot;\ngit config --global user.email &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。</strong></p>\n<p>然后生成密钥：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱</strong></p>\n<p>然后会出现：</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n//到这里可以直接回车将密钥按默认文件进行存储\n</code></pre>\n<p>回车之后：</p>\n<pre><code>Enter passphrase (empty for no passphrase):\n//这里是要你输入密码，其实不需要输什么密码，直接回车就行\nEnter same passphrase again:\n</code></pre>\n<p>接下来会有：</p>\n<pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.\nYour public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\nThe key fingerprint is:\n这里是各种字母数字组成的字符串，结尾是你的邮箱\nThe key's randomart image is:\n这里也是各种字母数字符号组成的字符串\n</code></pre>\n<p>现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p>\n<pre><code> clip &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png\" alt=\"\"></p>\n<h2 id=\"二、连接Github\">二、连接Github</h2>\n<p>在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png\" alt=\"\"></p>\n<p>然后将刚才复制的密钥添加就可以了，像这样：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png\" alt=\"\"></p>\n<p><strong>本地连接Github</strong></p>\n<p>右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p>\n<pre><code>ssh -T git@github.com\n//注意不要做任何修改\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png\" alt=\"\"></p>\n<p>用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png\" alt=\"\"></p>\n<p>修改最后一行的配置：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre>\n<p>改为：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:panakot/panakot.github.io.git\n  branch: master\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png\" alt=\"\"></p>\n<p>切记：</p>\n<ul>\n<li><strong><font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址</strong>。</li>\n<li><strong>每一个冒号后面都有一个空格。</strong></li>\n</ul>\n<h1>写文章、发布文章</h1>\n<p>首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.</p>\n<pre><code>npm i hexo-deployer-git\n</code></pre>\n<p>然后输入下面的命令，新建一篇文章。</p>\n<pre><code>hexo new post &quot;article title&quot;\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png\" alt=\"\"></p>\n<p>然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png\" alt=\"\"></p>\n<p>编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。</p>\n<p>你的博客地址：<font color=red size=3><a href=\"https://xn--6qqv7i14ofosyrb.github.io\">https://你的用户名.github.io</a></font>，比如我的是：<a href=\"https://muyiio.github.io\">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p>\n<h1>MarkDown文章编辑器说明</h1>\n<blockquote>\n<p>前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source_posts </font>文件夹下即可。</p>\n</blockquote>\n<p><font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。</p>\n<p><strong><a href=\"http://markdownpad.com/download.html\" title=\"MarkDown\">点击此处</a>下载<font color=red size=3>MarkDown</font><br>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/q81RER/\" title=\"献给写作者的 Markdown 新手指南\">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p>\n<p><a href=\"https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app\" title=\"Markdown语法图文全面详解\">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p>\n<p><a href=\"https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app\" title=\"Markdown 语法手册 （完整整理版）\">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p>\n<p><a href=\"https://sspai.com/post/25137\" title=\"认识与入门 Markdown\">《认识与入门 Markdown》</a>（By Te_Lee）</p>\n<p>写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。</p>\n<h1>配置个性化域名</h1>\n<p>一顿操作下来，打开我们的博客还是：<font color=red size=3><a href=\"http://www.xxx.github.io\">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3><a href=\"http://www.xxx.com\">www.xxx.com</a> </font>。</p>\n<p><a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>和<a href=\"https://cloud.tencent.com/\" title=\"腾讯云\">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png\" alt=\"\"></p>\n<p>**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3><a href=\"http://muyiio.github.io\">muyiio.github.io</a></font>），保存之后域名解析就完成了！</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png\" alt=\"\"></p>\n<p>**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping <a href=\"http://muyiio.github.io\">muyiio.github.io</a></font>），保存之后域名解析就完成了！</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/it_man/article/details/9017307\" title=\"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png\" alt=\"\"></p>\n<p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p>\n<blockquote>\n<p>如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://muyio.com\">muyio.com</a></font>，那么无论是访问<font color=red size=3> <a href=\"https://www.muyiio.com\">https://www.muyiio.com</a> </font>还是<font color=red size=3> <a href=\"https://muyiio.com\">https://muyiio.com</a></font> ，都会自动跳转到<font color=red size=3> <a href=\"https://muyiio.com\">https://muyiio.com</a></font>。</p>\n</blockquote>\n<blockquote>\n<p>如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://www.muyiio.com\">www.muyiio.com</a> </font>，那么无论是访问 <font color=red size=3><a href=\"https://www.muyiio.com\">https://www.muyiio.com</a></font> 还是 <font color=red size=3><a href=\"https://muyiio.com\">https://muyiio.com</a> </font>，都会自动跳转到 <font color=red size=3><a href=\"http://www.imuyiio.com\">http://www.imuyiio.com</a></font>。</p>\n</blockquote>\n<p>然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png\" alt=\"\"></p>\n<p>现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png\" alt=\"\"></p>\n<p>现在就可以通过我们的个性化域名：<font color=red size=3><a href=\"http://www.xxx.com\">www.xxx.com</a>、<a href=\"http://xxx.com\">xxx.com</a></font>访问自己的博客了。</p>\n<h1>更换自己喜欢的Hexo主题</h1>\n<p>点击进入<a href=\"https://hexo.io/themes/\" title=\"Hexo主题专栏\">Hexo主题专栏</a>可以看到很多<font color=red size=3>Hexo</font>主题：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png\" alt=\"\"></p>\n<p>推荐：</p>\n<p><a href=\"https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app\" title=\"几个好用的hexo主题\">几个好用的hexo主题</a> (By fail_perfectly)</p>\n<p>这里我们以<a href=\"http://huangxuan.me/\" title=\"Bean Tech\">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png\" alt=\"\"></p>\n<p>点击进入主题的<font color=red size=3>GitHub</font>地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png\" alt=\"\"></p>\n<p>复制该项目地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png\" alt=\"\"></p>\n<p>然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>$ git clone 此处填写你刚才复制的主题地址\n</code></pre>\n<p>以我们刚才复制的为例：</p>\n<pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io\n</code></pre>\n<p>下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png\" alt=\"\"></p>\n<p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。</p>\n<h1>我的博客源代码</h1>\n<p><strong>我的博客源代码地址：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color=red size=3>Star&amp;Fork</font>。</strong></p>\n<p>下载源代码：git clone <a href=\"mailto:git@github.com\">git@github.com</a>:MUYIio/hexo-themes-matery.git</p>\n<p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p>\n<p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p>\n<h2 id=\"table-tr-td-bgcolor-orange\"><table><tr><td bgcolor=orange></h2>\n</td></tr></table>\n<h1>结语</h1>\n<p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p>\n<p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png\" alt=\"\"></p>\n<p><font color=magenta size=4><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png\" alt=\"\"></p>\n<h1>前言</h1>\n<ul>\n<li>\n<p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p>\n</li>\n<li>\n<p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p>\n</li>\n<li>\n<p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p>\n</li>\n</ul>\n<p><a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" title=\"为什么你应该（从现在开始就）写博客\">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p>\n<p><a href=\"https://www.zhihu.com/question/19916345\" title=\"为什么要自建博客？\">《为什么要自建博客？》</a>   (By 知乎)</p>\n<p><a href=\"https://www.cnblogs.com/jhzhu/p/3893297.html\" title=\"我为什么写博客\">《我为什么写博客》</a> （By 知明所以）</p>\n<p>我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p>\n<h2 id=\"本文目录\">本文目录</h2>\n<ul>\n<li><strong>快速搭建</strong></li>\n<li>安装<font color=red size=3>Node.js</font></li>\n<li>添加国内镜像</li>\n<li>安装<font color=red size=3>Git </font></li>\n<li>注册<font color=red size=3>Github</font>账号</li>\n<li>创建<font color=red size=3>Git</font>仓库</li>\n<li>安装<font color=red size=3>Hexo</font></li>\n<li>配置本地<font color=red size=3>Hexo</font></li>\n<li>连接<font color=red size=3>Github</font>与本地</li>\n<li>写文章、发布文章</li>\n<li><font color=red size=3>MarkDown</font>文章编辑器说明</li>\n<li>配置个性化域名</li>\n<li>更换自己喜欢的<font color=red size=3>Hexo</font>主题</li>\n<li>我的博客源代码</li>\n<li>结语</li>\n</ul>\n<hr>\n<h1>快速搭建</h1>\n<p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p>\n<p>在这里以我的博客为例。</p>\n<h2 id=\"一、下载博客源代码\">一、下载博客源代码</h2>\n<p>大家可以直接素质二连，<font color=red size=3>Star&amp;Fork</font>我的博客源代码：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png\" alt=\"\"></p>\n<p><strong>第一种</strong>：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p>\n<p><strong>第二种</strong>：如果你已经安装了<a href=\"https://git-scm.com/download/win\" title=\"Git\">Git</a>，就可以右键单击<font color=red size=3>Come Bash Here</font>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:MUYIio/hexo-themes-matery.git</span><br></pre></td></tr></table></figure>\n<p>将所有文件下载到本地，这个复杂一点。</p>\n<h2 id=\"二、修改博客文档配置\">二、修改博客文档配置</h2>\n<p>首先将我们下载的博客源代码解压，然后修改主要配置：</p>\n<ul>\n<li>根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。</li>\n<li>根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。</li>\n<li>根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。</li>\n<li>主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。</li>\n</ul>\n<p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p>\n<p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p>\n<p><strong>本地环境搭建好之后会生成的文件：</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png\" alt=\"\"></p>\n<p>然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png\" alt=\"\"></p>\n<p>然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<h1>安装Node.js</h1>\n<p>了解一下什么是<font color=red size=3>Node.js</font>：</p>\n<blockquote>\n<p><font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p>\n</blockquote>\n<p>需要用到的命令：</p>\n<pre><code>$ git --version\n$ node -v\n$ npm -v\n</code></pre>\n<p><a href=\"https://nodejs.org/en/download/\" title=\"Node.js\">点击此处</a>进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png\" alt=\"\"></p>\n<p>检验是否安装成功：<br>\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png\" alt=\"\"></p>\n<h1>添加国内镜像</h1>\n<p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h1>安装Git</h1>\n<blockquote>\n<p><font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/download/win\" title=\"Git\">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png\" alt=\"\"></p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/jytx/p/5602927.html\" title=\"如何在windows下安装GIT\">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p>\n<p>检验是否安装成功：</p>\n<p>安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功</p>\n<pre><code>git --version\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png\" alt=\"\"></p>\n<h1>注册Github账号</h1>\n<p><font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href=\"https://github.com/\" title=\"Github\">点击此处</a>进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。</p>\n<h1>创建git仓库</h1>\n<p>登录<font color=red size=3>Github</font>创建一个仓库</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png\" alt=\"\"></p>\n<p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png\" alt=\"\"></p>\n<p>选择一个自己喜欢的主题：<br>\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png\" alt=\"\"></p>\n<h1>安装Hexo</h1>\n<blockquote>\n<p><font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。</p>\n</blockquote>\n<p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装</p>\n<pre><code>$ npm install hexo-cli -g\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png\" alt=\"\"></p>\n<p>输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p>\n<h1>配置本地hexo</h1>\n<p>还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。</p>\n<pre><code>hexo init\nnpm install\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png\" alt=\"\"></p>\n<p>初始化成功生成的文件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png\" alt=\"\"></p>\n<p>接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p>\n<p>显示以下信息说明操作正确：</p>\n<p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png\" alt=\"\"></p>\n<p>按<font color=red size=3>ctrl+c</font>关闭本地服务器。</p>\n<p><strong>我们以后常用到的<font color=red size=3>Hexo</font>命令：</strong></p>\n<ul>\n<li>\n<p><font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p>\n</li>\n<li>\n<p><font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将&quot;<font color=red size=3>/blog/source/</font>&quot; 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在&quot;<font color=red size=3>/blog/public/ </font>&quot; 路径下)</p>\n</li>\n<li>\n<p><font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)</p>\n</li>\n<li>\n<p><font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹</p>\n</li>\n</ul>\n<h1>连接Github与本地</h1>\n<h2 id=\"一、生成密钥\">一、生成密钥</h2>\n<p>右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：</p>\n<pre><code>git config --global user.name &quot;Name&quot;\ngit config --global user.email &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。</strong></p>\n<p>然后生成密钥：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱</strong></p>\n<p>然后会出现：</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n//到这里可以直接回车将密钥按默认文件进行存储\n</code></pre>\n<p>回车之后：</p>\n<pre><code>Enter passphrase (empty for no passphrase):\n//这里是要你输入密码，其实不需要输什么密码，直接回车就行\nEnter same passphrase again:\n</code></pre>\n<p>接下来会有：</p>\n<pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.\nYour public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\nThe key fingerprint is:\n这里是各种字母数字组成的字符串，结尾是你的邮箱\nThe key's randomart image is:\n这里也是各种字母数字符号组成的字符串\n</code></pre>\n<p>现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p>\n<pre><code> clip &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png\" alt=\"\"></p>\n<h2 id=\"二、连接Github\">二、连接Github</h2>\n<p>在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png\" alt=\"\"></p>\n<p>然后将刚才复制的密钥添加就可以了，像这样：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png\" alt=\"\"></p>\n<p><strong>本地连接Github</strong></p>\n<p>右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p>\n<pre><code>ssh -T git@github.com\n//注意不要做任何修改\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png\" alt=\"\"></p>\n<p>用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png\" alt=\"\"></p>\n<p>修改最后一行的配置：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre>\n<p>改为：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:panakot/panakot.github.io.git\n  branch: master\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png\" alt=\"\"></p>\n<p>切记：</p>\n<ul>\n<li><strong><font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址</strong>。</li>\n<li><strong>每一个冒号后面都有一个空格。</strong></li>\n</ul>\n<h1>写文章、发布文章</h1>\n<p>首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.</p>\n<pre><code>npm i hexo-deployer-git\n</code></pre>\n<p>然后输入下面的命令，新建一篇文章。</p>\n<pre><code>hexo new post &quot;article title&quot;\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png\" alt=\"\"></p>\n<p>然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png\" alt=\"\"></p>\n<p>编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。</p>\n<p>你的博客地址：<font color=red size=3><a href=\"https://xn--6qqv7i14ofosyrb.github.io\">https://你的用户名.github.io</a></font>，比如我的是：<a href=\"https://muyiio.github.io\">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p>\n<h1>MarkDown文章编辑器说明</h1>\n<blockquote>\n<p>前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source_posts </font>文件夹下即可。</p>\n</blockquote>\n<p><font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。</p>\n<p><strong><a href=\"http://markdownpad.com/download.html\" title=\"MarkDown\">点击此处</a>下载<font color=red size=3>MarkDown</font><br>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/q81RER/\" title=\"献给写作者的 Markdown 新手指南\">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p>\n<p><a href=\"https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app\" title=\"Markdown语法图文全面详解\">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p>\n<p><a href=\"https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app\" title=\"Markdown 语法手册 （完整整理版）\">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p>\n<p><a href=\"https://sspai.com/post/25137\" title=\"认识与入门 Markdown\">《认识与入门 Markdown》</a>（By Te_Lee）</p>\n<p>写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。</p>\n<h1>配置个性化域名</h1>\n<p>一顿操作下来，打开我们的博客还是：<font color=red size=3><a href=\"http://www.xxx.github.io\">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3><a href=\"http://www.xxx.com\">www.xxx.com</a> </font>。</p>\n<p><a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>和<a href=\"https://cloud.tencent.com/\" title=\"腾讯云\">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png\" alt=\"\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png\" alt=\"\"></p>\n<p>**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3><a href=\"http://muyiio.github.io\">muyiio.github.io</a></font>），保存之后域名解析就完成了！</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png\" alt=\"\"></p>\n<p>**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping <a href=\"http://muyiio.github.io\">muyiio.github.io</a></font>），保存之后域名解析就完成了！</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/it_man/article/details/9017307\" title=\"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png\" alt=\"\"></p>\n<p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p>\n<blockquote>\n<p>如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://muyio.com\">muyio.com</a></font>，那么无论是访问<font color=red size=3> <a href=\"https://www.muyiio.com\">https://www.muyiio.com</a> </font>还是<font color=red size=3> <a href=\"https://muyiio.com\">https://muyiio.com</a></font> ，都会自动跳转到<font color=red size=3> <a href=\"https://muyiio.com\">https://muyiio.com</a></font>。</p>\n</blockquote>\n<blockquote>\n<p>如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://www.muyiio.com\">www.muyiio.com</a> </font>，那么无论是访问 <font color=red size=3><a href=\"https://www.muyiio.com\">https://www.muyiio.com</a></font> 还是 <font color=red size=3><a href=\"https://muyiio.com\">https://muyiio.com</a> </font>，都会自动跳转到 <font color=red size=3><a href=\"http://www.imuyiio.com\">http://www.imuyiio.com</a></font>。</p>\n</blockquote>\n<p>然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png\" alt=\"\"></p>\n<p>现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png\" alt=\"\"></p>\n<p>现在就可以通过我们的个性化域名：<font color=red size=3><a href=\"http://www.xxx.com\">www.xxx.com</a>、<a href=\"http://xxx.com\">xxx.com</a></font>访问自己的博客了。</p>\n<h1>更换自己喜欢的Hexo主题</h1>\n<p>点击进入<a href=\"https://hexo.io/themes/\" title=\"Hexo主题专栏\">Hexo主题专栏</a>可以看到很多<font color=red size=3>Hexo</font>主题：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png\" alt=\"\"></p>\n<p>推荐：</p>\n<p><a href=\"https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app\" title=\"几个好用的hexo主题\">几个好用的hexo主题</a> (By fail_perfectly)</p>\n<p>这里我们以<a href=\"http://huangxuan.me/\" title=\"Bean Tech\">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png\" alt=\"\"></p>\n<p>点击进入主题的<font color=red size=3>GitHub</font>地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png\" alt=\"\"></p>\n<p>复制该项目地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png\" alt=\"\"></p>\n<p>然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>$ git clone 此处填写你刚才复制的主题地址\n</code></pre>\n<p>以我们刚才复制的为例：</p>\n<pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io\n</code></pre>\n<p>下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png\" alt=\"\"></p>\n<p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。</p>\n<h1>我的博客源代码</h1>\n<p><strong>我的博客源代码地址：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color=red size=3>Star&amp;Fork</font>。</strong></p>\n<p>下载源代码：git clone <a href=\"mailto:git@github.com\">git@github.com</a>:MUYIio/hexo-themes-matery.git</p>\n<p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p>\n<p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p>\n<h2 id=\"table-tr-td-bgcolor-orange\"><table><tr><td bgcolor=orange></h2>\n</td></tr></table>\n<h1>结语</h1>\n<p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p>\n<p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>\n"},{"title":"Hexo-Theme-LiveMyLife","catalog":true,"date":"2020-04-16T18:34:17.000Z","subtitle":"A succinct hexo theme...","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n#### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","source":"_posts/cn/Hexo-Theme-LiveMyLife.md","raw":"---\ntitle: Hexo-Theme-LiveMyLife\ncatalog: true\ndate: 2020-04-17 02:34:17\nsubtitle: A succinct hexo theme...\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n- Hexo-Theme-LiveMyLife\ncategories:\n- Hexo-Theme-LiveMyLife\n---\n\n> 移植 [Hux Blog](https://github.com/Huxpro/huxpro.github.io) 的主题，感谢 [Huxpro](https://github.com/Huxpro) 设计了如此完美的主题。\n>\n> 由 [Vincent](https://v-vincen.github.io/) 创建的 LiveMyLife 的主题修改来源 [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech)，参考主题 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)，感谢 [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu)。\n>   \n\n## 仓库\nGithub 仓库地址：https://github.com/V-Vincen/hexo-theme-livemylife\nGitee 仓库地址：https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [预览 LiveMyLife 博客 ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## 快速开始\n为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！\n\n让我们开始!!!\n\n### 安装 Node.js 和 Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows：下载 & 安装 Node.js。-> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows：下载 & 安装 Git。-> [Git](https://git-scm.com/download/win)\n\n### 安装 Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> 什么是 [Hexo](https://hexo.io/docs/)?\n>\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 设置你的博客\n```shell\n$ hexo init blog\n```\n> 更多的命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 主题使用\n### 初始化\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### 设置主题\n修改 `theme` 属性值，在 `_config.yml` 配置文件中。\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### 启动服务\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n启动本地服务器。 默认访问地址 `http://localhost:4000/`。\n> 更多命令 -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## 配置\n使用您自己的信息修改 `_config.yml` 配置文件，尤其是以下部分：\n\n### 网址信息配置\n将以下信息替换为您自己的信息。\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### 语言国际化 (i18n)\n若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-> 文档：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English 预览：*\n\n![en](langen.png)\n\n*Chinese 预览：*\n\n![cn](langcn.png)\n\n\n### CDN 配置\nJsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-> 文档：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**注意：** Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-> 文档：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### 站点设置\n将自定义图片放在 `img` 目录中。\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### 网站图标设置\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### 签名设置\n将您的签名图片复制到 `<root>/img/signature` 并修改配置文件 `_config.yml`。\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> 如何制作签名 -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### 波浪设置\n```yml\n# Wave settings\nwave: true\n```\n*案例：*\n\n![wave](wave.png)\n\n\n### 社交网络服务设置\n如果您不想显示它，则可以直接将其删除。\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### 侧边栏设置\n将您的头像复制到 `<root>/img/avatar` 并修改配置文件 `_config.yml`。\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### 评论系统设置\nHexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。\n\n#### Gitalk\nGitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 [Gitalk](https://github.com/gitalk/gitalk) 官方文档。\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 [Gitment](https://github.com/imsun/gitment) 官方文档。\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\n如果你想要使用 [Disqus](https://disqus.com/) 评论系统，则必须有代理。\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### 站点分析设置\n如何配置站点分析? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### 站点地图设置\n如何配置站点地图? -> 文档：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n### 置顶图标设置\n我使用的置顶图标是键头，你可以在 `sourcre/css/images` 目录下替换你自己想要的图标。\n\n### 文章标签\n您可以选择是否显示博文标签。\n```yml\nhome_posts_tag: true\n```\n*案例：*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown 渲染器\n我使用的 markdown 渲染引擎插件是 [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it)。\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### 安装 Mathjax（数学公式渲染器）\n要安装 Mathjax，请单击 [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/)  以获取详细的教程。\n\n### Anchorjs（锚点）设置\n如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 `layout/_partial/anchorjs.ejs` 目录下进行更改。如何使用 anchorjs，请参阅 [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) 以获取详细示例。\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### 博文置顶\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性`sticky: number` 配置，文章按此数字排序。\n*案例：*\n\n![top](top.png)\n\n### 文章字数统计设置\nWordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 [WordCount](https://github.com/willin/hexo-wordcount) 文档。\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi（不蒜子）设置\nBusuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) 文档。\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### 顶部滚动进度条设置\n```yml\n# top scroll progress\nscroll: true\n```\n\n### 著作权声明设置\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### 社交分享博文设置\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer（图片预览）设置\nViewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 [demo](https://fengyuanchen.github.io/viewer/)。有关详细配置，请参见 [Viewer](https://github.com/fengyuanchen/viewer) 官方文档。 如果要修改 Viewer 的 [options](https://github.com/fengyuanchen/viewerjs#options) 设置，则可以到 `sourcre/js/viewer/pic-viewer.js` 目录下修改。\n```yml\n# Viewer config\nviewer: true\n```\n\n#### 主题模式设置\nHexo-Theme-LiveMyLife 主题暂时支持两种主题模式。\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*明亮主题模式预览：*\n\n![light theme](light.png)\n\n*黑暗主题模式预览：*\n\n![dark theme](dark.png)\n\n\n### 鼠标点击效果设置\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*鼠标点击效果预览：*\n\n![mouseclick](mouseclick.png)\n\n\n### 背景绸带效果设置\n```yml\nribbonDynamic: true\n```\n*背景绸带效果预览：*\n\n![ribbon](ribbon.png)\n\n\n### 背景线画布效果设置\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*背景线画布效果预览：*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### 搜索设置\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter（聊天室）\nGitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 [Gitter](https://gitter.im/) 官方文档。\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### 部署\n替换为你自己的仓库地址。\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo 常用命令\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## 有一个好的体验 ^\\_^\n如果你喜欢该主题，请 [Star](https://github.com/V-Vincen/hexo-theme-livemylife)！不胜感激你的 [Follow](https://github.com/V-Vincen)！比心！\n","slug":"Hexo-Theme-LiveMyLife","published":1,"updated":"2020-04-16T18:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9p2f077000ta8uubdq85gpk","content":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"主题模式设置\">主题模式设置</h4>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>移植 <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a> 的主题，感谢 <a href=\"https://github.com/Huxpro\">Huxpro</a> 设计了如此完美的主题。</p>\n<p>由 <a href=\"https://v-vincen.github.io/\">Vincent</a> 创建的 LiveMyLife 的主题修改来源 <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a>，参考主题 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>，感谢 <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>。</p>\n</blockquote>\n<h2 id=\"仓库\">仓库</h2>\n<p>Github 仓库地址：<a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee 仓库地址：<a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"预览-LiveMyLife-博客-➾\"><a href=\"https://v-vincen.github.io/\">预览 LiveMyLife 博客 ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"快速开始\">快速开始</h2>\n<p>为了方便起见，我发布了整个项目，因此您可以按照下面的说明进行操作，然后就可以轻松自定义您自己的博客！</p>\n<p>让我们开始!!!</p>\n<h3 id=\"安装-Node-js-和-Git\">安装 Node.js 和 Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows：下载 &amp; 安装 Node.js。-&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows：下载 &amp; 安装 Git。-&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"安装-Hexo\">安装 Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>什么是 <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"设置你的博客\">设置你的博客</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多的命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"主题使用\">主题使用</h2>\n<h3 id=\"初始化\">初始化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置主题\">设置主题</h3>\n<p>修改 <code>theme</code> 属性值，在 <code>_config.yml</code> 配置文件中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\">启动服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务器。 默认访问地址 <code>http://localhost:4000/</code>。</p>\n<blockquote>\n<p>更多命令 -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<p>使用您自己的信息修改 <code>_config.yml</code> 配置文件，尤其是以下部分：</p>\n<h3 id=\"网址信息配置\">网址信息配置</h3>\n<p>将以下信息替换为您自己的信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语言国际化-i18n\">语言国际化 (i18n)</h3>\n<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English 预览：</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese 预览：</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-配置\">CDN 配置</h3>\n<p>JsDelivr JsDelivr是一种免费，快速，可靠和自动化的CDN，可用于开源。如何使用 Jsdelivr？-&gt; 文档：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> Hexo-theme-livemylife 主题中有大量的 css、js 和 images，为了提高访问速度，主题中所有资源文件都使用了 JsDelivr CDN（内容分发）。但仅适用于 Github Pages 部署方式。-&gt; 文档：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"站点设置\">站点设置</h3>\n<p>将自定义图片放在 <code>img</code> 目录中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"网站图标设置\">网站图标设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"签名设置\">签名设置</h3>\n<p>将您的签名图片复制到 <code>&lt;root&gt;/img/signature</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如何制作签名 -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"波浪设置\">波浪设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"社交网络服务设置\">社交网络服务设置</h3>\n<p>如果您不想显示它，则可以直接将其删除。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏设置\">侧边栏设置</h3>\n<p>将您的头像复制到 <code>&lt;root&gt;/img/avatar</code> 并修改配置文件 <code>_config.yml</code>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论系统设置\">评论系统设置</h3>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持三种评论方式。我使用 gitalk 为默认评论系统。</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk 是基于 GitHub Issue 和 Preact 的现代化的评论组件。 有关详细的配置方法，请参考 <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment 是一个基于 GitHub Issues 的评论系统，可以在前端使用它，而无需任何服务器端实现。有关详细的配置方法，请参见 <a href=\"https://github.com/imsun/gitment\">Gitment</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>如果你想要使用 <a href=\"https://disqus.com/\">Disqus</a> 评论系统，则必须有代理。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点分析设置\">站点分析设置</h3>\n<p>如何配置站点分析? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"站点地图设置\">站点地图设置</h3>\n<p>如何配置站点地图? -&gt; 文档：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"置顶图标设置\">置顶图标设置</h3>\n<p>我使用的置顶图标是键头，你可以在 <code>sourcre/css/images</code> 目录下替换你自己想要的图标。</p>\n<h3 id=\"文章标签\">文章标签</h3>\n<p>您可以选择是否显示博文标签。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>案例：</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-渲染器\">Markdown 渲染器</h3>\n<p>我使用的 markdown 渲染引擎插件是 <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-Mathjax（数学公式渲染器）\">安装 Mathjax（数学公式渲染器）</h3>\n<p>要安装 Mathjax，请单击 <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a>  以获取详细的教程。</p>\n<h3 id=\"Anchorjs（锚点）设置\">Anchorjs（锚点）设置</h3>\n<p>如果你想要更改文章目录标题前部的锚点 “❡”，则可以到 <code>layout/_partial/anchorjs.ejs</code> 目录下进行更改。如何使用 anchorjs，请参阅 <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> 以获取详细示例。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"博文置顶\">博文置顶</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife 主题添加了文章顶部功能，只要在您的 markdown 笔记中添加属性<code>sticky: number</code> 配置，文章按此数字排序。<br>\n<em>案例：</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"文章字数统计设置\">文章字数统计设置</h3>\n<p>WordCount 是 Hexo 的文章字数统计插件. 有关详细的配置方法，请参见 <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi（不蒜子）设置\">Busuanzi（不蒜子）设置</h3>\n<p>Busuanzi 是一个网站流量统计插件。如何使用 Busuanzi，有关详细示例，请参见 <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> 文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶部滚动进度条设置\">顶部滚动进度条设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"著作权声明设置\">著作权声明设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"社交分享博文设置\">社交分享博文设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer（图片预览）设置\">Viewer（图片预览）设置</h3>\n<p>Viewer 是一个简单的 jQuery 图片预览插件. 让我们首先看一个 <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>。有关详细配置，请参见 <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> 官方文档。 如果要修改 Viewer 的 <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> 设置，则可以到 <code>sourcre/js/viewer/pic-viewer.js</code> 目录下修改。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"主题模式设置\">主题模式设置</h4>\n<p>Hexo-Theme-LiveMyLife 主题暂时支持两种主题模式。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>明亮主题模式预览：</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>黑暗主题模式预览：</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"鼠标点击效果设置\">鼠标点击效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>鼠标点击效果预览：</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"背景绸带效果设置\">背景绸带效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>背景绸带效果预览：</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"背景线画布效果设置\">背景线画布效果设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>背景线画布效果预览：</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"搜索设置\">搜索设置</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter（聊天室）\">Gitter（聊天室）</h3>\n<p>Gitter 是一个聊天和网络平台，通过消息、内容和发现，帮助管理、发展和连接社区。 详细配置方法请查看 <a href=\"https://gitter.im/\">Gitter</a> 官方文档。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\">部署</h3>\n<p>替换为你自己的仓库地址。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-常用命令\">Hexo 常用命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"有一个好的体验\">有一个好的体验 ^_^</h2>\n<p>如果你喜欢该主题，请 <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a>！不胜感激你的 <a href=\"https://github.com/V-Vincen\">Follow</a>！比心！</p>\n"},{"title":"Hexo-Theme-LiveMyLife","catalog":true,"date":"2020-04-16T18:34:17.000Z","subtitle":"A succinct hexo theme...","sticky":999,"header-img":"/img/header_img/lml_bg.jpg","_content":"\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This LiveMyLife theme created by [Vincent](https://v-vincen.github.io/) modified from the original Porter [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech) , refer to the Themes of [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu), Thanks [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu).\n>   \n\n## Repo\nGithub Repo: https://github.com/V-Vincen/hexo-theme-livemylife\nGitee Repo: https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [View LiveMyLife Blog ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## Quick Start\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n### Install Node.js and Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows: Download & install Node.js. -> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows: Download & install Git. -> [Git](https://git-scm.com/download/win)\n\n### Install Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> What is [Hexo](https://hexo.io/docs/)?\n>\n> Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.\n\n### Setup your blog\n```shell\n$ hexo init blog\n```\n> More Commands -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## Theme Usage\n### Init\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### Set Theme\nModify the value of `theme`: in `_config.yml`\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### Start the Server\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n```javascript\n// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象\n         function createPerson(name, age) {\n           let Person = new Object();\n           Person.name = name;\n           Person.age = age;\n        return Person;\n         }\n           let person1 = createPerson(\"Lily\", 29);\n           let person2 = createPerson(\"Ming\", 28);\n           console.log(person1.name + person1.age);\n           console.log(person2.name + person2.age);\n\n\n```\nStarts a local server. By default, this is at `http://localhost:4000/`.\n> More Commands -> [Hexo Commands](https://hexo.io/docs/commands)\n\n## Configuration\nModify `_config.yml` file with your own info, Especially the section:\n\n### Site\nReplace the following information with your own.\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### Internationalization (i18n)\nYou can use internationalization to present your site in different languages. -> Docs：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English preview:*\n\n![en](langen.png)\n\n*Chinese preview:*\n\n![cn](langcn.png)\n\n\n### CDN Settings\nJsDelivr is A free CDN for Open Source fast、reliable and automated. How to use Jsdelivr? -> Docs：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**Note:** The theme of Hexo-theme-livemylife has a large number of css、js and images, in order to improve access speed, the theme for all of the resource files are made JsDelivr CDN. But only for Github Pages deployment. -> Docs：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### Site Settings\nPut customized pictures in `img` directory.\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### Favicon Settings\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### Signature Settings\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`.\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> How to create signature -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### Wave Settings\n```yml\n# Wave settings\nwave: true\n```\n*Example:*\n\n![wave](wave.png)\n\n\n### SNS Settings\nIf you don’t want to display it, you can delete it directly.\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### Sidebar Settings\nCopy your avatar image to `<root>/img/avatar` and modify the `_config.yml`:\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### Comment Settings\nHexo-Theme-LiveMyLife temporarily supports three Comments. I use gitalk comment system.\n\n#### Gitalk\nGitalk is a modern comment component based on GitHub Issue and Preact. See [Gitalk](https://github.com/gitalk/gitalk) for detailed configuration method.\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. See [Gitment](https://github.com/imsun/gitment) for detailed configuration method.\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\nIf you want use [Disqus](https://disqus.com/), you must have a circumvention (proxy, clime over the firewall) technology.\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### Analytics Settings\nHow to config analytics? -> Docs：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### Sitemap Settings\nHow to config sitemap? -> Docs：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n\n### Go to top icon Setup\nMy icon is using point, you can change to your own icon at `sourcre/css/images`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n*Example:*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### Install Mathjax\nTo install Mathjax, please click [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/) for a detailed tutorial.\n\n### Anchorjs Settings\nAnd if you want to change the header anchor '❡', you can go to `layout/_partial/anchorjs.ejs` to change it. How to use anchorjs, see [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) for detailed examples.\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### Article Top\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife has added the article top function, just add `sticky: number` configuration to your markdown notes, articles are sorted by this number.\n*Example:*\n\n![top](top.png)\n\n### WordCount Settings\nA Word Count Plugin for Hexo. See [WordCount](https://github.com/willin/hexo-wordcount) for detailed configuration method.\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi Settings\nBusuanzi is a website traffic statistics plugin. How to use Busuanzi, see [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) for detailed examples.\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### Top scroll progress\n```yml\n# top scroll progress\nscroll: true\n```\n\n### Tip\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### Social Share Post\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer Config\nViewer is a simple jQuery image viewing plugin. Let us first look at a [demo](https://fengyuanchen.github.io/viewer/). See [Viewer](https://github.com/fengyuanchen/viewer) for detailed configuration. If you want to modify the [options](https://github.com/fengyuanchen/viewerjs#options) of Viewer, you can go to `sourcre/js/viewer/pic-viewer.js` to change it.\n```yml\n# Viewer config\nviewer: true\n```\n\n### Theme Color Config\nHexo-Theme-LiveMyLife temporarily supports two themes color.\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*Light theme preview:*\n\n![light theme](light.png)\n\n*Dark theme preview:*\n\n![dark theme](dark.png)\n\n\n### Mouseclick Config\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*Mouseclick preview:*\n\n![mouseclick](mouseclick.png)\n\n\n### Ribbon Config\n```yml\nribbonDynamic: true\n```\n*Ribbon preview:*\n\n![ribbon](ribbon.png)\n\n\n### BgLineCanvas Config\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*BgLineCanvas preview:*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### Search Settings\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter\nGitter is a chat and network platform that helps manage, develop and connect communities through messages, content and discovery. See [Gitter](https://gitter.im/) for detailed configuration method.\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo Basics\n\nSome hexo command:\n\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## Have fun ^\\_^\n\nPlease [Star](https://github.com/V-Vincen/hexo-theme-livemylife) this Project if you like it! [Follow](https://github.com/V-Vincen) would also be appreciated! Peace!\n","source":"_posts/en/Hexo-Theme-LiveMyLife.md","raw":"---\ntitle: Hexo-Theme-LiveMyLife\ncatalog: true\ndate: 2020-04-17 02:34:17\nsubtitle: A succinct hexo theme...\nsticky: 999\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n- Hexo-Theme-LiveMyLife\ncategories:\n- Hexo-Theme-LiveMyLife\n---\n\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This LiveMyLife theme created by [Vincent](https://v-vincen.github.io/) modified from the original Porter [YenYuHsuan](https://github.com/YenYuHsuan/hexo-theme-beantech) , refer to the Themes of [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu), Thanks [dusign](https://github.com/dusign/hexo-theme-snail)、[Utone](https://github.com/shixiaohu2206/hexo-theme-huhu).\n>   \n\n## Repo\nGithub Repo: https://github.com/V-Vincen/hexo-theme-livemylife\nGitee Repo: https://gitee.com/V_Vincen/hexo-theme-livemylife\n\n### [View LiveMyLife Blog ➾](https://v-vincen.github.io/)\n\n![LiveMyLife Desktop](livemylife-desktop.png)\n\n## Quick Start\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n### Install Node.js and Git\n```shell\n#For Mac\nbrew install node\nbrew install git\n```\n> Windows: Download & install Node.js. -> [Node.js](https://nodejs.org/zh-cn/download/)\n>\n> Windows: Download & install Git. -> [Git](https://git-scm.com/download/win)\n\n### Install Hexo\n```shell\n$ npm install -g hexo-cli\n```\n> What is [Hexo](https://hexo.io/docs/)?\n>\n> Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.\n\n### Setup your blog\n```shell\n$ hexo init blog\n```\n> More Commands -> [Hexo Commands](https://hexo.io/docs/commands)\n\n\n## Theme Usage\n### Init\n```shell\ncd blog\nrm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules\ngit clone https://github.com/V-Vincen/hexo-theme-livemylife.git\nmv hexo-theme-livemylife/* ./\nrm -rf hexo-theme-livemylife\nnpm install\n```\n\n### Set Theme\nModify the value of `theme`: in `_config.yml`\n```yml\n# Extensions\n## Themes: https://hexo.io/themes/\n## Plugins: https://hexo.io/plugins/\ntheme: livemylife\n```\n\n### Start the Server\n```shell\nhexo generate # or hexo g\nhexo server   # or hexo s\n```\n```javascript\n// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象\n         function createPerson(name, age) {\n           let Person = new Object();\n           Person.name = name;\n           Person.age = age;\n        return Person;\n         }\n           let person1 = createPerson(\"Lily\", 29);\n           let person2 = createPerson(\"Ming\", 28);\n           console.log(person1.name + person1.age);\n           console.log(person2.name + person2.age);\n\n\n```\nStarts a local server. By default, this is at `http://localhost:4000/`.\n> More Commands -> [Hexo Commands](https://hexo.io/docs/commands)\n\n## Configuration\nModify `_config.yml` file with your own info, Especially the section:\n\n### Site\nReplace the following information with your own.\n```yml\n# Site\ntitle: Live My Life\nsubtitle: 淡而无味也是一种味道\nauthor: Mr.Vincent\ntimezone:\n```\n\n### Internationalization (i18n)\nYou can use internationalization to present your site in different languages. -> Docs：[How to Use Internationalization（i18n）](https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/)\n```yml\n# Internationalization (i18n) Setting\nlanguage: # At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.\n  - en\n  - cn\n\nlangselect:\n  enable: true # If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.\n  options: # langselect button display options\n    en: English\n    cn: 简体中文\n    # tw: 正體中文\n\ni18n_dir: :lang  \npermalink: :lang/:title/ \nnew_post_name: :lang/:title.md\n\n# hexo-generator-i18n config\n## Docs: https://github.com/xcatliu/hexo-generator-index-i18n\nindex_generator:\n  per_page: 10\n  pagination_dir: page\n  path: ''\n  order_by: -date\n\narchive_generator:\n  enabled: false\n  per_page: 10\n  yearly: true\n  monthly: true\n  daily: false\n  order_by: -date\n```\n*English preview:*\n\n![en](langen.png)\n\n*Chinese preview:*\n\n![cn](langcn.png)\n\n\n### CDN Settings\nJsDelivr is A free CDN for Open Source fast、reliable and automated. How to use Jsdelivr? -> Docs：[免费 CDN 提速 Github 静态资源访问](https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE)\n```yml\n# CDN Setting\n# Docs: https://www.jsdelivr.com/?docs=gh\n# If Github Pages deploy，you can ues jsdelivr settings\n#\njsdelivr:\n  jsdelivr_url: https://cdn.jsdelivr.net/gh/\n  github_username: V-Vincen\n```\n**Note:** The theme of Hexo-theme-livemylife has a large number of css、js and images, in order to improve access speed, the theme for all of the resource files are made JsDelivr CDN. But only for Github Pages deployment. -> Docs：[How to apply JsDelivr CDN in Hexo-theme-livemylife Theme](https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/)\n\n### Site Settings\nPut customized pictures in `img` directory.\n```yml\n# Site settings\nSEOTitle: JavaDev | 一如Java深似海\nemail: hexo-theme-livemylife@mail.com\ndescription: \"It's an IT blog...\"\nkeyword: \"Java,v-vincen,v-vincen,livemylife,IT  blog,Blog\"\nheader-img: img/header_img/newhome_bg.jpg\narchives-img: img/header_img/archive_bg2.jpg\n```\n\n### Favicon Settings\n```yml\nfavicon: img/avatar/favicon.jpg\n```\n\n### Signature Settings\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`.\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature>\n```\n> How to create signature -> [Free Online Signature](https://fontmeme.com/signature-fonts/)\n\n### Wave Settings\n```yml\n# Wave settings\nwave: true\n```\n*Example:*\n\n![wave](wave.png)\n\n\n### SNS Settings\nIf you don’t want to display it, you can delete it directly.\n```yml\n# SNS settings\n# RSS: true\ngithub_username: V-Vincen\ntwitter_username: V_Vincen_\ninstagram_username: V_Vincen_\n# facebook_username:  yourAccount\n# linkedin_username:  yourAccount\n# zhihu_username: yourAccount\nweibo_username: WVincen\n```\n\n### Sidebar Settings\nCopy your avatar image to `<root>/img/avatar` and modify the `_config.yml`:\n```yml\nsidebar: true   # whether or not using Sidebar.\nsidebar-about-description: \"I don't know where I am going ,but I am on my way...\"\nsidebar-avatar: img/avatar/vincnet.jpg    # use absolute URL, seeing it's used in both `/` and `/about/`\nwidgets:\n- visitor   # busuanzi: https://busuanzi.ibruce.info/\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n\n# widget behavior\n## Archive\narchive_type: 'monthly'\nshow_count: true\n\n## Featured Tags\nfeatured-tags: true   # whether or not using Feature-Tags\nfeatured-condition-size: 0    # A tag will be featured if the size of it is more than this\n\n## Friends\nfriends: [\n    {\n        title: \"V_Vincen\",\n        href: \"https://v-vincen.life/\"\n    },{\n        title: \"Teacher Ye\",\n        href: \"http://teacherye.com/\"\n    }\n]\n```\n\n### Comment Settings\nHexo-Theme-LiveMyLife temporarily supports three Comments. I use gitalk comment system.\n\n#### Gitalk\nGitalk is a modern comment component based on GitHub Issue and Preact. See [Gitalk](https://github.com/gitalk/gitalk) for detailed configuration method.\n```yml\n# Gitalk Settings\n# Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md\ngitalk:\n  owner:                          # 'GitHub repo owner'\n  admin:                          # ['GitHub repo owner and collaborators, only these guys can initialize github issues']\n  repo:                           # 'GitHub repo'\n  clientID:                       # 'GitHub Application Client ID'\n  clientSecret:                   # 'GitHub Application Client Secret'\n  perPage: 10                     # Pagination size, with maximum 100.\n  pagerDirection: last            # Comment sorting direction, available values are last and first.\n  createIssueManually: false      # By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true\n  language: en                    # Localization language key, en, zh-CN and zh-TW are currently available.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded.Default 250.\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token                         # GitHub oauth request reverse proxy for CORS. For example, the demo url is 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.\n```\n\n#### Gitment\nGitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. See [Gitment](https://github.com/imsun/gitment) for detailed configuration method.\n```yml\n## Gitment Settings\n## Doc: https://github.com/imsun/gitment\ngitment:\n  owner:                          # Your GitHub ID. Required.\n  repo:                           # The repository to store your comments. Make sure you're repo's owner. Required.\n  client_id:                      # GitHub client ID. Required.\n  client_secret:                  # GitHub client secret. Required.\n  desc:                           # An optional description for your page, used in issue's body. Default ''.\n  perPage: 10                     # An optional number to which comments will be paginated. Default 20.\n  maxCommentHeight: 250           # An optional number to limit comments' max height, over which comments will be folded. Default 250.\n```\n\n#### Disqus\nIf you want use [Disqus](https://disqus.com/), you must have a circumvention (proxy, clime over the firewall) technology.\n```yml\n# Disqus settings\ndisqus_username: your-disqus-ID\n```\n\n\n### Analytics Settings\nHow to config analytics? -> Docs：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Analytics settings\n# Google Analytics\nga_track_id: UA-xxxxxx-xx   # Format: UA-xxxxxx-xx\n\n# Baidu Analytics\nba_track_id: ba_track_id\n```\n\n### Sitemap Settings\nHow to config sitemap? -> Docs：[Analytics and Sitemap Settings](https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/)\n```yml\n# Google sitemap\nsitemap:\n  path: sitemap.xml\n\n# Baidu sitemap\nbaidusitemap:\n  path: baidusitemap.xml\n\nbaidu_push: true\n```\n\n\n### Go to top icon Setup\nMy icon is using point, you can change to your own icon at `sourcre/css/images`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n*Example:*\n\n![home_posts_tag-true](home_posts_tag-true.png)\n\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n### Install Mathjax\nTo install Mathjax, please click [How to Use Mathjax](https://v-vincen.github.io/en/How-to-Use-Mathjax/) for a detailed tutorial.\n\n### Anchorjs Settings\nAnd if you want to change the header anchor '❡', you can go to `layout/_partial/anchorjs.ejs` to change it. How to use anchorjs, see [AnchorJS](https://www.bryanbraun.com/anchorjs/#examples) for detailed examples.\n```yml\n# Anchorjs Settings\nanchorjs: true    # if you want to customize anchor. check out line:26 of `anchorjs.ejs`\n```\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: '❡'\n          // icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n### Article Top\n```yml\n# article top\ntop: true\n```\nHexo-theme-livemylife has added the article top function, just add `sticky: number` configuration to your markdown notes, articles are sorted by this number.\n*Example:*\n\n![top](top.png)\n\n### WordCount Settings\nA Word Count Plugin for Hexo. See [WordCount](https://github.com/willin/hexo-wordcount) for detailed configuration method.\n```yml\n# Dependencies: https://github.com/willin/hexo-wordcount\n# Docs: https://www.npmjs.com/package/hexo-wordcount\nwordcount: true\n```\n\n### Busuanzi Settings\nBusuanzi is a website traffic statistics plugin. How to use Busuanzi, see [Busuanzi](https://ibruce.info/2015/04/04/busuanzi/) for detailed examples.\n```yml\n## Dependencies: https://busuanzi.ibruce.info/\n## Docs: https://ibruce.info/\nbusuanzi: true\n```\n\n### Top scroll progress\n```yml\n# top scroll progress\nscroll: true\n```\n\n### Tip\n```yml\ntip:\n  enable: true\n  copyright: Say what you think... # If the copyright is blank, the default value will be used.\n```\n\n### Social Share Post\n```yml\n#Docs: https://github.com/overtrue/share.js\nshare: true\n```\n\n### Viewer Config\nViewer is a simple jQuery image viewing plugin. Let us first look at a [demo](https://fengyuanchen.github.io/viewer/). See [Viewer](https://github.com/fengyuanchen/viewer) for detailed configuration. If you want to modify the [options](https://github.com/fengyuanchen/viewerjs#options) of Viewer, you can go to `sourcre/js/viewer/pic-viewer.js` to change it.\n```yml\n# Viewer config\nviewer: true\n```\n\n### Theme Color Config\nHexo-Theme-LiveMyLife temporarily supports two themes color.\n```yml\n# ThemeColor config\nthemecolor:\n  enable: true\n  mode: dark # themecolor mode light or dark, default light\n```\n*Light theme preview:*\n\n![light theme](light.png)\n\n*Dark theme preview:*\n\n![dark theme](dark.png)\n\n\n### Mouseclick Config\n```yml\n# Mouseclick config\nmouseclick:\n  enable: true\n  content:\n    - The first step is as good as half over...\n    - Laugh and grow fat...\n    - Man proposes God disposes...\n    - When all else is lost the future still remains...\n    - Wasting time is robbing oneself...\n    - Sharp tools make good work...\n    - Cease to struggle and you cease to live...\n    - A friend in need is a friend indeed...\n    - Faith can move mountains...\n  color:\n    - '#9933CC'\n    - '#339933'\n    - '#66CCCC'\n    - '#FF99CC'\n    - '#CCCCFF'\n    - '#6666CC'\n    - '#663399'\n    - '#66CC99'\n    - '#FF0033'\n```\n*Mouseclick preview:*\n\n![mouseclick](mouseclick.png)\n\n\n### Ribbon Config\n```yml\nribbonDynamic: true\n```\n*Ribbon preview:*\n\n![ribbon](ribbon.png)\n\n\n### BgLineCanvas Config\n```yml\nbglinecanvas: true  # The special effects will take up a lot of cpu resorces, please open it carefully.\n```\n*BgLineCanvas preview:*\n\n![bglinecanvas](bglinecanvas.png)\n\n\n### Search Settings\n```yml\n# Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search\nsearch:\n  enable: true\n  path: search.json\n  zipPath: search.flv\n  versionPath: searchVersion.json\n  field: post\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### Gitter\nGitter is a chat and network platform that helps manage, develop and connect communities through messages, content and discovery. See [Gitter](https://gitter.im/) for detailed configuration method.\n```yml\n## Docs:https://gitter.im/?utm_source=left-menu-logo\n##\ngitter:\n  room: your-community/your-room\n```\n\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo> # or https://gitee.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n## Hexo Basics\n\nSome hexo command:\n\n```bash\nhexo new post \"<post name>\"   # you can change post to another layout if you want\nhexo clean && hexo generate   # generate the static file\nhexo server   # run hexo in local environment\nhexo deploy   # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n## Have fun ^\\_^\n\nPlease [Star](https://github.com/V-Vincen/hexo-theme-livemylife) this Project if you like it! [Follow](https://github.com/V-Vincen) would also be appreciated! Peace!\n","slug":"Hexo-Theme-LiveMyLife","published":1,"lang":"en","updated":"2020-04-16T18:34:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9p2f078000ua8uuflm74j8v","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This LiveMyLife theme created by <a href=\"https://v-vincen.github.io/\">Vincent</a> modified from the original Porter <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a> , refer to the Themes of <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>, Thanks <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>.</p>\n</blockquote>\n<h2 id=\"Repo\">Repo</h2>\n<p>Github Repo: <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee Repo: <a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"View-LiveMyLife-Blog-➾\"><a href=\"https://v-vincen.github.io/\">View LiveMyLife Blog ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h3 id=\"Install-Node-js-and-Git\">Install Node.js and Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows: Download &amp; install Node.js. -&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows: Download &amp; install Git. -&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"Install-Hexo\">Install Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>What is <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n</blockquote>\n<h3 id=\"Setup-your-blog\">Setup your blog</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>More Commands -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"Theme-Usage\">Theme Usage</h2>\n<h3 id=\"Init\">Init</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Theme\">Set Theme</h3>\n<p>Modify the value of <code>theme</code>: in <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Start-the-Server\">Start the Server</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">           Person.name = name;</span><br><span class=\"line\">           Person.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> person1 = createPerson(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">           <span class=\"keyword\">let</span> person2 = createPerson(<span class=\"string\">&quot;Ming&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(person1.name + person1.age);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(person2.name + person2.age);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Starts a local server. By default, this is at <code>http://localhost:4000/</code>.</p>\n<blockquote>\n<p>More Commands -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"Configuration\">Configuration</h2>\n<p>Modify <code>_config.yml</code> file with your own info, Especially the section:</p>\n<h3 id=\"Site\">Site</h3>\n<p>Replace the following information with your own.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Internationalization-i18n\">Internationalization (i18n)</h3>\n<p>You can use internationalization to present your site in different languages. -&gt; Docs：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English preview:</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese preview:</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-Settings\">CDN Settings</h3>\n<p>JsDelivr is A free CDN for Open Source fast、reliable and automated. How to use Jsdelivr? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong> The theme of Hexo-theme-livemylife has a large number of css、js and images, in order to improve access speed, the theme for all of the resource files are made JsDelivr CDN. But only for Github Pages deployment. -&gt; Docs：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"Site-Settings\">Site Settings</h3>\n<p>Put customized pictures in <code>img</code> directory.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Favicon-Settings\">Favicon Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Signature-Settings\">Signature Settings</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>How to create signature -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"Wave-Settings\">Wave Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Example:</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"SNS-Settings\">SNS Settings</h3>\n<p>If you don’t want to display it, you can delete it directly.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Sidebar-Settings\">Sidebar Settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/avatar</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Comment-Settings\">Comment Settings</h3>\n<p>Hexo-Theme-LiveMyLife temporarily supports three Comments. I use gitalk comment system.</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk is a modern comment component based on GitHub Issue and Preact. See <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. See <a href=\"https://github.com/imsun/gitment\">Gitment</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>If you want use <a href=\"https://disqus.com/\">Disqus</a>, you must have a circumvention (proxy, clime over the firewall) technology.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Analytics-Settings\">Analytics Settings</h3>\n<p>How to config analytics? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Sitemap-Settings\">Sitemap Settings</h3>\n<p>How to config sitemap? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Go-to-top-icon-Setup\">Go to top icon Setup</h3>\n<p>My icon is using point, you can change to your own icon at <code>sourcre/css/images</code>.</p>\n<h3 id=\"Post-tag\">Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Example:</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-render\">Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-Mathjax\">Install Mathjax</h3>\n<p>To install Mathjax, please click <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a> for a detailed tutorial.</p>\n<h3 id=\"Anchorjs-Settings\">Anchorjs Settings</h3>\n<p>And if you want to change the header anchor ‘❡’, you can go to <code>layout/_partial/anchorjs.ejs</code> to change it. How to use anchorjs, see <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> for detailed examples.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Article-Top\">Article Top</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife has added the article top function, just add <code>sticky: number</code> configuration to your markdown notes, articles are sorted by this number.<br>\n<em>Example:</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"WordCount-Settings\">WordCount Settings</h3>\n<p>A Word Count Plugin for Hexo. See <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi-Settings\">Busuanzi Settings</h3>\n<p>Busuanzi is a website traffic statistics plugin. How to use Busuanzi, see <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> for detailed examples.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Top-scroll-progress\">Top scroll progress</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip\">Tip</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Social-Share-Post\">Social Share Post</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer-Config\">Viewer Config</h3>\n<p>Viewer is a simple jQuery image viewing plugin. Let us first look at a <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>. See <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> for detailed configuration. If you want to modify the <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> of Viewer, you can go to <code>sourcre/js/viewer/pic-viewer.js</code> to change it.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Theme-Color-Config\">Theme Color Config</h3>\n<p>Hexo-Theme-LiveMyLife temporarily supports two themes color.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>Light theme preview:</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>Dark theme preview:</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"Mouseclick-Config\">Mouseclick Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>Mouseclick preview:</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"Ribbon-Config\">Ribbon Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Ribbon preview:</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"BgLineCanvas-Config\">BgLineCanvas Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>BgLineCanvas preview:</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"Search-Settings\">Search Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter\">Gitter</h3>\n<p>Gitter is a chat and network platform that helps manage, develop and connect communities through messages, content and discovery. See <a href=\"https://gitter.im/\">Gitter</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Deployment\">Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-Basics\">Hexo Basics</h2>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Have-fun\">Have fun ^_^</h2>\n<p>Please <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a> this Project if you like it! <a href=\"https://github.com/V-Vincen\">Follow</a> would also be appreciated! Peace!</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This LiveMyLife theme created by <a href=\"https://v-vincen.github.io/\">Vincent</a> modified from the original Porter <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\">YenYuHsuan</a> , refer to the Themes of <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>, Thanks <a href=\"https://github.com/dusign/hexo-theme-snail\">dusign</a>、<a href=\"https://github.com/shixiaohu2206/hexo-theme-huhu\">Utone</a>.</p>\n</blockquote>\n<h2 id=\"Repo\">Repo</h2>\n<p>Github Repo: <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">https://github.com/V-Vincen/hexo-theme-livemylife</a><br>\nGitee Repo: <a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h3 id=\"View-LiveMyLife-Blog-➾\"><a href=\"https://v-vincen.github.io/\">View LiveMyLife Blog ➾</a></h3>\n<p><img src=\"livemylife-desktop.png\" alt=\"LiveMyLife Desktop\"></p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h3 id=\"Install-Node-js-and-Git\">Install Node.js and Git</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">For Mac</span></span><br><span class=\"line\">brew install node</span><br><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Windows: Download &amp; install Node.js. -&gt; <a href=\"https://nodejs.org/zh-cn/download/\">Node.js</a></p>\n<p>Windows: Download &amp; install Git. -&gt; <a href=\"https://git-scm.com/download/win\">Git</a></p>\n</blockquote>\n<h3 id=\"Install-Hexo\">Install Hexo</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>What is <a href=\"https://hexo.io/docs/\">Hexo</a>?</p>\n<p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n</blockquote>\n<h3 id=\"Setup-your-blog\">Setup your blog</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init blog</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>More Commands -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"Theme-Usage\">Theme Usage</h2>\n<h3 id=\"Init\">Init</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">rm -rf scaffolds source themes _config.landscape.yml _config.yml package.json yarn.lock #just keep node_modules</span><br><span class=\"line\">git clone https://github.com/V-Vincen/hexo-theme-livemylife.git</span><br><span class=\"line\">mv hexo-theme-livemylife/* ./</span><br><span class=\"line\">rm -rf hexo-theme-livemylife</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"Set-Theme\">Set Theme</h3>\n<p>Modify the value of <code>theme</code>: in <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">livemylife</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Start-the-Server\">Start the Server</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate # or hexo g</span><br><span class=\"line\">hexo server   # or hexo s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在函数内创建一个对象，能够根据接收的参数来构建一个包含所有必要信息的Person对象</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">           Person.name = name;</span><br><span class=\"line\">           Person.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> person1 = createPerson(<span class=\"string\">&quot;Lily&quot;</span>, <span class=\"number\">29</span>);</span><br><span class=\"line\">           <span class=\"keyword\">let</span> person2 = createPerson(<span class=\"string\">&quot;Ming&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(person1.name + person1.age);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(person2.name + person2.age);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Starts a local server. By default, this is at <code>http://localhost:4000/</code>.</p>\n<blockquote>\n<p>More Commands -&gt; <a href=\"https://hexo.io/docs/commands\">Hexo Commands</a></p>\n</blockquote>\n<h2 id=\"Configuration\">Configuration</h2>\n<p>Modify <code>_config.yml</code> file with your own info, Especially the section:</p>\n<h3 id=\"Site\">Site</h3>\n<p>Replace the following information with your own.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Live</span> <span class=\"string\">My</span> <span class=\"string\">Life</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">淡而无味也是一种味道</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Mr.Vincent</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Internationalization-i18n\">Internationalization (i18n)</h3>\n<p>You can use internationalization to present your site in different languages. -&gt; Docs：<a href=\"https://v-vincen.github.io/en/How-to-Use-Internationalization%EF%BC%88i18n%EF%BC%89/\">How to Use Internationalization（i18n）</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Internationalization (i18n) Setting</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"comment\"># At present, only en、cn and tw are supported. You can customize the language，refer to `languages/en.yml`.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">langselect:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If open, it will automatically generation lang-select button.This button can jump in articles in different languages, but the articles must have the same name.</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span> <span class=\"comment\"># langselect button display options</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">English</span></span><br><span class=\"line\">    <span class=\"attr\">cn:</span> <span class=\"string\">简体中文</span></span><br><span class=\"line\">    <span class=\"comment\"># tw: 正體中文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span>  </span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span> </span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hexo-generator-i18n config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/xcatliu/hexo-generator-index-i18n</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">yearly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">daily:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n<p><em>English preview:</em></p>\n<p><img src=\"langen.png\" alt=\"en\"></p>\n<p><em>Chinese preview:</em></p>\n<p><img src=\"langcn.png\" alt=\"cn\"></p>\n<h3 id=\"CDN-Settings\">CDN Settings</h3>\n<p>JsDelivr is A free CDN for Open Source fast、reliable and automated. How to use Jsdelivr? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Github-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/#%E5%85%8D%E8%B4%B9-CDN-%E6%8F%90%E9%80%9F-Github-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\">免费 CDN 提速 Github 静态资源访问</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CDN Setting</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.jsdelivr.com/?docs=gh</span></span><br><span class=\"line\"><span class=\"comment\"># If Github Pages deploy，you can ues jsdelivr settings</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">jsdelivr:</span></span><br><span class=\"line\">  <span class=\"attr\">jsdelivr_url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/</span></span><br><span class=\"line\">  <span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong> The theme of Hexo-theme-livemylife has a large number of css、js and images, in order to improve access speed, the theme for all of the resource files are made JsDelivr CDN. But only for Github Pages deployment. -&gt; Docs：<a href=\"https://v-vincen.github.io/en/How-to-apply-JsDelivr-CDN-in-Hexo-theme-livemylife-Theme/\">How to apply JsDelivr CDN in Hexo-theme-livemylife Theme</a></p>\n<h3 id=\"Site-Settings\">Site Settings</h3>\n<p>Put customized pictures in <code>img</code> directory.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site settings</span></span><br><span class=\"line\"><span class=\"attr\">SEOTitle:</span> <span class=\"string\">JavaDev</span> <span class=\"string\">|</span> <span class=\"string\">一如Java深似海</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">hexo-theme-livemylife@mail.com</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&quot;It&#x27;s an IT blog...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">keyword:</span> <span class=\"string\">&quot;Java,v-vincen,v-vincen,livemylife,IT  blog,Blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">img/header_img/newhome_bg.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archives-img:</span> <span class=\"string\">img/header_img/archive_bg2.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Favicon-Settings\">Favicon Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">img/avatar/favicon.jpg</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Signature-Settings\">Signature Settings</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>How to create signature -&gt; <a href=\"https://fontmeme.com/signature-fonts/\">Free Online Signature</a></p>\n</blockquote>\n<h3 id=\"Wave-Settings\">Wave Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Wave settings</span></span><br><span class=\"line\"><span class=\"attr\">wave:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Example:</em></p>\n<p><img src=\"wave.png\" alt=\"wave\"></p>\n<h3 id=\"SNS-Settings\">SNS Settings</h3>\n<p>If you don’t want to display it, you can delete it directly.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SNS settings</span></span><br><span class=\"line\"><span class=\"comment\"># RSS: true</span></span><br><span class=\"line\"><span class=\"attr\">github_username:</span> <span class=\"string\">V-Vincen</span></span><br><span class=\"line\"><span class=\"attr\">twitter_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"attr\">instagram_username:</span> <span class=\"string\">V_Vincen_</span></span><br><span class=\"line\"><span class=\"comment\"># facebook_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># linkedin_username:  yourAccount</span></span><br><span class=\"line\"><span class=\"comment\"># zhihu_username: yourAccount</span></span><br><span class=\"line\"><span class=\"attr\">weibo_username:</span> <span class=\"string\">WVincen</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Sidebar-Settings\">Sidebar Settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/avatar</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">&quot;I don&#x27;t know where I am going ,but I am on my way...&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/avatar/vincnet.jpg</span>    <span class=\"comment\"># use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span></span><br><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">visitor</span>   <span class=\"comment\"># busuanzi: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># widget behavior</span></span><br><span class=\"line\"><span class=\"comment\">## Archive</span></span><br><span class=\"line\"><span class=\"attr\">archive_type:</span> <span class=\"string\">&#x27;monthly&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">show_count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Featured Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-tags:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># whether or not using Feature-Tags</span></span><br><span class=\"line\"><span class=\"attr\">featured-condition-size:</span> <span class=\"number\">0</span>    <span class=\"comment\"># A tag will be featured if the size of it is more than this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Friends</span></span><br><span class=\"line\"><span class=\"attr\">friends:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;V_Vincen&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;https://v-vincen.life/&quot;</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"attr\">title:</span> <span class=\"string\">&quot;Teacher Ye&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">href:</span> <span class=\"string\">&quot;http://teacherye.com/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"Comment-Settings\">Comment Settings</h3>\n<p>Hexo-Theme-LiveMyLife temporarily supports three Comments. I use gitalk comment system.</p>\n<h4 id=\"Gitalk\">Gitalk</h4>\n<p>Gitalk is a modern comment component based on GitHub Issue and Preact. See <a href=\"https://github.com/gitalk/gitalk\">Gitalk</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk Settings</span></span><br><span class=\"line\"><span class=\"comment\"># Doc: https://github.com/gitalk/gitalk/blob/master/readme-cn.md</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># &#x27;GitHub repo owner&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span>                          <span class=\"comment\"># [&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;]</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># &#x27;GitHub repo&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span>                       <span class=\"comment\"># &#x27;GitHub Application Client ID&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span>                   <span class=\"comment\"># &#x27;GitHub Application Client Secret&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># Pagination size, with maximum 100.</span></span><br><span class=\"line\">  <span class=\"attr\">pagerDirection:</span> <span class=\"string\">last</span>            <span class=\"comment\"># Comment sorting direction, available values are last and first.</span></span><br><span class=\"line\">  <span class=\"attr\">createIssueManually:</span> <span class=\"literal\">false</span>      <span class=\"comment\"># By default, Gitalk will create a corresponding github issue for your every single page automatically when the logined user is belong to the admin users. You can create it manually by setting this option to true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">en</span>                    <span class=\"comment\"># Localization language key, en, zh-CN and zh-TW are currently available.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded.Default 250.</span></span><br><span class=\"line\">  <span class=\"attr\">proxy:</span> <span class=\"string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>                         <span class=\"comment\"># GitHub oauth request reverse proxy for CORS. For example, the demo url is &#x27;https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&#x27;.You should deploy your own proxy url as in this issue https://github.com/gitalk/gitalk/issues/429.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gitment\">Gitment</h4>\n<p>Gitment is a comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation. See <a href=\"https://github.com/imsun/gitment\">Gitment</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Gitment Settings</span></span><br><span class=\"line\"><span class=\"comment\">## Doc: https://github.com/imsun/gitment</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span>                          <span class=\"comment\"># Your GitHub ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>                           <span class=\"comment\"># The repository to store your comments. Make sure you&#x27;re repo&#x27;s owner. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>                      <span class=\"comment\"># GitHub client ID. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>                  <span class=\"comment\"># GitHub client secret. Required.</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span>                           <span class=\"comment\"># An optional description for your page, used in issue&#x27;s body. Default &#x27;&#x27;.</span></span><br><span class=\"line\">  <span class=\"attr\">perPage:</span> <span class=\"number\">10</span>                     <span class=\"comment\"># An optional number to which comments will be paginated. Default 20.</span></span><br><span class=\"line\">  <span class=\"attr\">maxCommentHeight:</span> <span class=\"number\">250</span>           <span class=\"comment\"># An optional number to limit comments&#x27; max height, over which comments will be folded. Default 250.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Disqus\">Disqus</h4>\n<p>If you want use <a href=\"https://disqus.com/\">Disqus</a>, you must have a circumvention (proxy, clime over the firewall) technology.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus settings</span></span><br><span class=\"line\"><span class=\"attr\">disqus_username:</span> <span class=\"string\">your-disqus-ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Analytics-Settings\">Analytics Settings</h3>\n<p>How to config analytics? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Analytics settings</span></span><br><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ga_track_id:</span> <span class=\"string\">UA-xxxxxx-xx</span>   <span class=\"comment\"># Format: UA-xxxxxx-xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu Analytics</span></span><br><span class=\"line\"><span class=\"attr\">ba_track_id:</span> <span class=\"string\">ba_track_id</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Sitemap-Settings\">Sitemap Settings</h3>\n<p>How to config sitemap? -&gt; Docs：<a href=\"https://v-vincen.github.io/en/Analytics-and-Sitemap-Settings/\">Analytics and Sitemap Settings</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Baidu sitemap</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">baidusitemap.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Go-to-top-icon-Setup\">Go to top icon Setup</h3>\n<p>My icon is using point, you can change to your own icon at <code>sourcre/css/images</code>.</p>\n<h3 id=\"Post-tag\">Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Example:</em></p>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<h3 id=\"Markdown-render\">Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Install-Mathjax\">Install Mathjax</h3>\n<p>To install Mathjax, please click <a href=\"https://v-vincen.github.io/en/How-to-Use-Mathjax/\">How to Use Mathjax</a> for a detailed tutorial.</p>\n<h3 id=\"Anchorjs-Settings\">Anchorjs Settings</h3>\n<p>And if you want to change the header anchor ‘❡’, you can go to <code>layout/_partial/anchorjs.ejs</code> to change it. How to use anchorjs, see <a href=\"https://www.bryanbraun.com/anchorjs/#examples\">AnchorJS</a> for detailed examples.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Anchorjs Settings</span></span><br><span class=\"line\"><span class=\"attr\">anchorjs:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># if you want to customize anchor. check out line:26 of `anchorjs.ejs`</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">&quot;//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">&#x27;hover&#x27;</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&#x27;❡&#x27;</span></span><br><span class=\"line\">          <span class=\"comment\">// icon: &#x27;ℬ&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">&#x27;.intro-header h1&#x27;</span>).remove(<span class=\"string\">&#x27;.subheading&#x27;</span>).remove(<span class=\"string\">&#x27;.sidebar-container h5&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Article-Top\">Article Top</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># article top</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>Hexo-theme-livemylife has added the article top function, just add <code>sticky: number</code> configuration to your markdown notes, articles are sorted by this number.<br>\n<em>Example:</em></p>\n<p><img src=\"top.png\" alt=\"top\"></p>\n<h3 id=\"WordCount-Settings\">WordCount Settings</h3>\n<p>A Word Count Plugin for Hexo. See <a href=\"https://github.com/willin/hexo-wordcount\">WordCount</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"comment\"># Docs: https://www.npmjs.com/package/hexo-wordcount</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Busuanzi-Settings\">Busuanzi Settings</h3>\n<p>Busuanzi is a website traffic statistics plugin. How to use Busuanzi, see <a href=\"https://ibruce.info/2015/04/04/busuanzi/\">Busuanzi</a> for detailed examples.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Dependencies: https://busuanzi.ibruce.info/</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://ibruce.info/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Top-scroll-progress\">Top scroll progress</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top scroll progress</span></span><br><span class=\"line\"><span class=\"attr\">scroll:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Tip\">Tip</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tip:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span> <span class=\"string\">Say</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">think...</span> <span class=\"comment\"># If the copyright is blank, the default value will be used.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Social-Share-Post\">Social Share Post</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docs: https://github.com/overtrue/share.js</span></span><br><span class=\"line\"><span class=\"attr\">share:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Viewer-Config\">Viewer Config</h3>\n<p>Viewer is a simple jQuery image viewing plugin. Let us first look at a <a href=\"https://fengyuanchen.github.io/viewer/\">demo</a>. See <a href=\"https://github.com/fengyuanchen/viewer\">Viewer</a> for detailed configuration. If you want to modify the <a href=\"https://github.com/fengyuanchen/viewerjs#options\">options</a> of Viewer, you can go to <code>sourcre/js/viewer/pic-viewer.js</code> to change it.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Viewer config</span></span><br><span class=\"line\"><span class=\"attr\">viewer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Theme-Color-Config\">Theme Color Config</h3>\n<p>Hexo-Theme-LiveMyLife temporarily supports two themes color.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ThemeColor config</span></span><br><span class=\"line\"><span class=\"attr\">themecolor:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">dark</span> <span class=\"comment\"># themecolor mode light or dark, default light</span></span><br></pre></td></tr></table></figure>\n<p><em>Light theme preview:</em></p>\n<p><img src=\"light.png\" alt=\"light theme\"></p>\n<p><em>Dark theme preview:</em></p>\n<p><img src=\"dark.png\" alt=\"dark theme\"></p>\n<h3 id=\"Mouseclick-Config\">Mouseclick Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mouseclick config</span></span><br><span class=\"line\"><span class=\"attr\">mouseclick:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">step</span> <span class=\"string\">is</span> <span class=\"string\">as</span> <span class=\"string\">good</span> <span class=\"string\">as</span> <span class=\"string\">half</span> <span class=\"string\">over...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Laugh</span> <span class=\"string\">and</span> <span class=\"string\">grow</span> <span class=\"string\">fat...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Man</span> <span class=\"string\">proposes</span> <span class=\"string\">God</span> <span class=\"string\">disposes...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">When</span> <span class=\"string\">all</span> <span class=\"string\">else</span> <span class=\"string\">is</span> <span class=\"string\">lost</span> <span class=\"string\">the</span> <span class=\"string\">future</span> <span class=\"string\">still</span> <span class=\"string\">remains...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Wasting</span> <span class=\"string\">time</span> <span class=\"string\">is</span> <span class=\"string\">robbing</span> <span class=\"string\">oneself...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Sharp</span> <span class=\"string\">tools</span> <span class=\"string\">make</span> <span class=\"string\">good</span> <span class=\"string\">work...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Cease</span> <span class=\"string\">to</span> <span class=\"string\">struggle</span> <span class=\"string\">and</span> <span class=\"string\">you</span> <span class=\"string\">cease</span> <span class=\"string\">to</span> <span class=\"string\">live...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">friend</span> <span class=\"string\">in</span> <span class=\"string\">need</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">friend</span> <span class=\"string\">indeed...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Faith</span> <span class=\"string\">can</span> <span class=\"string\">move</span> <span class=\"string\">mountains...</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#9933CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#339933&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CCCC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF99CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#CCCCFF&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#6666CC&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#663399&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#66CC99&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;#FF0033&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><em>Mouseclick preview:</em></p>\n<p><img src=\"mouseclick.png\" alt=\"mouseclick\"></p>\n<h3 id=\"Ribbon-Config\">Ribbon Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ribbonDynamic:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><em>Ribbon preview:</em></p>\n<p><img src=\"ribbon.png\" alt=\"ribbon\"></p>\n<h3 id=\"BgLineCanvas-Config\">BgLineCanvas Config</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bglinecanvas:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># The special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br></pre></td></tr></table></figure>\n<p><em>BgLineCanvas preview:</em></p>\n<p><img src=\"bglinecanvas.png\" alt=\"bglinecanvas\"></p>\n<h3 id=\"Search-Settings\">Search Settings</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/V-Vincen/hexo-generator-zip-search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">zipPath:</span> <span class=\"string\">search.flv</span></span><br><span class=\"line\">  <span class=\"attr\">versionPath:</span> <span class=\"string\">searchVersion.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\"># if auto, trigger search by changing input</span></span><br><span class=\"line\">  <span class=\"comment\"># if manual, trigger search by pressing enter key or search button</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Gitter\">Gitter</h3>\n<p>Gitter is a chat and network platform that helps manage, develop and connect communities through messages, content and discovery. See <a href=\"https://gitter.im/\">Gitter</a> for detailed configuration method.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Docs:https://gitter.im/?utm_source=left-menu-logo</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"attr\">gitter:</span></span><br><span class=\"line\">  <span class=\"attr\">room:</span> <span class=\"string\">your-community/your-room</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Deployment\">Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span> <span class=\"comment\"># or https://gitee.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-Basics\">Hexo Basics</h2>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">&quot;&lt;post name&gt;&quot;</span>   <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate   <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server   <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy   <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Have-fun\">Have fun ^_^</h2>\n<p>Please <a href=\"https://github.com/V-Vincen/hexo-theme-livemylife\">Star</a> this Project if you like it! <a href=\"https://github.com/V-Vincen\">Follow</a> would also be appreciated! Peace!</p>\n"},{"title":"对象模式设计-各种继承详解与差异","catalog":true,"date":"2022-11-02T02:30:00.000Z","subtitle":"javascript权威指南第六章对象篇","lang":"cn","header-img":"/img/header_img/lml_bg.jpg","_content":"# 各种继承详解与差异\n补充：instanceof   用于检测构造函数的prototype是否存在于这个实例对象的原型链上实例对象 instanceof  构造函数\n<br/>\n\n #### 原型链继承\n将父类型的实例赋值给要继承的对象的原型对象，子原型对象拿到父实例中所有属性和方法，摒弃原本的原型对象，新建出一个原型对象指向了父实例的原型对象。新建原型对象的constructor指向了实例的构造函数。新建原型对象可以通过原型链找到实例原型对象上的属性和方法\n```javascript\n    function SuperType() {\n        this.property = true;\n      }\n      SuperType.prototype.getSuperValues = function () {\n        console.log(this.property);\n      };\n      function SubType() {\n        this.subProperty = false;\n      }\n      SubType.prototype.getSubValues = function () {\n        console.log(this.subProperty);\n      };\n      SubType.prototype=new SuperType()\n      let instance=new SubType()\n      instance.getSuperValues()//true\n\n     //getSubValues是SubType旧原型对象上的方法，当等于SuperType实例之后\n      //开辟了一个新的原型对象，现在实例instance指向了\n      //新的原型对象，是找不到getSubValues方法的\n     instance.getSubValues()//error  \n\n      console.log(instance.subProperty);//false 子类型的实例属性还是可以拿到的\n\n      //旧的SubType对象的constructor指向构造函数SubType\n      //继承SuperType实例之后，新的SubType对象的constructor指向构造函数SuperType\n     console.log(SubType.prototype.constructor==SuperType)//true\n\n      //SupertType的原型对象通过隐式属性__proto__指向了Object的原型对象\n      //Array,String这些原生对象上的方法都是通过这个方法找到的\n     console.log(SuperType.prototype.__proto__==Object.prototype)//true\n\n     //确定原型与实例的关系\n     //由于原型链的关系，可以说实例instance是Object、SupertType、SubType任何\n     //一个类型的实例 \n     //instanceof 前面是一个对象，后面一定要是一个函数或者构造器，\n     //如果返回为ture则代表这个对象的___proto___指向了函数的原型对象\n     console.log(instance instanceof SubType)//true\n     console.log(instance instanceof SuperType)//true\n     console.log(instance instanceof Object)//true\n\n```\n 以上面的例子为例，要找到getSuperValues方法，原型链的搜索机制为：\n  1. 搜索实例instance\n  2. 搜索SubType.prototype（新的SubType原型对象）\n  3. 搜索SuperType.prototype\n在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下\n\n<br/>\n\n**如果想要使用子构造函数的原型对象上的方法,定义方法要在继承之后**\n```javascript\n  function SuperType(){\n       this.prototype=true\n     }\n     SuperType.prototype.getSuperVal=function(){\n       console.log(this.prototype)\n     }\n     function SubType(){\n       this.prototype=false\n     }\n     let supertInstance=new SuperType()\n     SubType.prototype=supertInstance\n    //  添加方法\n     SubType.prototype.getSubVal=function(){\n       console.log(this.prototype)\n     }\n     //重写超类型中的方法\n     SubType.prototype.getSuperVal=function(){\n       console.log(this.prototype)\n     }\n     let instance=new SubType()\n     instance.getSubVal() //false\n     instance.getSuperVal()//false\n\n    //但是超类型中的方法没有被子类型的重构改变\n     supertInstance.getSuperVal()//true\n\n```\n<br/>\n\n**原型链继承的缺点**\n从超类型那里继承到的实例属性都会变成子类原型对象上的共享属性，这样子引用对象都会变成共享对象，就会造成互相影响。\n```javascript\n   function SuperColor(){\n      this.colorArr=[\"red\",\"yellow\"]  \n    }\n    \n    function SubColor(){}\n    SubColor.prototype=new SuperColor()\n\n    let color1=new SubColor()\n    //从超类型实例继承而来的colorArr会变成子类原型对象上的共享对象\n    color1.colorArr.push(\"green\")\n    console.log(color1.colorArr)//['red', 'yellow', 'green']\n    let color2=new SubColor()\n    //会被互相影响\n    console.log(color2.colorArr)//['red', 'yellow', 'green']\n\n\n    let superColor1=new SuperColor()\n    superColor1.colorArr.push(\"green\")\n    console.log(superColor1.colorArr)//['red', 'yellow', 'green']\n    let superColor2=new SuperColor()\n    //colorArr是超类型的实例属性，\n    //每次实例化都会给这个对象添加一个colorArr副本，不会互相影响\n    console.log(superColor2.colorArr)//['red', 'yellow']\n\n```\n<br/>\n\n#### 借用构造函数 也叫伪造对象和经典继承\n  通过在子类型构造函数的内部调用超类型构造函数实现。\n  \n  \n\n **函数只不过是在特定环境中执行代码的对象，可以通过使用apply或者call方法在新创建的对象上执行构造函数**\n```javascript\n    function SuperType(){\n      this.colorArr=[\"red\",\"yellow\"]\n      }\n    function SubType(){\n      SuperType.call(this)\n    }\n   //在新创建的SubType实例的环境下调用了SuperType的构造函数。\n   //相当于会在新SubType对象上执行SuperType函数中定义的所有对象初始化代码\n   //这样子每个SubType的实例都会有自己的colorArr属性副本\n    let color1=new SubType()\n    color1.colorArr.push(\"green\")\n    console.log(color1.colorArr)//['red', 'yellow', 'green']\n    let color2=new SubType()\n    console.log(color2.colorArr)//['red', 'yellow']\n\n```\n**优势**\n可以传递参数、每个实例的属性都会创建一个副本，对用引用对象不会互相影响\n<br/>\n\n**缺点**\n每次实例化都会把属性方法创建一份副本其实是一把双刃剑，每个实例都有一份独立的方法副本会造成内存浪费，方法应该要共享\n```javascript\n   function SuperPerson(name){\n      this.name=name\n      this.sayName=function(){\n        console.log(this.name)\n      }\n    }\n    function SubPerson(name,age){\n     SuperPerson.call(this,name)\n     //添加子类型属性，写在调用超类型构造函数后。否则被父类型覆盖\n     this.age=age\n    }\n\n    //可以向超类型传参\n    let person1=new SubPerson(\"LuLu\",29)\n    person1.sayName() //LuLu\n    console.log(person1.age)//29\n    let person2=new SubPerson(\"Lily\",28)\n    person2.sayName() //Lily\n\n   //无法通过原型指针找到超类型构造函数,无法识别继承的是哪个对象\n    console.log(person1 instanceof SuperPerson)//false\n\n```\n<br/>\n\n#### 组合继承\n1. 需要传参的私有属性与引用对象在超类构造函数中定义，通过借用构造函数继承，这样子每个实例上的对应属性会有一份属性副本。\n2. 共享属性与方法通过原型模式创建，通过原型链继承，节约内存。\n3. 创建的实例因为有通过原型链继承，可以识别继承于哪个超类型的对象。\n组合继承避免了原型链与借用构造函数的缺陷，融合优点。\n\n```javascript\n   function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      SuperType.call(this,name)\n      this.age=age\n    }\n    SubType.prototype=new SuperType()\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n    let person1=new SubType(\"LuLu\",29)\n    person1.colorsArr.push(\"green\")\n    console.log(person1.colorsArr)//[\"red\",\"yellow\",\"green\"]\n    person1.sayName()//\"LuLu\"\n    person1.sayAge()//29\n\n    let person2=new SubType(\"bibi\",27)\n    //colorsArr是实例属性会拷贝出一份属于person2实例的副本，不会受person1影响\n    console.log(person2.colorsArr)//[\"red\",\"yellow\"]\n    person2.sayName()//\"bibi\"\n    person2.sayAge()//27\n    \n    //两个实例方法都会指向SuperType的原型对象中的sayName方法\n    console.log(person1.sayName==person2.sayName)//true\n\n    //通过原型连继承可以判断出是否继承与哪个构造函数，识别出对象\n    console.log(person1 instanceof SubType)//true\n    console.log(person1 instanceof SuperType)//true\n\n```\n**组合继承的缺点:**\n 组合继承无论什么情况下都会调用两次超类型构造函数，超类型构造函数中的属性会被继承两次。\n   第一次是在子类型原型继承超类型实例的时候，属性会被记在子类型的原型中。第二次是在子构造函数中调用父构造函数时，在继承一遍父构造函数中的实例属性。\n    所以父类构造函数的属性会被子类原型继承一遍，子类实例再继承一遍（子类实例会重写掉子类原型上的属性，因为是后调用）\n```javascript\n    function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      //第二次调用父类构造函数，继承实例属性到SubType实例上\n      //因为是后调用，SubType原型对象上的name和colorsArr会被重写，且被屏蔽\n      //这时候SubType原型对象上有name和colorsArr属性，SubType上也有\n      //name和colorsArr属性\n      SuperType.call(this,name)\n      this.age=age\n    }\n    //第一次调用父类构造函数，继承实例属性到SubType原型对象上\n    SubType.prototype=new SuperType()\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n\n```\n<br/>\n\n#### 原型式继承\n设计思想：\n如果只是想让一个对象与另一个对象保持类似可以使用原型式继承。\n先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。\n\n```javascript\n   function object(o){\n      function F(){}\n      F.prototype=o\n      return new F()\n    }\n    let person={\n      name:\"LuLu\",\n      age:29\n    }\n    let person1=object(person)\n    console.log(person1.name) //\"LuLu\"\n    console.log(person1.age)//29\n\n```\n从本质上讲，object（）对传入其中的对象执行了一次浅拷贝\n**Object.create规范了原型式继承,就相当于是例子中的object方法**\n```javascript\n    let person={\n      name:\"LuLu\",\n      age:29\n    }\n    let person1=Object.create(person)\n    console.log(person1.name) //\"LuLu\"\n    console.log(person1.age)//29\n```\n缺点：\n其实原型式继承的本质是把一个函数的原型对象赋值给要创建的那个对象（新创建的对象的__proto__指向了被创建函数的prototype），所以引用类型还是会有共享值得情况。\n**Object.create创建的对象会存在引用对象共享值得情况。并且没有办法继承到父类的实例属性和实例方法。**\n```javascript\n    let person={\n      colorArr:[\"red\",\"yellow\"]\n    }\n    let person1=Object.create(person)\n    person1.colorArr.push(\"green\")\n    console.log(person1.colorArr)//['red', 'yellow', 'green']\n\n    let person2=Object.create(person)\n    console.log(person2.colorArr)//['red', 'yellow', 'green']\n\n```\n<br/>\n\n#### 寄生继承\n寄生继承与原型继承相类似：\n原型继承复制一个对象到构造函数的原型对象上。然后返回实例。\n寄生继承通过Object复制一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象，最后返回对象\n```javascript\n    function createFunc(original){\n    //通过Object复制一个对象，不是一定要用Object的，其他可以复制对象的都可以用\n      var clone=Object(original)\n    //给对象添加方法\n      clone.sayName=function(){\n        console.log(this.name)\n      }\n      return clone\n    }\n    let person={\n      name:\"bibi\"\n    }\n    let person1=createFunc(person)\n    person1.sayName()\n\n```\n<br/>\n\n#### 寄生组合继承\n针对于组合继承中父类的实例属性会生成两份的情况，寄生组合其实就是拷贝一份父类原型给到子类，子类不再通过父类构造函数获得从而子类原型上不会再有父类实例属性。\n**借用构造是有call和apply方法不变，原型继承从继承父类构造函数变成继承父类原型对象**\n```javascript\n   function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      SuperType.call(this,name)\n      this.age=age\n    }\n    inheritPrototype(SubType,SuperType)\n\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n    let person1=new SubType(\"Lulu\",28)\n    person1.sayName()\n    person1.sayAge()\n   \n     //函数变量提升可以放在调用之后定义\n    function inheritPrototype(subType,superType){\n     //拷贝一份父类原型副本赋值给子类原型，实现继承\n     //原本的object()方法已经被废弃，所以现在使用的Object方法。\n     //但是使用Object方法相当于父类原型对象赋值给子类原型对象，\n     //父类的原型对象会被子类原型对象所影响\n      subType.prototype=Object(superType.prototype)\n    }\n\n```\n<br/>\n\n#### 原型组合继承(最佳方案)\n**原型链继承不可以直接赋值，父类的原型对象会被子类原型对象所影响**\n```javascript\n      function SuperType() {}\n        SuperType.prototype.getVal = function () {\n        return true;\n      };\n      function SubType() {}\n      //如果使用寄生继承，object()已经被废弃，现在只有Object()方法，\n      //但是Object()方法与直接去赋值问题相同，父类原型对象会被子类原型对象所影响\n      //  SubType.prototype = Object(SuperType.prototype);\n       SubType.prototype = SuperType.prototype;\n       SubType.prototype.setVal = function () {\n        return false;\n      };\n      console.log(SuperType.prototype);\n      //{getVal: ƒ, setVal: ƒ, constructor: ƒ}\n```\n基于寄生组合继承与组合继承的缺点，通过原型组合继承去规避问题\n  **使用原型组合继承的方式，通过Object.create方法，**子类原型对象可以通过隐式属性__proto__指向父类的原型对象，且子类原型对象不会影响到父类原型对象。\n  <br/>\n  \n精华部分：\n```javascript\n       function inheritPrototype(subType, superType) {\n        //比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类\n        //比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用\n        subType.prototype = Object.create(superType.prototype);\n      }\n```\n完整代码:\n```javascript\n    function SuperType(name) {\n        this.name = name;\n        this.colorsArr = [\"red\", \"yellow\"];\n      }\n      SuperType.prototype.sayName = function () {\n        console.log(this.name);\n      };\n      function SubType(name, age) {\n        SuperType.call(this, name);\n        this.age = age;\n      }\n      inheritPrototype(SubType, SuperType);\n\n      SubType.prototype.sayAge = function () {\n        console.log(this.age);\n      };\n      let person1 = new SubType(\"Lulu\", 28);\n      person1.sayName();\n      person1.sayAge(); //函数变量提升可以放在调用之后定义\n      function inheritPrototype(subType, superType) {\n        //比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类\n        //比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用\n        subType.prototype = Object.create(superType.prototype);\n       //保证构造器的一致性，constructor指向subType\n        subType.prototype.constructor = subType;\n     }\n\n      //子类SubType的原型对象的隐式属性指向了父类原型对象。\n      //子类原型对象既可以添加方法，公共属性也可以完全不影响父类原型对象。\n      console.log(SubType.prototype.__proto__ == SuperType.prototype); //true\n      console.log(SubType.prototype instanceof SuperType); //true\n\n      //子类添加的sayAge方法并没有添加到父类原型对象中\n      console.log(SuperType.prototype); //{sayName: ƒ, constructor: ƒ}\n      console.log(SubType.prototype.constructor);//function Subtype(){ }\n\n```","source":"_posts/对象模式设计-各种继承详解与差异.md","raw":"---\ntitle: 对象模式设计-各种继承详解与差异\ncatalog: true\ndate: 2022-11-02 10:30\nsubtitle: javascript权威指南第六章对象篇\nlang: cn\nheader-img: /img/header_img/lml_bg.jpg\ntags:\n - js对象\ncategories:\n - javascript\n---\n# 各种继承详解与差异\n补充：instanceof   用于检测构造函数的prototype是否存在于这个实例对象的原型链上实例对象 instanceof  构造函数\n<br/>\n\n #### 原型链继承\n将父类型的实例赋值给要继承的对象的原型对象，子原型对象拿到父实例中所有属性和方法，摒弃原本的原型对象，新建出一个原型对象指向了父实例的原型对象。新建原型对象的constructor指向了实例的构造函数。新建原型对象可以通过原型链找到实例原型对象上的属性和方法\n```javascript\n    function SuperType() {\n        this.property = true;\n      }\n      SuperType.prototype.getSuperValues = function () {\n        console.log(this.property);\n      };\n      function SubType() {\n        this.subProperty = false;\n      }\n      SubType.prototype.getSubValues = function () {\n        console.log(this.subProperty);\n      };\n      SubType.prototype=new SuperType()\n      let instance=new SubType()\n      instance.getSuperValues()//true\n\n     //getSubValues是SubType旧原型对象上的方法，当等于SuperType实例之后\n      //开辟了一个新的原型对象，现在实例instance指向了\n      //新的原型对象，是找不到getSubValues方法的\n     instance.getSubValues()//error  \n\n      console.log(instance.subProperty);//false 子类型的实例属性还是可以拿到的\n\n      //旧的SubType对象的constructor指向构造函数SubType\n      //继承SuperType实例之后，新的SubType对象的constructor指向构造函数SuperType\n     console.log(SubType.prototype.constructor==SuperType)//true\n\n      //SupertType的原型对象通过隐式属性__proto__指向了Object的原型对象\n      //Array,String这些原生对象上的方法都是通过这个方法找到的\n     console.log(SuperType.prototype.__proto__==Object.prototype)//true\n\n     //确定原型与实例的关系\n     //由于原型链的关系，可以说实例instance是Object、SupertType、SubType任何\n     //一个类型的实例 \n     //instanceof 前面是一个对象，后面一定要是一个函数或者构造器，\n     //如果返回为ture则代表这个对象的___proto___指向了函数的原型对象\n     console.log(instance instanceof SubType)//true\n     console.log(instance instanceof SuperType)//true\n     console.log(instance instanceof Object)//true\n\n```\n 以上面的例子为例，要找到getSuperValues方法，原型链的搜索机制为：\n  1. 搜索实例instance\n  2. 搜索SubType.prototype（新的SubType原型对象）\n  3. 搜索SuperType.prototype\n在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下\n\n<br/>\n\n**如果想要使用子构造函数的原型对象上的方法,定义方法要在继承之后**\n```javascript\n  function SuperType(){\n       this.prototype=true\n     }\n     SuperType.prototype.getSuperVal=function(){\n       console.log(this.prototype)\n     }\n     function SubType(){\n       this.prototype=false\n     }\n     let supertInstance=new SuperType()\n     SubType.prototype=supertInstance\n    //  添加方法\n     SubType.prototype.getSubVal=function(){\n       console.log(this.prototype)\n     }\n     //重写超类型中的方法\n     SubType.prototype.getSuperVal=function(){\n       console.log(this.prototype)\n     }\n     let instance=new SubType()\n     instance.getSubVal() //false\n     instance.getSuperVal()//false\n\n    //但是超类型中的方法没有被子类型的重构改变\n     supertInstance.getSuperVal()//true\n\n```\n<br/>\n\n**原型链继承的缺点**\n从超类型那里继承到的实例属性都会变成子类原型对象上的共享属性，这样子引用对象都会变成共享对象，就会造成互相影响。\n```javascript\n   function SuperColor(){\n      this.colorArr=[\"red\",\"yellow\"]  \n    }\n    \n    function SubColor(){}\n    SubColor.prototype=new SuperColor()\n\n    let color1=new SubColor()\n    //从超类型实例继承而来的colorArr会变成子类原型对象上的共享对象\n    color1.colorArr.push(\"green\")\n    console.log(color1.colorArr)//['red', 'yellow', 'green']\n    let color2=new SubColor()\n    //会被互相影响\n    console.log(color2.colorArr)//['red', 'yellow', 'green']\n\n\n    let superColor1=new SuperColor()\n    superColor1.colorArr.push(\"green\")\n    console.log(superColor1.colorArr)//['red', 'yellow', 'green']\n    let superColor2=new SuperColor()\n    //colorArr是超类型的实例属性，\n    //每次实例化都会给这个对象添加一个colorArr副本，不会互相影响\n    console.log(superColor2.colorArr)//['red', 'yellow']\n\n```\n<br/>\n\n#### 借用构造函数 也叫伪造对象和经典继承\n  通过在子类型构造函数的内部调用超类型构造函数实现。\n  \n  \n\n **函数只不过是在特定环境中执行代码的对象，可以通过使用apply或者call方法在新创建的对象上执行构造函数**\n```javascript\n    function SuperType(){\n      this.colorArr=[\"red\",\"yellow\"]\n      }\n    function SubType(){\n      SuperType.call(this)\n    }\n   //在新创建的SubType实例的环境下调用了SuperType的构造函数。\n   //相当于会在新SubType对象上执行SuperType函数中定义的所有对象初始化代码\n   //这样子每个SubType的实例都会有自己的colorArr属性副本\n    let color1=new SubType()\n    color1.colorArr.push(\"green\")\n    console.log(color1.colorArr)//['red', 'yellow', 'green']\n    let color2=new SubType()\n    console.log(color2.colorArr)//['red', 'yellow']\n\n```\n**优势**\n可以传递参数、每个实例的属性都会创建一个副本，对用引用对象不会互相影响\n<br/>\n\n**缺点**\n每次实例化都会把属性方法创建一份副本其实是一把双刃剑，每个实例都有一份独立的方法副本会造成内存浪费，方法应该要共享\n```javascript\n   function SuperPerson(name){\n      this.name=name\n      this.sayName=function(){\n        console.log(this.name)\n      }\n    }\n    function SubPerson(name,age){\n     SuperPerson.call(this,name)\n     //添加子类型属性，写在调用超类型构造函数后。否则被父类型覆盖\n     this.age=age\n    }\n\n    //可以向超类型传参\n    let person1=new SubPerson(\"LuLu\",29)\n    person1.sayName() //LuLu\n    console.log(person1.age)//29\n    let person2=new SubPerson(\"Lily\",28)\n    person2.sayName() //Lily\n\n   //无法通过原型指针找到超类型构造函数,无法识别继承的是哪个对象\n    console.log(person1 instanceof SuperPerson)//false\n\n```\n<br/>\n\n#### 组合继承\n1. 需要传参的私有属性与引用对象在超类构造函数中定义，通过借用构造函数继承，这样子每个实例上的对应属性会有一份属性副本。\n2. 共享属性与方法通过原型模式创建，通过原型链继承，节约内存。\n3. 创建的实例因为有通过原型链继承，可以识别继承于哪个超类型的对象。\n组合继承避免了原型链与借用构造函数的缺陷，融合优点。\n\n```javascript\n   function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      SuperType.call(this,name)\n      this.age=age\n    }\n    SubType.prototype=new SuperType()\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n    let person1=new SubType(\"LuLu\",29)\n    person1.colorsArr.push(\"green\")\n    console.log(person1.colorsArr)//[\"red\",\"yellow\",\"green\"]\n    person1.sayName()//\"LuLu\"\n    person1.sayAge()//29\n\n    let person2=new SubType(\"bibi\",27)\n    //colorsArr是实例属性会拷贝出一份属于person2实例的副本，不会受person1影响\n    console.log(person2.colorsArr)//[\"red\",\"yellow\"]\n    person2.sayName()//\"bibi\"\n    person2.sayAge()//27\n    \n    //两个实例方法都会指向SuperType的原型对象中的sayName方法\n    console.log(person1.sayName==person2.sayName)//true\n\n    //通过原型连继承可以判断出是否继承与哪个构造函数，识别出对象\n    console.log(person1 instanceof SubType)//true\n    console.log(person1 instanceof SuperType)//true\n\n```\n**组合继承的缺点:**\n 组合继承无论什么情况下都会调用两次超类型构造函数，超类型构造函数中的属性会被继承两次。\n   第一次是在子类型原型继承超类型实例的时候，属性会被记在子类型的原型中。第二次是在子构造函数中调用父构造函数时，在继承一遍父构造函数中的实例属性。\n    所以父类构造函数的属性会被子类原型继承一遍，子类实例再继承一遍（子类实例会重写掉子类原型上的属性，因为是后调用）\n```javascript\n    function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      //第二次调用父类构造函数，继承实例属性到SubType实例上\n      //因为是后调用，SubType原型对象上的name和colorsArr会被重写，且被屏蔽\n      //这时候SubType原型对象上有name和colorsArr属性，SubType上也有\n      //name和colorsArr属性\n      SuperType.call(this,name)\n      this.age=age\n    }\n    //第一次调用父类构造函数，继承实例属性到SubType原型对象上\n    SubType.prototype=new SuperType()\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n\n```\n<br/>\n\n#### 原型式继承\n设计思想：\n如果只是想让一个对象与另一个对象保持类似可以使用原型式继承。\n先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。\n\n```javascript\n   function object(o){\n      function F(){}\n      F.prototype=o\n      return new F()\n    }\n    let person={\n      name:\"LuLu\",\n      age:29\n    }\n    let person1=object(person)\n    console.log(person1.name) //\"LuLu\"\n    console.log(person1.age)//29\n\n```\n从本质上讲，object（）对传入其中的对象执行了一次浅拷贝\n**Object.create规范了原型式继承,就相当于是例子中的object方法**\n```javascript\n    let person={\n      name:\"LuLu\",\n      age:29\n    }\n    let person1=Object.create(person)\n    console.log(person1.name) //\"LuLu\"\n    console.log(person1.age)//29\n```\n缺点：\n其实原型式继承的本质是把一个函数的原型对象赋值给要创建的那个对象（新创建的对象的__proto__指向了被创建函数的prototype），所以引用类型还是会有共享值得情况。\n**Object.create创建的对象会存在引用对象共享值得情况。并且没有办法继承到父类的实例属性和实例方法。**\n```javascript\n    let person={\n      colorArr:[\"red\",\"yellow\"]\n    }\n    let person1=Object.create(person)\n    person1.colorArr.push(\"green\")\n    console.log(person1.colorArr)//['red', 'yellow', 'green']\n\n    let person2=Object.create(person)\n    console.log(person2.colorArr)//['red', 'yellow', 'green']\n\n```\n<br/>\n\n#### 寄生继承\n寄生继承与原型继承相类似：\n原型继承复制一个对象到构造函数的原型对象上。然后返回实例。\n寄生继承通过Object复制一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象，最后返回对象\n```javascript\n    function createFunc(original){\n    //通过Object复制一个对象，不是一定要用Object的，其他可以复制对象的都可以用\n      var clone=Object(original)\n    //给对象添加方法\n      clone.sayName=function(){\n        console.log(this.name)\n      }\n      return clone\n    }\n    let person={\n      name:\"bibi\"\n    }\n    let person1=createFunc(person)\n    person1.sayName()\n\n```\n<br/>\n\n#### 寄生组合继承\n针对于组合继承中父类的实例属性会生成两份的情况，寄生组合其实就是拷贝一份父类原型给到子类，子类不再通过父类构造函数获得从而子类原型上不会再有父类实例属性。\n**借用构造是有call和apply方法不变，原型继承从继承父类构造函数变成继承父类原型对象**\n```javascript\n   function SuperType(name){\n      this.name=name\n      this.colorsArr=[\"red\",\"yellow\"]\n    }\n    SuperType.prototype.sayName=function(){\n      console.log(this.name)\n    }\n    function SubType(name,age){\n      SuperType.call(this,name)\n      this.age=age\n    }\n    inheritPrototype(SubType,SuperType)\n\n    SubType.prototype.sayAge=function(){\n      console.log(this.age)\n    }\n    let person1=new SubType(\"Lulu\",28)\n    person1.sayName()\n    person1.sayAge()\n   \n     //函数变量提升可以放在调用之后定义\n    function inheritPrototype(subType,superType){\n     //拷贝一份父类原型副本赋值给子类原型，实现继承\n     //原本的object()方法已经被废弃，所以现在使用的Object方法。\n     //但是使用Object方法相当于父类原型对象赋值给子类原型对象，\n     //父类的原型对象会被子类原型对象所影响\n      subType.prototype=Object(superType.prototype)\n    }\n\n```\n<br/>\n\n#### 原型组合继承(最佳方案)\n**原型链继承不可以直接赋值，父类的原型对象会被子类原型对象所影响**\n```javascript\n      function SuperType() {}\n        SuperType.prototype.getVal = function () {\n        return true;\n      };\n      function SubType() {}\n      //如果使用寄生继承，object()已经被废弃，现在只有Object()方法，\n      //但是Object()方法与直接去赋值问题相同，父类原型对象会被子类原型对象所影响\n      //  SubType.prototype = Object(SuperType.prototype);\n       SubType.prototype = SuperType.prototype;\n       SubType.prototype.setVal = function () {\n        return false;\n      };\n      console.log(SuperType.prototype);\n      //{getVal: ƒ, setVal: ƒ, constructor: ƒ}\n```\n基于寄生组合继承与组合继承的缺点，通过原型组合继承去规避问题\n  **使用原型组合继承的方式，通过Object.create方法，**子类原型对象可以通过隐式属性__proto__指向父类的原型对象，且子类原型对象不会影响到父类原型对象。\n  <br/>\n  \n精华部分：\n```javascript\n       function inheritPrototype(subType, superType) {\n        //比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类\n        //比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用\n        subType.prototype = Object.create(superType.prototype);\n      }\n```\n完整代码:\n```javascript\n    function SuperType(name) {\n        this.name = name;\n        this.colorsArr = [\"red\", \"yellow\"];\n      }\n      SuperType.prototype.sayName = function () {\n        console.log(this.name);\n      };\n      function SubType(name, age) {\n        SuperType.call(this, name);\n        this.age = age;\n      }\n      inheritPrototype(SubType, SuperType);\n\n      SubType.prototype.sayAge = function () {\n        console.log(this.age);\n      };\n      let person1 = new SubType(\"Lulu\", 28);\n      person1.sayName();\n      person1.sayAge(); //函数变量提升可以放在调用之后定义\n      function inheritPrototype(subType, superType) {\n        //比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类\n        //比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用\n        subType.prototype = Object.create(superType.prototype);\n       //保证构造器的一致性，constructor指向subType\n        subType.prototype.constructor = subType;\n     }\n\n      //子类SubType的原型对象的隐式属性指向了父类原型对象。\n      //子类原型对象既可以添加方法，公共属性也可以完全不影响父类原型对象。\n      console.log(SubType.prototype.__proto__ == SuperType.prototype); //true\n      console.log(SubType.prototype instanceof SuperType); //true\n\n      //子类添加的sayAge方法并没有添加到父类原型对象中\n      console.log(SuperType.prototype); //{sayName: ƒ, constructor: ƒ}\n      console.log(SubType.prototype.constructor);//function Subtype(){ }\n\n```","slug":"对象模式设计-各种继承详解与差异","published":1,"updated":"2022-11-02T02:30:00.000Z","_id":"cl9z0y82q00018guu88fpf6t1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>各种继承详解与差异</h1>\n<p>补充：instanceof   用于检测构造函数的prototype是否存在于这个实例对象的原型链上实例对象 instanceof  构造函数<br>\n<br/></p>\n<h4 id=\"原型链继承\">原型链继承</h4>\n<p>将父类型的实例赋值给要继承的对象的原型对象，子原型对象拿到父实例中所有属性和方法，摒弃原本的原型对象，新建出一个原型对象指向了父实例的原型对象。新建原型对象的constructor指向了实例的构造函数。新建原型对象可以通过原型链找到实例原型对象上的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.property = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SuperType.prototype.getSuperValues = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.property);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subProperty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SubType.prototype.getSubValues = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.subProperty);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> instance=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">      instance.getSuperValues()<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//getSubValues是SubType旧原型对象上的方法，当等于SuperType实例之后</span></span><br><span class=\"line\">      <span class=\"comment\">//开辟了一个新的原型对象，现在实例instance指向了</span></span><br><span class=\"line\">      <span class=\"comment\">//新的原型对象，是找不到getSubValues方法的</span></span><br><span class=\"line\">     instance.getSubValues()<span class=\"comment\">//error  </span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(instance.subProperty);<span class=\"comment\">//false 子类型的实例属性还是可以拿到的</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//旧的SubType对象的constructor指向构造函数SubType</span></span><br><span class=\"line\">      <span class=\"comment\">//继承SuperType实例之后，新的SubType对象的constructor指向构造函数SuperType</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(SubType.prototype.constructor==SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//SupertType的原型对象通过隐式属性__proto__指向了Object的原型对象</span></span><br><span class=\"line\">      <span class=\"comment\">//Array,String这些原生对象上的方法都是通过这个方法找到的</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(SuperType.prototype.__proto__==<span class=\"built_in\">Object</span>.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//确定原型与实例的关系</span></span><br><span class=\"line\">     <span class=\"comment\">//由于原型链的关系，可以说实例instance是Object、SupertType、SubType任何</span></span><br><span class=\"line\">     <span class=\"comment\">//一个类型的实例 </span></span><br><span class=\"line\">     <span class=\"comment\">//instanceof 前面是一个对象，后面一定要是一个函数或者构造器，</span></span><br><span class=\"line\">     <span class=\"comment\">//如果返回为ture则代表这个对象的___proto___指向了函数的原型对象</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> SubType)<span class=\"comment\">//true</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上面的例子为例，要找到getSuperValues方法，原型链的搜索机制为：</p>\n<ol>\n<li>搜索实例instance</li>\n<li>搜索SubType.prototype（新的SubType原型对象）</li>\n<li>搜索SuperType.prototype<br>\n在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下</li>\n</ol>\n<br/>\n<p><strong>如果想要使用子构造函数的原型对象上的方法,定义方法要在继承之后</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.prototype=<span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     SuperType.prototype.getSuperVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.prototype=<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> supertInstance=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">     SubType.prototype=supertInstance</span><br><span class=\"line\">    <span class=\"comment\">//  添加方法</span></span><br><span class=\"line\">     SubType.prototype.getSubVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//重写超类型中的方法</span></span><br><span class=\"line\">     SubType.prototype.getSuperVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> instance=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">     instance.getSubVal() <span class=\"comment\">//false</span></span><br><span class=\"line\">     instance.getSuperVal()<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//但是超类型中的方法没有被子类型的重构改变</span></span><br><span class=\"line\">     supertInstance.getSuperVal()<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<p><strong>原型链继承的缺点</strong><br>\n从超类型那里继承到的实例属性都会变成子类原型对象上的共享属性，这样子引用对象都会变成共享对象，就会造成互相影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubColor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    SubColor.prototype=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color1=<span class=\"keyword\">new</span> SubColor()</span><br><span class=\"line\">    <span class=\"comment\">//从超类型实例继承而来的colorArr会变成子类原型对象上的共享对象</span></span><br><span class=\"line\">    color1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color2=<span class=\"keyword\">new</span> SubColor()</span><br><span class=\"line\">    <span class=\"comment\">//会被互相影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> superColor1=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\">    superColor1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(superColor1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> superColor2=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\">    <span class=\"comment\">//colorArr是超类型的实例属性，</span></span><br><span class=\"line\">    <span class=\"comment\">//每次实例化都会给这个对象添加一个colorArr副本，不会互相影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(superColor2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"借用构造函数-也叫伪造对象和经典继承\">借用构造函数 也叫伪造对象和经典继承</h4>\n<p>通过在子类型构造函数的内部调用超类型构造函数实现。</p>\n<p><strong>函数只不过是在特定环境中执行代码的对象，可以通过使用apply或者call方法在新创建的对象上执行构造函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//在新创建的SubType实例的环境下调用了SuperType的构造函数。</span></span><br><span class=\"line\">   <span class=\"comment\">//相当于会在新SubType对象上执行SuperType函数中定义的所有对象初始化代码</span></span><br><span class=\"line\">   <span class=\"comment\">//这样子每个SubType的实例都会有自己的colorArr属性副本</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color1=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">    color1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color2=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>优势</strong><br>\n可以传递参数、每个实例的属性都会创建一个副本，对用引用对象不会互相影响<br>\n<br/></p>\n<p><strong>缺点</strong><br>\n每次实例化都会把属性方法创建一份副本其实是一把双刃剑，每个实例都有一份独立的方法副本会造成内存浪费，方法应该要共享</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperPerson</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubPerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">     SuperPerson.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">     <span class=\"comment\">//添加子类型属性，写在调用超类型构造函数后。否则被父类型覆盖</span></span><br><span class=\"line\">     <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以向超类型传参</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubPerson(<span class=\"string\">&quot;LuLu&quot;</span>,<span class=\"number\">29</span>)</span><br><span class=\"line\">    person1.sayName() <span class=\"comment\">//LuLu</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"keyword\">new</span> SubPerson(<span class=\"string\">&quot;Lily&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">    person2.sayName() <span class=\"comment\">//Lily</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//无法通过原型指针找到超类型构造函数,无法识别继承的是哪个对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SuperPerson)<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"组合继承\">组合继承</h4>\n<ol>\n<li>需要传参的私有属性与引用对象在超类构造函数中定义，通过借用构造函数继承，这样子每个实例上的对应属性会有一份属性副本。</li>\n<li>共享属性与方法通过原型模式创建，通过原型链继承，节约内存。</li>\n<li>创建的实例因为有通过原型链继承，可以识别继承于哪个超类型的对象。<br>\n组合继承避免了原型链与借用构造函数的缺陷，融合优点。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;LuLu&quot;</span>,<span class=\"number\">29</span>)</span><br><span class=\"line\">    person1.colorsArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.colorsArr)<span class=\"comment\">//[&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]</span></span><br><span class=\"line\">    person1.sayName()<span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    person1.sayAge()<span class=\"comment\">//29</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;bibi&quot;</span>,<span class=\"number\">27</span>)</span><br><span class=\"line\">    <span class=\"comment\">//colorsArr是实例属性会拷贝出一份属于person2实例的副本，不会受person1影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person2.colorsArr)<span class=\"comment\">//[&quot;red&quot;,&quot;yellow&quot;]</span></span><br><span class=\"line\">    person2.sayName()<span class=\"comment\">//&quot;bibi&quot;</span></span><br><span class=\"line\">    person2.sayAge()<span class=\"comment\">//27</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//两个实例方法都会指向SuperType的原型对象中的sayName方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.sayName==person2.sayName)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过原型连继承可以判断出是否继承与哪个构造函数，识别出对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SubType)<span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>组合继承的缺点:</strong><br>\n组合继承无论什么情况下都会调用两次超类型构造函数，超类型构造函数中的属性会被继承两次。<br>\n第一次是在子类型原型继承超类型实例的时候，属性会被记在子类型的原型中。第二次是在子构造函数中调用父构造函数时，在继承一遍父构造函数中的实例属性。<br>\n所以父类构造函数的属性会被子类原型继承一遍，子类实例再继承一遍（子类实例会重写掉子类原型上的属性，因为是后调用）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//第二次调用父类构造函数，继承实例属性到SubType实例上</span></span><br><span class=\"line\">      <span class=\"comment\">//因为是后调用，SubType原型对象上的name和colorsArr会被重写，且被屏蔽</span></span><br><span class=\"line\">      <span class=\"comment\">//这时候SubType原型对象上有name和colorsArr属性，SubType上也有</span></span><br><span class=\"line\">      <span class=\"comment\">//name和colorsArr属性</span></span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第一次调用父类构造函数，继承实例属性到SubType原型对象上</span></span><br><span class=\"line\">    SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"原型式继承\">原型式继承</h4>\n<p>设计思想：<br>\n如果只是想让一个对象与另一个对象保持类似可以使用原型式继承。<br>\n先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">      F.prototype=o</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;LuLu&quot;</span>,</span><br><span class=\"line\">      age:<span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=object(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.name) <span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从本质上讲，object（）对传入其中的对象执行了一次浅拷贝<br>\n<strong>Object.create规范了原型式继承,就相当于是例子中的object方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;LuLu&quot;</span>,</span><br><span class=\"line\">      age:<span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.name) <span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br></pre></td></tr></table></figure>\n<p>缺点：<br>\n其实原型式继承的本质是把一个函数的原型对象赋值给要创建的那个对象（新创建的对象的__proto__指向了被创建函数的prototype），所以引用类型还是会有共享值得情况。<br>\n<strong>Object.create创建的对象会存在引用对象共享值得情况。并且没有办法继承到父类的实例属性和实例方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      colorArr:[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    person1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"寄生继承\">寄生继承</h4>\n<p>寄生继承与原型继承相类似：<br>\n原型继承复制一个对象到构造函数的原型对象上。然后返回实例。<br>\n寄生继承通过Object复制一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象，最后返回对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunc</span>(<span class=\"params\">original</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过Object复制一个对象，不是一定要用Object的，其他可以复制对象的都可以用</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> clone=<span class=\"built_in\">Object</span>(original)</span><br><span class=\"line\">    <span class=\"comment\">//给对象添加方法</span></span><br><span class=\"line\">      clone.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;bibi&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=createFunc(person)</span><br><span class=\"line\">    person1.sayName()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"寄生组合继承\">寄生组合继承</h4>\n<p>针对于组合继承中父类的实例属性会生成两份的情况，寄生组合其实就是拷贝一份父类原型给到子类，子类不再通过父类构造函数获得从而子类原型上不会再有父类实例属性。<br>\n<strong>借用构造是有call和apply方法不变，原型继承从继承父类构造函数变成继承父类原型对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inheritPrototype(SubType,SuperType)</span><br><span class=\"line\"></span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;Lulu&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">    person1.sayName()</span><br><span class=\"line\">    person1.sayAge()</span><br><span class=\"line\">   </span><br><span class=\"line\">     <span class=\"comment\">//函数变量提升可以放在调用之后定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType,superType</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//拷贝一份父类原型副本赋值给子类原型，实现继承</span></span><br><span class=\"line\">     <span class=\"comment\">//原本的object()方法已经被废弃，所以现在使用的Object方法。</span></span><br><span class=\"line\">     <span class=\"comment\">//但是使用Object方法相当于父类原型对象赋值给子类原型对象，</span></span><br><span class=\"line\">     <span class=\"comment\">//父类的原型对象会被子类原型对象所影响</span></span><br><span class=\"line\">      subType.prototype=<span class=\"built_in\">Object</span>(superType.prototype)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"原型组合继承-最佳方案\">原型组合继承(最佳方案)</h4>\n<p><strong>原型链继承不可以直接赋值，父类的原型对象会被子类原型对象所影响</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        SuperType.prototype.getVal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果使用寄生继承，object()已经被废弃，现在只有Object()方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//但是Object()方法与直接去赋值问题相同，父类原型对象会被子类原型对象所影响</span></span><br><span class=\"line\">      <span class=\"comment\">//  SubType.prototype = Object(SuperType.prototype);</span></span><br><span class=\"line\">       SubType.prototype = SuperType.prototype;</span><br><span class=\"line\">       SubType.prototype.setVal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SuperType.prototype);</span><br><span class=\"line\">      <span class=\"comment\">//&#123;getVal: ƒ, setVal: ƒ, constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure>\n<p>基于寄生组合继承与组合继承的缺点，通过原型组合继承去规避问题<br>\n**使用原型组合继承的方式，通过Object.create方法，**子类原型对象可以通过隐式属性__proto__指向父类的原型对象，且子类原型对象不会影响到父类原型对象。<br>\n<br/></p>\n<p>精华部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类</span></span><br><span class=\"line\">        <span class=\"comment\">//比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用</span></span><br><span class=\"line\">        subType.prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.colorsArr = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        SuperType.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      inheritPrototype(SubType, SuperType);</span><br><span class=\"line\"></span><br><span class=\"line\">      SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;Lulu&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">      person1.sayAge(); <span class=\"comment\">//函数变量提升可以放在调用之后定义</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类</span></span><br><span class=\"line\">        <span class=\"comment\">//比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用</span></span><br><span class=\"line\">        subType.prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);</span><br><span class=\"line\">       <span class=\"comment\">//保证构造器的一致性，constructor指向subType</span></span><br><span class=\"line\">        subType.prototype.constructor = subType;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//子类SubType的原型对象的隐式属性指向了父类原型对象。</span></span><br><span class=\"line\">      <span class=\"comment\">//子类原型对象既可以添加方法，公共属性也可以完全不影响父类原型对象。</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype.__proto__ == SuperType.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype <span class=\"keyword\">instanceof</span> SuperType); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//子类添加的sayAge方法并没有添加到父类原型对象中</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SuperType.prototype); <span class=\"comment\">//&#123;sayName: ƒ, constructor: ƒ&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype.constructor);<span class=\"comment\">//function Subtype()&#123; &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1>各种继承详解与差异</h1>\n<p>补充：instanceof   用于检测构造函数的prototype是否存在于这个实例对象的原型链上实例对象 instanceof  构造函数<br>\n<br/></p>\n<h4 id=\"原型链继承\">原型链继承</h4>\n<p>将父类型的实例赋值给要继承的对象的原型对象，子原型对象拿到父实例中所有属性和方法，摒弃原本的原型对象，新建出一个原型对象指向了父实例的原型对象。新建原型对象的constructor指向了实例的构造函数。新建原型对象可以通过原型链找到实例原型对象上的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.property = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SuperType.prototype.getSuperValues = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.property);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subProperty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SubType.prototype.getSubValues = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.subProperty);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> instance=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">      instance.getSuperValues()<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//getSubValues是SubType旧原型对象上的方法，当等于SuperType实例之后</span></span><br><span class=\"line\">      <span class=\"comment\">//开辟了一个新的原型对象，现在实例instance指向了</span></span><br><span class=\"line\">      <span class=\"comment\">//新的原型对象，是找不到getSubValues方法的</span></span><br><span class=\"line\">     instance.getSubValues()<span class=\"comment\">//error  </span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(instance.subProperty);<span class=\"comment\">//false 子类型的实例属性还是可以拿到的</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//旧的SubType对象的constructor指向构造函数SubType</span></span><br><span class=\"line\">      <span class=\"comment\">//继承SuperType实例之后，新的SubType对象的constructor指向构造函数SuperType</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(SubType.prototype.constructor==SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//SupertType的原型对象通过隐式属性__proto__指向了Object的原型对象</span></span><br><span class=\"line\">      <span class=\"comment\">//Array,String这些原生对象上的方法都是通过这个方法找到的</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(SuperType.prototype.__proto__==<span class=\"built_in\">Object</span>.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//确定原型与实例的关系</span></span><br><span class=\"line\">     <span class=\"comment\">//由于原型链的关系，可以说实例instance是Object、SupertType、SubType任何</span></span><br><span class=\"line\">     <span class=\"comment\">//一个类型的实例 </span></span><br><span class=\"line\">     <span class=\"comment\">//instanceof 前面是一个对象，后面一定要是一个函数或者构造器，</span></span><br><span class=\"line\">     <span class=\"comment\">//如果返回为ture则代表这个对象的___proto___指向了函数的原型对象</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> SubType)<span class=\"comment\">//true</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(instance <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上面的例子为例，要找到getSuperValues方法，原型链的搜索机制为：</p>\n<ol>\n<li>搜索实例instance</li>\n<li>搜索SubType.prototype（新的SubType原型对象）</li>\n<li>搜索SuperType.prototype<br>\n在找不到属性或方法的情况下，搜索过程总是要一环一环地前行到原型链末端才会停下</li>\n</ol>\n<br/>\n<p><strong>如果想要使用子构造函数的原型对象上的方法,定义方法要在继承之后</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.prototype=<span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     SuperType.prototype.getSuperVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.prototype=<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> supertInstance=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">     SubType.prototype=supertInstance</span><br><span class=\"line\">    <span class=\"comment\">//  添加方法</span></span><br><span class=\"line\">     SubType.prototype.getSubVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//重写超类型中的方法</span></span><br><span class=\"line\">     SubType.prototype.getSuperVal=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.prototype)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> instance=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">     instance.getSubVal() <span class=\"comment\">//false</span></span><br><span class=\"line\">     instance.getSuperVal()<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//但是超类型中的方法没有被子类型的重构改变</span></span><br><span class=\"line\">     supertInstance.getSuperVal()<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<p><strong>原型链继承的缺点</strong><br>\n从超类型那里继承到的实例属性都会变成子类原型对象上的共享属性，这样子引用对象都会变成共享对象，就会造成互相影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubColor</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    SubColor.prototype=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color1=<span class=\"keyword\">new</span> SubColor()</span><br><span class=\"line\">    <span class=\"comment\">//从超类型实例继承而来的colorArr会变成子类原型对象上的共享对象</span></span><br><span class=\"line\">    color1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color2=<span class=\"keyword\">new</span> SubColor()</span><br><span class=\"line\">    <span class=\"comment\">//会被互相影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> superColor1=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\">    superColor1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(superColor1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> superColor2=<span class=\"keyword\">new</span> SuperColor()</span><br><span class=\"line\">    <span class=\"comment\">//colorArr是超类型的实例属性，</span></span><br><span class=\"line\">    <span class=\"comment\">//每次实例化都会给这个对象添加一个colorArr副本，不会互相影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(superColor2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"借用构造函数-也叫伪造对象和经典继承\">借用构造函数 也叫伪造对象和经典继承</h4>\n<p>通过在子类型构造函数的内部调用超类型构造函数实现。</p>\n<p><strong>函数只不过是在特定环境中执行代码的对象，可以通过使用apply或者call方法在新创建的对象上执行构造函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//在新创建的SubType实例的环境下调用了SuperType的构造函数。</span></span><br><span class=\"line\">   <span class=\"comment\">//相当于会在新SubType对象上执行SuperType函数中定义的所有对象初始化代码</span></span><br><span class=\"line\">   <span class=\"comment\">//这样子每个SubType的实例都会有自己的colorArr属性副本</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color1=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">    color1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> color2=<span class=\"keyword\">new</span> SubType()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>优势</strong><br>\n可以传递参数、每个实例的属性都会创建一个副本，对用引用对象不会互相影响<br>\n<br/></p>\n<p><strong>缺点</strong><br>\n每次实例化都会把属性方法创建一份副本其实是一把双刃剑，每个实例都有一份独立的方法副本会造成内存浪费，方法应该要共享</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperPerson</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubPerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">     SuperPerson.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">     <span class=\"comment\">//添加子类型属性，写在调用超类型构造函数后。否则被父类型覆盖</span></span><br><span class=\"line\">     <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以向超类型传参</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubPerson(<span class=\"string\">&quot;LuLu&quot;</span>,<span class=\"number\">29</span>)</span><br><span class=\"line\">    person1.sayName() <span class=\"comment\">//LuLu</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"keyword\">new</span> SubPerson(<span class=\"string\">&quot;Lily&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">    person2.sayName() <span class=\"comment\">//Lily</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//无法通过原型指针找到超类型构造函数,无法识别继承的是哪个对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SuperPerson)<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"组合继承\">组合继承</h4>\n<ol>\n<li>需要传参的私有属性与引用对象在超类构造函数中定义，通过借用构造函数继承，这样子每个实例上的对应属性会有一份属性副本。</li>\n<li>共享属性与方法通过原型模式创建，通过原型链继承，节约内存。</li>\n<li>创建的实例因为有通过原型链继承，可以识别继承于哪个超类型的对象。<br>\n组合继承避免了原型链与借用构造函数的缺陷，融合优点。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;LuLu&quot;</span>,<span class=\"number\">29</span>)</span><br><span class=\"line\">    person1.colorsArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.colorsArr)<span class=\"comment\">//[&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]</span></span><br><span class=\"line\">    person1.sayName()<span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    person1.sayAge()<span class=\"comment\">//29</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;bibi&quot;</span>,<span class=\"number\">27</span>)</span><br><span class=\"line\">    <span class=\"comment\">//colorsArr是实例属性会拷贝出一份属于person2实例的副本，不会受person1影响</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person2.colorsArr)<span class=\"comment\">//[&quot;red&quot;,&quot;yellow&quot;]</span></span><br><span class=\"line\">    person2.sayName()<span class=\"comment\">//&quot;bibi&quot;</span></span><br><span class=\"line\">    person2.sayAge()<span class=\"comment\">//27</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//两个实例方法都会指向SuperType的原型对象中的sayName方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.sayName==person2.sayName)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过原型连继承可以判断出是否继承与哪个构造函数，识别出对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SubType)<span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> SuperType)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>组合继承的缺点:</strong><br>\n组合继承无论什么情况下都会调用两次超类型构造函数，超类型构造函数中的属性会被继承两次。<br>\n第一次是在子类型原型继承超类型实例的时候，属性会被记在子类型的原型中。第二次是在子构造函数中调用父构造函数时，在继承一遍父构造函数中的实例属性。<br>\n所以父类构造函数的属性会被子类原型继承一遍，子类实例再继承一遍（子类实例会重写掉子类原型上的属性，因为是后调用）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//第二次调用父类构造函数，继承实例属性到SubType实例上</span></span><br><span class=\"line\">      <span class=\"comment\">//因为是后调用，SubType原型对象上的name和colorsArr会被重写，且被屏蔽</span></span><br><span class=\"line\">      <span class=\"comment\">//这时候SubType原型对象上有name和colorsArr属性，SubType上也有</span></span><br><span class=\"line\">      <span class=\"comment\">//name和colorsArr属性</span></span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//第一次调用父类构造函数，继承实例属性到SubType原型对象上</span></span><br><span class=\"line\">    SubType.prototype=<span class=\"keyword\">new</span> SuperType()</span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"原型式继承\">原型式继承</h4>\n<p>设计思想：<br>\n如果只是想让一个对象与另一个对象保持类似可以使用原型式继承。<br>\n先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时类型的一个新实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">      F.prototype=o</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;LuLu&quot;</span>,</span><br><span class=\"line\">      age:<span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=object(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.name) <span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从本质上讲，object（）对传入其中的对象执行了一次浅拷贝<br>\n<strong>Object.create规范了原型式继承,就相当于是例子中的object方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;LuLu&quot;</span>,</span><br><span class=\"line\">      age:<span class=\"number\">29</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.name) <span class=\"comment\">//&quot;LuLu&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.age)<span class=\"comment\">//29</span></span><br></pre></td></tr></table></figure>\n<p>缺点：<br>\n其实原型式继承的本质是把一个函数的原型对象赋值给要创建的那个对象（新创建的对象的__proto__指向了被创建函数的prototype），所以引用类型还是会有共享值得情况。<br>\n<strong>Object.create创建的对象会存在引用对象共享值得情况。并且没有办法继承到父类的实例属性和实例方法。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      colorArr:[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    person1.colorArr.push(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person1.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> person2=<span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person2.colorArr)<span class=\"comment\">//[&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"寄生继承\">寄生继承</h4>\n<p>寄生继承与原型继承相类似：<br>\n原型继承复制一个对象到构造函数的原型对象上。然后返回实例。<br>\n寄生继承通过Object复制一个仅用于封装继承过程的函数，在函数内部以某种方式来增强对象，最后返回对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunc</span>(<span class=\"params\">original</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过Object复制一个对象，不是一定要用Object的，其他可以复制对象的都可以用</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> clone=<span class=\"built_in\">Object</span>(original)</span><br><span class=\"line\">    <span class=\"comment\">//给对象添加方法</span></span><br><span class=\"line\">      clone.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">&quot;bibi&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=createFunc(person)</span><br><span class=\"line\">    person1.sayName()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"寄生组合继承\">寄生组合继承</h4>\n<p>针对于组合继承中父类的实例属性会生成两份的情况，寄生组合其实就是拷贝一份父类原型给到子类，子类不再通过父类构造函数获得从而子类原型上不会再有父类实例属性。<br>\n<strong>借用构造是有call和apply方法不变，原型继承从继承父类构造函数变成继承父类原型对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name=name</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.colorsArr=[<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;yellow&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SuperType.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">      SuperType.call(<span class=\"built_in\">this</span>,name)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.age=age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inheritPrototype(SubType,SuperType)</span><br><span class=\"line\"></span><br><span class=\"line\">    SubType.prototype.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person1=<span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;Lulu&quot;</span>,<span class=\"number\">28</span>)</span><br><span class=\"line\">    person1.sayName()</span><br><span class=\"line\">    person1.sayAge()</span><br><span class=\"line\">   </span><br><span class=\"line\">     <span class=\"comment\">//函数变量提升可以放在调用之后定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType,superType</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//拷贝一份父类原型副本赋值给子类原型，实现继承</span></span><br><span class=\"line\">     <span class=\"comment\">//原本的object()方法已经被废弃，所以现在使用的Object方法。</span></span><br><span class=\"line\">     <span class=\"comment\">//但是使用Object方法相当于父类原型对象赋值给子类原型对象，</span></span><br><span class=\"line\">     <span class=\"comment\">//父类的原型对象会被子类原型对象所影响</span></span><br><span class=\"line\">      subType.prototype=<span class=\"built_in\">Object</span>(superType.prototype)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br/>\n<h4 id=\"原型组合继承-最佳方案\">原型组合继承(最佳方案)</h4>\n<p><strong>原型链继承不可以直接赋值，父类的原型对象会被子类原型对象所影响</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        SuperType.prototype.getVal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果使用寄生继承，object()已经被废弃，现在只有Object()方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//但是Object()方法与直接去赋值问题相同，父类原型对象会被子类原型对象所影响</span></span><br><span class=\"line\">      <span class=\"comment\">//  SubType.prototype = Object(SuperType.prototype);</span></span><br><span class=\"line\">       SubType.prototype = SuperType.prototype;</span><br><span class=\"line\">       SubType.prototype.setVal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SuperType.prototype);</span><br><span class=\"line\">      <span class=\"comment\">//&#123;getVal: ƒ, setVal: ƒ, constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure>\n<p>基于寄生组合继承与组合继承的缺点，通过原型组合继承去规避问题<br>\n**使用原型组合继承的方式，通过Object.create方法，**子类原型对象可以通过隐式属性__proto__指向父类的原型对象，且子类原型对象不会影响到父类原型对象。<br>\n<br/></p>\n<p>精华部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类</span></span><br><span class=\"line\">        <span class=\"comment\">//比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用</span></span><br><span class=\"line\">        subType.prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.colorsArr = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        SuperType.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      inheritPrototype(SubType, SuperType);</span><br><span class=\"line\"></span><br><span class=\"line\">      SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person1 = <span class=\"keyword\">new</span> SubType(<span class=\"string\">&quot;Lulu&quot;</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">      person1.sayName();</span><br><span class=\"line\">      person1.sayAge(); <span class=\"comment\">//函数变量提升可以放在调用之后定义</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//比起寄生用的Object() 拷贝，Object.create可以做到子类不影响父类</span></span><br><span class=\"line\">        <span class=\"comment\">//比起原型链的继承父类构造函数的实例，可以避免多一次的函数调用</span></span><br><span class=\"line\">        subType.prototype = <span class=\"built_in\">Object</span>.create(superType.prototype);</span><br><span class=\"line\">       <span class=\"comment\">//保证构造器的一致性，constructor指向subType</span></span><br><span class=\"line\">        subType.prototype.constructor = subType;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//子类SubType的原型对象的隐式属性指向了父类原型对象。</span></span><br><span class=\"line\">      <span class=\"comment\">//子类原型对象既可以添加方法，公共属性也可以完全不影响父类原型对象。</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype.__proto__ == SuperType.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype <span class=\"keyword\">instanceof</span> SuperType); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//子类添加的sayAge方法并没有添加到父类原型对象中</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SuperType.prototype); <span class=\"comment\">//&#123;sayName: ƒ, constructor: ƒ&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(SubType.prototype.constructor);<span class=\"comment\">//function Subtype()&#123; &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"理解对象--Object.keys 、Object.defineProperty、Proxy、Reflect","catalog":true,"date":"2022-11-07T03:00:54.000Z","subtitle":null,"header-img":"/img/header_img/lml_bg.jpg","lang":"cn","_content":"#### Object.keys&Object.defineProperty\n**Object.keys**     可以拿到对象的所有可枚举属性，组成一个字符串数组。\n<br/>\n\n**Object.defineProperty**   \n    直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n    get 在读取属性时会触发get\n    set 在写入属性的时候调用的函数\n    **get与set中的this对象都指向托管的对象，就是第一个参数**\n\n\n```javascript\n   function observe(data) {\n        Object.keys(data).forEach((key) => {\n          if (data[key] && typeof data[key] == \"object\") {\n            //如果对象属性为对象继续往下去递归\n            arguments.callee(data[key]);\n          }\n          defineReactive(data, key, data[key]);\n        });\n      }\n      function defineReactive(data, key, val) {\n        Object.defineProperty(data, key, {\n          enumerable: true,\n          configurable: true,\n          get() {\n            console.log(val);\n            return val;\n          },\n          set(newVal) {\n            if (val === newVal) {\n              return;\n            }\n            val = newVal;\n            console.log(`属性值${key}被监控，现在值为${newVal.toString()}`);\n          },\n        });\n      }\n      let obj = {\n        book1: {\n          info: {\n            name: \"vue指南\",\n          },\n        },\n        book2: \"react指南\",\n      };\n      //托管对象obj下面的所有属性\n      observe(obj);\n\n      //如果把属性值赋值给变量，会触发get方法,\n      //***前后触发三次，分别是obj.book1的get方法，\n      //obj.book1.info的get方法，以及obj.book1.name的get方法\n      let test = obj.book1.info.name;\n\n      //即使什么操作都不做，只是调用一下 obj.book1.info.name;\n      //***同样也是前后触发三次，分别是obj.book1的get方法，\n      //obj.book1.info的get方法，以及obj.book1.name的get方法\n      obj.book1.info.name;\n\n      //给属性值赋值会触发到上次对象属性的get方法为止，\n      //不触发本层get方法，因为到本层就换成触发set方法了\n      //****先触发obj.book1的get方法，   {info:{...}}\n      //然后触发obj.book1.info的get方法   {name:{...}}\n      //最后触发obj.book1.info.name的set方法   属性值name被监控，现在值为vue权威指南\n      obj.book1.info.name = \"vue权威指南\";\n\n      //同样的因为obj.book2没有上层的对象属性，所以直接是触发obj.book2的set方法\n      //******只触发obj.book2的set方法   属性值book2被监控，现在值为react权威指南\n      obj.book2 = \"react权威指南\";\n```\n资料：[Object.defineProperty()详解](https://www.cnblogs.com/ldq678/p/13854113.html)\n\n\n #### Proxy\n      Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n\n\n #### Reflect\n    Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。\n\n\n```javascript\n  Proxy(target, {\n    set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n```javascript\n let obj = {\n  name: 'Eason',\n  age: 30\n}\n\n let handler = {\n  get (target, key, receiver) {\n    console.log('get', key)\n    return Reflect.get(target, key, receiver)\n  },\n  set (target, key, value, receiver) {\n    console.log('set', key, value)\n    return Reflect.set(target, key, value, receiver)\n  }\n}\n  let proxy = new Proxy(obj, handler)\n\n  proxy.name = 'Zoe' // set name Zoe\n  proxy.age = 18 // set age 18\n\n```\n\n\n#### Object.defineProperty()与Proxy区别\n**相同点：**\n  都可以单独使用set或者是get不需要成对出现\n<br/>\n\n**不同点：**\n  Object.defineProperty()只针对对象的某个属性，所以需要使用Object.keys+递归遍历对obj进行遍历。\n  Proxy针对的是整个对象。\n\n#### 除了vue源码以外用到的地方\n![](image.png)\n![](image2.png)\n","source":"_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect.md","raw":"---\ntitle: 理解对象--Object.keys 、Object.defineProperty、Proxy、Reflect\ncatalog: true\ndate: 2022-11-07 11:00:54\nsubtitle:\nheader-img: /img/header_img/lml_bg.jpg\nlang: cn\ntags:\n - js对象\n - Object.keys\n - Object.defineProperty\n - Proxy\n - Reflect\ncategories:\n - javascript\n---\n#### Object.keys&Object.defineProperty\n**Object.keys**     可以拿到对象的所有可枚举属性，组成一个字符串数组。\n<br/>\n\n**Object.defineProperty**   \n    直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n    get 在读取属性时会触发get\n    set 在写入属性的时候调用的函数\n    **get与set中的this对象都指向托管的对象，就是第一个参数**\n\n\n```javascript\n   function observe(data) {\n        Object.keys(data).forEach((key) => {\n          if (data[key] && typeof data[key] == \"object\") {\n            //如果对象属性为对象继续往下去递归\n            arguments.callee(data[key]);\n          }\n          defineReactive(data, key, data[key]);\n        });\n      }\n      function defineReactive(data, key, val) {\n        Object.defineProperty(data, key, {\n          enumerable: true,\n          configurable: true,\n          get() {\n            console.log(val);\n            return val;\n          },\n          set(newVal) {\n            if (val === newVal) {\n              return;\n            }\n            val = newVal;\n            console.log(`属性值${key}被监控，现在值为${newVal.toString()}`);\n          },\n        });\n      }\n      let obj = {\n        book1: {\n          info: {\n            name: \"vue指南\",\n          },\n        },\n        book2: \"react指南\",\n      };\n      //托管对象obj下面的所有属性\n      observe(obj);\n\n      //如果把属性值赋值给变量，会触发get方法,\n      //***前后触发三次，分别是obj.book1的get方法，\n      //obj.book1.info的get方法，以及obj.book1.name的get方法\n      let test = obj.book1.info.name;\n\n      //即使什么操作都不做，只是调用一下 obj.book1.info.name;\n      //***同样也是前后触发三次，分别是obj.book1的get方法，\n      //obj.book1.info的get方法，以及obj.book1.name的get方法\n      obj.book1.info.name;\n\n      //给属性值赋值会触发到上次对象属性的get方法为止，\n      //不触发本层get方法，因为到本层就换成触发set方法了\n      //****先触发obj.book1的get方法，   {info:{...}}\n      //然后触发obj.book1.info的get方法   {name:{...}}\n      //最后触发obj.book1.info.name的set方法   属性值name被监控，现在值为vue权威指南\n      obj.book1.info.name = \"vue权威指南\";\n\n      //同样的因为obj.book2没有上层的对象属性，所以直接是触发obj.book2的set方法\n      //******只触发obj.book2的set方法   属性值book2被监控，现在值为react权威指南\n      obj.book2 = \"react权威指南\";\n```\n资料：[Object.defineProperty()详解](https://www.cnblogs.com/ldq678/p/13854113.html)\n\n\n #### Proxy\n      Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n\n\n #### Reflect\n    Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。\n\n\n```javascript\n  Proxy(target, {\n    set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n```\n\n```javascript\n let obj = {\n  name: 'Eason',\n  age: 30\n}\n\n let handler = {\n  get (target, key, receiver) {\n    console.log('get', key)\n    return Reflect.get(target, key, receiver)\n  },\n  set (target, key, value, receiver) {\n    console.log('set', key, value)\n    return Reflect.set(target, key, value, receiver)\n  }\n}\n  let proxy = new Proxy(obj, handler)\n\n  proxy.name = 'Zoe' // set name Zoe\n  proxy.age = 18 // set age 18\n\n```\n\n\n#### Object.defineProperty()与Proxy区别\n**相同点：**\n  都可以单独使用set或者是get不需要成对出现\n<br/>\n\n**不同点：**\n  Object.defineProperty()只针对对象的某个属性，所以需要使用Object.keys+递归遍历对obj进行遍历。\n  Proxy针对的是整个对象。\n\n#### 除了vue源码以外用到的地方\n![](image.png)\n![](image2.png)\n","slug":"理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect","published":1,"updated":"2022-11-07T03:00:54.000Z","_id":"cla678n9h0000yguu4r7d95wh","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Object-keys-Object-defineProperty\">Object.keys&amp;Object.defineProperty</h4>\n<p><strong>Object.keys</strong>     可以拿到对象的所有可枚举属性，组成一个字符串数组。<br>\n<br/></p>\n<p><strong>Object.defineProperty</strong><br>\n    直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。<br>\n    get 在读取属性时会触发get<br>\n    set 在写入属性的时候调用的函数<br>\n    <strong>get与set中的this对象都指向托管的对象，就是第一个参数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (data[key] &amp;&amp; <span class=\"keyword\">typeof</span> data[key] == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象属性为对象继续往下去递归</span></span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>.callee(data[key]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          defineReactive(data, key, data[key]);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">data, key, val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">          enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newVal</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val === newVal) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            val = newVal;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`属性值<span class=\"subst\">$&#123;key&#125;</span>被监控，现在值为<span class=\"subst\">$&#123;newVal.toString()&#125;</span>`</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        book1: &#123;</span><br><span class=\"line\">          info: &#123;</span><br><span class=\"line\">            name: <span class=\"string\">&quot;vue指南&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        book2: <span class=\"string\">&quot;react指南&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">//托管对象obj下面的所有属性</span></span><br><span class=\"line\">      observe(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//如果把属性值赋值给变量，会触发get方法,</span></span><br><span class=\"line\">      <span class=\"comment\">//***前后触发三次，分别是obj.book1的get方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//obj.book1.info的get方法，以及obj.book1.name的get方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = obj.book1.info.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//即使什么操作都不做，只是调用一下 obj.book1.info.name;</span></span><br><span class=\"line\">      <span class=\"comment\">//***同样也是前后触发三次，分别是obj.book1的get方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//obj.book1.info的get方法，以及obj.book1.name的get方法</span></span><br><span class=\"line\">      obj.book1.info.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//给属性值赋值会触发到上次对象属性的get方法为止，</span></span><br><span class=\"line\">      <span class=\"comment\">//不触发本层get方法，因为到本层就换成触发set方法了</span></span><br><span class=\"line\">      <span class=\"comment\">//****先触发obj.book1的get方法，   &#123;info:&#123;...&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">//然后触发obj.book1.info的get方法   &#123;name:&#123;...&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">//最后触发obj.book1.info.name的set方法   属性值name被监控，现在值为vue权威指南</span></span><br><span class=\"line\">      obj.book1.info.name = <span class=\"string\">&quot;vue权威指南&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//同样的因为obj.book2没有上层的对象属性，所以直接是触发obj.book2的set方法</span></span><br><span class=\"line\">      <span class=\"comment\">//******只触发obj.book2的set方法   属性值book2被监控，现在值为react权威指南</span></span><br><span class=\"line\">      obj.book2 = <span class=\"string\">&quot;react权威指南&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>资料：<a href=\"https://www.cnblogs.com/ldq678/p/13854113.html\">Object.defineProperty()详解</a></p>\n<h4 id=\"Proxy\">Proxy</h4>\n<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>\n<h4 id=\"Reflect\">Reflect</h4>\n<p>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Eason&#x27;</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  get (target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>, key, value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, handler)</span><br><span class=\"line\"></span><br><span class=\"line\">  proxy.name = <span class=\"string\">&#x27;Zoe&#x27;</span> <span class=\"comment\">// set name Zoe</span></span><br><span class=\"line\">  proxy.age = <span class=\"number\">18</span> <span class=\"comment\">// set age 18</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Object-defineProperty-与Proxy区别\">Object.defineProperty()与Proxy区别</h4>\n<p><strong>相同点：</strong><br>\n  都可以单独使用set或者是get不需要成对出现<br>\n<br/></p>\n<p><strong>不同点：</strong><br>\n  Object.defineProperty()只针对对象的某个属性，所以需要使用Object.keys+递归遍历对obj进行遍历。<br>\n  Proxy针对的是整个对象。</p>\n<h4 id=\"除了vue源码以外用到的地方\">除了vue源码以外用到的地方</h4>\n<p><img src=\"image.png\" alt=\"\"><br>\n<img src=\"image2.png\" alt=\"\"></p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h4 id=\"Object-keys-Object-defineProperty\">Object.keys&amp;Object.defineProperty</h4>\n<p><strong>Object.keys</strong>     可以拿到对象的所有可枚举属性，组成一个字符串数组。<br>\n<br/></p>\n<p><strong>Object.defineProperty</strong><br>\n    直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。<br>\n    get 在读取属性时会触发get<br>\n    set 在写入属性的时候调用的函数<br>\n    <strong>get与set中的this对象都指向托管的对象，就是第一个参数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (data[key] &amp;&amp; <span class=\"keyword\">typeof</span> data[key] == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果对象属性为对象继续往下去递归</span></span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>.callee(data[key]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          defineReactive(data, key, data[key]);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">data, key, val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(data, key, &#123;</span><br><span class=\"line\">          enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newVal</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val === newVal) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            val = newVal;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`属性值<span class=\"subst\">$&#123;key&#125;</span>被监控，现在值为<span class=\"subst\">$&#123;newVal.toString()&#125;</span>`</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        book1: &#123;</span><br><span class=\"line\">          info: &#123;</span><br><span class=\"line\">            name: <span class=\"string\">&quot;vue指南&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        book2: <span class=\"string\">&quot;react指南&quot;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">//托管对象obj下面的所有属性</span></span><br><span class=\"line\">      observe(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//如果把属性值赋值给变量，会触发get方法,</span></span><br><span class=\"line\">      <span class=\"comment\">//***前后触发三次，分别是obj.book1的get方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//obj.book1.info的get方法，以及obj.book1.name的get方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = obj.book1.info.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//即使什么操作都不做，只是调用一下 obj.book1.info.name;</span></span><br><span class=\"line\">      <span class=\"comment\">//***同样也是前后触发三次，分别是obj.book1的get方法，</span></span><br><span class=\"line\">      <span class=\"comment\">//obj.book1.info的get方法，以及obj.book1.name的get方法</span></span><br><span class=\"line\">      obj.book1.info.name;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//给属性值赋值会触发到上次对象属性的get方法为止，</span></span><br><span class=\"line\">      <span class=\"comment\">//不触发本层get方法，因为到本层就换成触发set方法了</span></span><br><span class=\"line\">      <span class=\"comment\">//****先触发obj.book1的get方法，   &#123;info:&#123;...&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">//然后触发obj.book1.info的get方法   &#123;name:&#123;...&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\">//最后触发obj.book1.info.name的set方法   属性值name被监控，现在值为vue权威指南</span></span><br><span class=\"line\">      obj.book1.info.name = <span class=\"string\">&quot;vue权威指南&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//同样的因为obj.book2没有上层的对象属性，所以直接是触发obj.book2的set方法</span></span><br><span class=\"line\">      <span class=\"comment\">//******只触发obj.book2的set方法   属性值book2被监控，现在值为react权威指南</span></span><br><span class=\"line\">      obj.book2 = <span class=\"string\">&quot;react权威指南&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>资料：<a href=\"https://www.cnblogs.com/ldq678/p/13854113.html\">Object.defineProperty()详解</a></p>\n<h4 id=\"Proxy\">Proxy</h4>\n<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>\n<h4 id=\"Reflect\">Reflect</h4>\n<p>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;Eason&#x27;</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">  get (target, key, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (target, key, value, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>, key, value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, handler)</span><br><span class=\"line\"></span><br><span class=\"line\">  proxy.name = <span class=\"string\">&#x27;Zoe&#x27;</span> <span class=\"comment\">// set name Zoe</span></span><br><span class=\"line\">  proxy.age = <span class=\"number\">18</span> <span class=\"comment\">// set age 18</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Object-defineProperty-与Proxy区别\">Object.defineProperty()与Proxy区别</h4>\n<p><strong>相同点：</strong><br>\n  都可以单独使用set或者是get不需要成对出现<br>\n<br/></p>\n<p><strong>不同点：</strong><br>\n  Object.defineProperty()只针对对象的某个属性，所以需要使用Object.keys+递归遍历对obj进行遍历。<br>\n  Proxy针对的是整个对象。</p>\n<h4 id=\"除了vue源码以外用到的地方\">除了vue源码以外用到的地方</h4>\n<p><img src=\"image.png\" alt=\"\"><br>\n<img src=\"image2.png\" alt=\"\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/bglinecanvas.png","slug":"bglinecanvas.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/dark.png","slug":"dark.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/langcn.png","slug":"langcn.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/langen.png","slug":"langen.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/light.png","slug":"light.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/livemylife-desktop.png","slug":"livemylife-desktop.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/mouseclick.png","slug":"mouseclick.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/ribbon.png","slug":"ribbon.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/top.png","slug":"top.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/en/Hexo-Theme-LiveMyLife/wave.png","slug":"wave.png","post":"cl9p2f078000ua8uuflm74j8v","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/bglinecanvas.png","slug":"bglinecanvas.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/dark.png","slug":"dark.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langcn.png","slug":"langcn.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/langen.png","slug":"langen.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/light.png","slug":"light.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/livemylife-desktop.png","slug":"livemylife-desktop.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/mouseclick.png","slug":"mouseclick.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/ribbon.png","slug":"ribbon.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/top.png","slug":"top.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/cn/Hexo-Theme-LiveMyLife/wave.png","slug":"wave.png","post":"cl9p2f077000ta8uubdq85gpk","modified":0,"renderable":0},{"_id":"source/_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect/image.png","slug":"image.png","post":"cla678n9h0000yguu4r7d95wh","modified":0,"renderable":0},{"_id":"source/_posts/理解对象-Object-keys-、Object-defineProperty、Proxy、Reflect/image2.png","slug":"image2.png","post":"cla678n9h0000yguu4r7d95wh","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl9p2f06w0001a8uudrh2hn83","category_id":"cl9p2f06z0003a8uuhfjfbzq0","_id":"cl9p2f072000ba8uu1nkwcqb4"},{"post_id":"cl9p2f074000fa8uu12tbdqt3","category_id":"cl9p2f075000ha8uu18lvddn6","_id":"cl9p2f076000ma8uu1f545s04"},{"post_id":"cl9p2f074000ga8uu7lsybth4","category_id":"cl9p2f075000ja8uu9dsxbt1v","_id":"cl9p2f076000oa8uuhrqcbouc"},{"post_id":"cl9p2f077000ta8uubdq85gpk","category_id":"cl9p2f079000va8uu95ara78c","_id":"cl9p2f07c0010a8uu4ydl76td"},{"post_id":"cl9p2f078000ua8uuflm74j8v","category_id":"cl9p2f079000va8uu95ara78c","_id":"cl9p2f07c0012a8uu46fm8ktc"},{"post_id":"cl9z0y82q00018guu88fpf6t1","category_id":"cl9p2f075000ha8uu18lvddn6","_id":"cl9z10ah000038guud0t6bjuv"},{"post_id":"cla678n9h0000yguu4r7d95wh","category_id":"cl9p2f075000ha8uu18lvddn6","_id":"cla678n9o0007yguu91845jkz"}],"PostTag":[{"post_id":"cl9p2f06w0001a8uudrh2hn83","tag_id":"cl9p2f0700004a8uudva17hmo","_id":"cl9p2f073000da8uu18e13xn5"},{"post_id":"cl9p2f06w0001a8uudrh2hn83","tag_id":"cl9p2f0710008a8uu8l21ek8x","_id":"cl9p2f073000ea8uu0gou80qj"},{"post_id":"cl9p2f074000ga8uu7lsybth4","tag_id":"cl9p2f075000ka8uuhaxa1xs0","_id":"cl9p2f076000qa8uuhqru5po1"},{"post_id":"cl9p2f074000ga8uu7lsybth4","tag_id":"cl9p2f076000na8uubqa11dql","_id":"cl9p2f076000ra8uufdmh7ou2"},{"post_id":"cl9p2f074000ga8uu7lsybth4","tag_id":"cl9p2f076000pa8uu446igqtv","_id":"cl9p2f076000sa8uuaqysh0dl"},{"post_id":"cl9p2f077000ta8uubdq85gpk","tag_id":"cl9p2f079000wa8uub5lybtof","_id":"cl9p2f07b000za8uu7uzue363"},{"post_id":"cl9p2f078000ua8uuflm74j8v","tag_id":"cl9p2f079000wa8uub5lybtof","_id":"cl9p2f07c0011a8uuggu951n8"},{"post_id":"cl9p2f074000fa8uu12tbdqt3","tag_id":"cla678n9q000byguubb9m1eig","_id":"cla678n9r000dyguub6mt91g7"},{"post_id":"cl9z0y82q00018guu88fpf6t1","tag_id":"cla678n9q000byguubb9m1eig","_id":"cla6793rp000fyguu0hyq4e5r"},{"post_id":"cla678n9h0000yguu4r7d95wh","tag_id":"cla678n9q000byguubb9m1eig","_id":"cla6799n8000hyguu7bij1iu6"},{"post_id":"cla678n9h0000yguu4r7d95wh","tag_id":"cla6dls8l0000nguu2r9m9wgj","_id":"cla6dls8p0004nguucufz1ah2"},{"post_id":"cla678n9h0000yguu4r7d95wh","tag_id":"cla6dls8o0001nguufv5x6kx8","_id":"cla6dls8p0005nguug4ll8vwz"},{"post_id":"cla678n9h0000yguu4r7d95wh","tag_id":"cla6dls8o0002nguu022253yp","_id":"cla6dls8p0006nguu1gz35hx8"},{"post_id":"cla678n9h0000yguu4r7d95wh","tag_id":"cla6dls8o0003nguu54i91hux","_id":"cla6dls8p0007nguugl4i7fob"}],"Tag":[{"name":"VMware","_id":"cl9p2f0700004a8uudva17hmo"},{"name":"CentOS","_id":"cl9p2f0710008a8uu8l21ek8x"},{"name":"javascript","_id":"cl9p2f075000ia8uuh9cw7lq6"},{"name":"Github","_id":"cl9p2f075000ka8uuhaxa1xs0"},{"name":"Hexo","_id":"cl9p2f076000na8uubqa11dql"},{"name":"博客搭建","_id":"cl9p2f076000pa8uu446igqtv"},{"name":"Hexo-Theme-LiveMyLife","_id":"cl9p2f079000wa8uub5lybtof"},{"name":"对象","_id":"cla678n9k0001yguu4neogwlg"},{"name":"js对象","_id":"cla678n9q000byguubb9m1eig"},{"name":"Object.keys","_id":"cla6dls8l0000nguu2r9m9wgj"},{"name":"Object.defineProperty","_id":"cla6dls8o0001nguufv5x6kx8"},{"name":"Proxy","_id":"cla6dls8o0002nguu022253yp"},{"name":"Reflect","_id":"cla6dls8o0003nguu54i91hux"}]}}